1
00:00:00,000 --> 00:00:30,195
[音乐响起--字幕精校中--By Persisan]
[MUSIC PLAYING]

2
00:00:49,570 --> 00:00:53,200
DAVID J. MALAN：好的，这是CS50，这是第九周，
DAVID J. MALAN: All right, this is CS50, and this is week nine,

3
00:00:53,200 --> 00:00:55,510
我们合成过去几周的那一周
the week where we synthesize the past several weeks

4
00:00:55,509 --> 00:00:59,439
以及过去的几种语言，包括HTML，CSS和JavaScript
and the past several languages, including HTML, CSS, and JavaScript

5
00:00:59,439 --> 00:01:02,679
最近，再加上一些SQL，再加上一些Python。
most recently, plus some SQL, plus some Python.

6
00:01:02,679 --> 00:01:05,889
确实，本周的目标是合成所有这些材料
Indeed, the goal for this week is to synthesize all of those materials

7
00:01:05,890 --> 00:01:08,890
进入一个被广泛描述为网络编程的主题。
into a topic that's broadly described as web programming.

8
00:01:08,890 --> 00:01:11,530
为了公平起见，上周我们确实介绍了一些JavaScript，
Now to be fair, last week we did introduce a bit of JavaScript,

9
00:01:11,530 --> 00:01:13,570
而且您确实可以通过JavaScript进行编程，
and via JavaScript can you indeed program,

10
00:01:13,569 --> 00:01:16,749
但这完全是客户端，因为我们上周使用了JavaScript。
but it was entirely client side as we used JavaScript last week.

11
00:01:16,750 --> 00:01:19,779
这周我们将重新介绍服务器端组件
This week we'll reintroduce a server side component

12
00:01:19,780 --> 00:01:23,500
并最终将浏览器（即所谓的客户端）捆绑在一起，
and indeed end by tying together the browser, the so-called client,

13
00:01:23,500 --> 00:01:27,379
和Web服务器，即任何Web应用程序的后端。
and the web server, the backend of any web application.

14
00:01:27,379 --> 00:01:29,769
因此，要到达那里，让我们考虑一下我们来自哪里。
So to get there, let's consider where we came from.

15
00:01:29,769 --> 00:01:34,059
上周，为了提供您的任何静态网页，
Last week in order to serve up any of your static web pages,

16
00:01:34,060 --> 00:01:37,330
从某种意义上说，它们是静态的，一旦您编写它们，它们就不会改变
static in the sense that once you write them, they don't change

17
00:01:37,329 --> 00:01:39,879
从根本上讲，他们不会特别接受用户输入
fundamentally, they don't particularly take user input

18
00:01:39,879 --> 00:01:41,769
除非您添加一点JavaScript，
unless you add a little bit of JavaScript,

19
00:01:41,769 --> 00:01:44,649
我们仅使用称为http-server的简单程序。
we use just this simple program called http-server.

20
00:01:44,650 --> 00:01:48,520
现在在Mac和Windows上还有此命令的其他等效项
Now there are other equivalents of this command on Macs and Windows

21
00:01:48,519 --> 00:01:51,279
和Linux等平台，但出于我们的目的，
and Linux and other platforms, but for our purposes,

22
00:01:51,280 --> 00:01:55,900
http-server程序实际上只是运行Web服务器。
http-server the program literally just runs a web server.

23
00:01:55,900 --> 00:01:57,880
网络服务器只是软件的一部分
And a web server is just a piece of software

24
00:01:57,879 --> 00:02:03,819
就TCP调用而言，它一直在侦听端口80或端口443，
that's constantly listening on port 80 or port 443 in terms of TCP recall,

25
00:02:03,819 --> 00:02:05,529
它只是在监听连接。
and it's just listening for connections.

26
00:02:05,530 --> 00:02:08,889
每次您的浏览器连接时，它都会查看URL
And any time your browser connects it looks at the URL

27
00:02:08,889 --> 00:02:11,470
您访问过的位置，也许还有一些参数
that you visited and maybe some parameters that you

28
00:02:11,469 --> 00:02:15,219
可能是通过该URL提供的，或更普遍地是通过表单提供的，
may have provided via that URL, or more generally via a form,

29
00:02:15,219 --> 00:02:19,389
然后提供网页，并提供某种输出。
and it then serves up a web page, optionally with some kind of output.

30
00:02:19,389 --> 00:02:22,509
但是，当然，上周的一切实际上只是静态的。
But of course everything last week really was just static.

31
00:02:22,509 --> 00:02:25,359
只是HTML文件，CSS文件，也许
It was just HTML files, CSS files, and maybe

32
00:02:25,360 --> 00:02:27,820
一些JavaScript文件或其中的JavaScript。
some JavaScript files or JavaScript within.

33
00:02:27,819 --> 00:02:30,519
但是在浏览器的要求范围内
But within the requests that your browsers

34
00:02:30,520 --> 00:02:35,880
发送到该Web服务器，重新调用HTTP标头。
were sending to that web server, were recall HTTP headers like this.

35
00:02:35,879 --> 00:02:39,639
因此，在http-server程序正在执行的操作中，
And so among the things that program http-server was doing,

36
00:02:39,639 --> 00:02:41,979
在任何网络服务器正在做的事情中，
and among the things any web server was doing,

37
00:02:41,979 --> 00:02:45,949
正在从上到下分析该虚拟信封的内容，
was analyzing the contents of that virtual envelope, top to bottom,

38
00:02:45,949 --> 00:02:49,626
从左到右，试图了解您的浏览器或朋友是什么
left to right, trying to understand what is it your browser or your friend

39
00:02:49,627 --> 00:02:51,460
或您的家人（如果您分享了您的）
or your family member if you shared your you

40
00:02:51,460 --> 00:02:53,620
与他们的网址正在尝试请求。
URL with them was trying to request.

41
00:02:53,620 --> 00:02:57,130
如果这些HTTP标头的第一行只是斜线，
And if the first line of those HTTP headers was just get slash,

42
00:02:57,129 --> 00:02:59,239
那就意味着给我默认的网页。
that just means give me the default web page.

43
00:02:59,240 --> 00:03:03,730
按照惯例，回想一下，通常意味着专门给我文件
And by convention, recall that typically means specifically give me the file

44
00:03:03,729 --> 00:03:05,469
称为索引点HTML。
called index dot HTML.

45
00:03:05,469 --> 00:03:08,379
如果您按字面意义输入索引，那可能已经很明确了
That might have been explicit if you literally typed index

46
00:03:08,379 --> 00:03:12,759
点HTML到浏览器的URL栏中，这将更加明确地表明
dot HTML into the browser's URL bar, that would even more explicitly tell

47
00:03:12,759 --> 00:03:14,799
服务器为您提供该文件。
the server to give you that file.

48
00:03:14,800 --> 00:03:18,286
但是回想一下，我们也曾在google.com上玩过
But recall we also played with google.com

49
00:03:18,286 --> 00:03:20,680
特别是其搜索功能。
and specifically its search functionality.

50
00:03:20,680 --> 00:03:23,590
回想一下，我们上周手动构建了
And recall that we manually last week constructed

51
00:03:23,590 --> 00:03:26,230
看起来像这样的网址，然后我们将其复制
a URL that looked like this, and then we replicated it

52
00:03:26,229 --> 00:03:30,519
带有实际的HTML表单，提交时的结果使我们
with an actual HTML form, the result of which when submitting it brought us

53
00:03:30,520 --> 00:03:37,000
URL的形式为HTTPS冒号斜杠，www.google.com斜杠搜索，
to a URL of the form HTTPS colon slash slash, www.google.com slash search,

54
00:03:37,000 --> 00:03:39,669
问号q等于猫。
question mark q equals cats.

55
00:03:39,669 --> 00:03:43,299
而上周的http服务器相当简单。
And last week http-server is fairly simplistic.

56
00:03:43,300 --> 00:03:44,870
它仅提供静态内容。
It only served static content.

57
00:03:44,870 --> 00:03:48,370
因此，它几乎忽略了诸如这些URL参数之类的东西。
So it was pretty much ignoring things like these URL parameters.

58
00:03:48,370 --> 00:03:51,910
但是，如果您实际上想编写一个后端Web服务器，
But if you actually want to write a backend web server,

59
00:03:51,909 --> 00:03:54,879
像google.com本身这样的网络应用程序，您
a web application like google.com itself, you

60
00:03:54,879 --> 00:03:58,209
需要能够分析该虚拟信封的内容，
need to be able to analyze the contents of this virtual envelope,

61
00:03:58,210 --> 00:04:02,080
可以这么说，找出用户想要的路径或路线。
figure out what path the user wants, or route, so to speak.

62
00:04:02,080 --> 00:04:04,840
斜线搜索将是此处的路线。
Slash search would be the route here in question.

63
00:04:04,840 --> 00:04:08,380
然后，您必须确定确切的HTTP参数是什么。
And then you have to figure out what the exact HTTP parameters are.

64
00:04:08,379 --> 00:04:11,109
Q，在这种情况下，其值为“ cats”。
Q, in this case, whose value is "cats."

65
00:04:11,110 --> 00:04:16,360
因此，某个地方的某人必须编写解析该字符串的代码，从而弄清楚
So someone somewhere has to write code that parses that string, figuring out

66
00:04:16,360 --> 00:04:19,360
您想进行斜线搜索，然后，让我们忽略问号。
that you want slash search and then, OK, let's ignore the question mark.

67
00:04:19,360 --> 00:04:22,660
让我们声明一个名为q的变量，并给它一个值“ cats”。
Let's declare a variable called q, and let's give it a value of "cats."

68
00:04:22,660 --> 00:04:26,050
就像图片中的某处一样，需要有代码来执行此操作。
Like somewhere in the picture there needs to be code that does that.

69
00:04:26,050 --> 00:04:28,510
今天，我们向您介绍该代码。
And today we introduce you to that very code.

70
00:04:28,509 --> 00:04:31,809
我们将向您介绍一个名为Flask的库。
And we're going to introduce you to a library called Flask.

71
00:04:31,810 --> 00:04:35,080
从技术上讲，Flask也称为框架。
And technically speaking, Flask is also called a framework.

72
00:04:35,079 --> 00:04:37,699
框架是一种做事的方式。
A framework is a way of doing things.

73
00:04:37,699 --> 00:04:40,419
这是组织代码的一种方式，这是一种方式
It's a way of organizing your code, it's a way

74
00:04:40,420 --> 00:04:42,790
编写代码的过程更具体地是
of writing your code that more specifically is

75
00:04:42,790 --> 00:04:44,500
以及您应该如何使用该库。
just how you should use this library.

76
00:04:44,500 --> 00:04:45,729
现在为什么Flask存在？
Now why does Flask exist?

77
00:04:45,730 --> 00:04:47,200
还有其他选择。
And there are alternatives.

78
00:04:47,199 --> 00:04:50,859
好吧，Flask的存在只是为了诚实地简化许多任务
Well, Flask exists just to honestly simplify a lot of tasks

79
00:04:50,860 --> 00:04:54,170
对你和我来说，很快就会变得很无聊。
that for you and me would just get pretty boring pretty quickly.

80
00:04:54,170 --> 00:04:56,500
想象一下，如果您想要的话，那会是多么烦人
Imagine how annoying it would be if you wanted

81
00:04:56,500 --> 00:05:00,129
为此实施一些新的网站或一些新的移动应用程序，
to implement some new website or some new mobile application for that matter,

82
00:05:00,129 --> 00:05:05,379
而且您每次都必须编写代码来分析此类文本
and you had to write code that analyzed text like this every time

83
00:05:05,379 --> 00:05:07,539
只是弄清楚用户的输入是什么。
just to figure out what the user's input is.

84
00:05:07,540 --> 00:05:10,510
如果您可以只调用一个函数，那不是很好吗？
Wouldn't it be nice if you can just call a function, the equivalent

85
00:05:10,509 --> 00:05:14,319
获取字符串或获取int，并编写其他函数
of get string or get int, and let some other function written

86
00:05:14,319 --> 00:05:17,859
别人看那个文本，弄清楚参数是什么
by someone else look at that text, figure out what the parameters are

87
00:05:17,860 --> 00:05:22,180
以及它们的价值是什么，只需将它们以易于使用的方式交给您
and what their values are, and just hand them to you in nice easy to use

88
00:05:22,180 --> 00:05:23,030
变量。
variables.

89
00:05:23,029 --> 00:05:25,579
这就是Flask为您做的事情之一。
So that is one of the things that Flask does for you.

90
00:05:25,579 --> 00:05:28,329
它分析了这些虚拟信封的内部，
It analyzes the insides of these virtual envelopes,

91
00:05:28,329 --> 00:05:31,659
弄清楚用户输入是什么，弄清楚
figures out what the user input is, figures out

92
00:05:31,660 --> 00:05:35,500
路线是什么，例如斜杠搜索或斜杠索引点HTML
what the route is, like slash search or slash index dot HTML

93
00:05:35,500 --> 00:05:38,259
用户想要的，并使其更容易
that the user wants, and makes it more easily

94
00:05:38,259 --> 00:05:40,239
可供您使用的程序员。
available to you, the programmer.

95
00:05:40,240 --> 00:05:43,330
从某种意义上说，这是一个框架，通常
And it's a framework now in the sense that typically when

96
00:05:43,329 --> 00:05:48,299
您将像今天一样创建基于Flask的网络应用程序，
you create, as we will today, a Flask based web application,

97
00:05:48,300 --> 00:05:51,453
您通常将以这种方式组织文件和文件夹。
you're going to typically organize your files and folders in this way.

98
00:05:51,452 --> 00:05:52,994
这就是我所说的框架。
And this is what I mean by framework.

99
00:05:52,995 --> 00:05:56,610
框架不仅仅是具有可调用功能的库。
Frameworks are not just libraries where they have functions that you can call.

100
00:05:56,610 --> 00:06:00,460
他们通常有说明要使用这些功能的文档，
They typically have documentation that says, to use these functions,

101
00:06:00,459 --> 00:06:04,199
您还应该以这种方式组织文件和文件夹。
you should additionally organize your files and folders in this way.

102
00:06:04,199 --> 00:06:08,459
也许最简单的Flask应用程序将具有以下文件：
And perhaps the simplest Flask application would have these files:

103
00:06:08,459 --> 00:06:13,679
应用程序py，这是我们所做的全部工作
application dot py, which is where really all of our effort

104
00:06:13,680 --> 00:06:16,350
将要编写代码，在这种情况下是在Python中，
is going to go in writing code, in this case in Python,

105
00:06:16,350 --> 00:06:20,670
要求点文本，它只是一个枚举的简单文本文件，
requirements dot text, which is just a simple text file that enumerates,

106
00:06:20,670 --> 00:06:24,300
从上到下，每行一个，您还需要其他哪些库
top to bottom, one per line, what are the other libraries that you

107
00:06:24,300 --> 00:06:27,112
想要在您的应用程序中使用静态
want to use in your application, static, which

108
00:06:27,112 --> 00:06:29,070
将会是一个包含字面意义的文件夹
is going to be a folder that literally contains

109
00:06:29,069 --> 00:06:33,059
静态文件，例如gif，jpeg，ping，CSS
static files like your gifs, your jpegs, your pings, your CSS

110
00:06:33,060 --> 00:06:36,720
文件，您的JavaScript文件，您上周编写的任何文件，
files, your JavaScript files, any of the files you wrote this past week,

111
00:06:36,720 --> 00:06:40,650
现在，他们将进入该静态文件夹，最后进入模板。
now they're going to go into this static folder, and lastly templates.

112
00:06:40,649 --> 00:06:44,069
模板将成为您更多HTML的去向。
And templates is going to be where more of your HTML goes.

113
00:06:44,069 --> 00:06:47,769
我们将看到与上周的区别。
And we'll see what the distinction is there versus last week.

114
00:06:47,769 --> 00:06:50,159
简而言之，如果您想制作一个Web应用程序，
So in short if you want to make a web application,

115
00:06:50,160 --> 00:06:53,160
不是网站，而是需要用户输入的Web应用程序，
not a website, a web application that takes user input,

116
00:06:53,160 --> 00:06:55,380
产生用户输出，也许与数据库对话，
produces user output, maybe talks to a database,

117
00:06:55,379 --> 00:06:58,259
可能会发送电子邮件，可能还会进行其他任何事情，
maybe sends emails, maybe does any number of other things,

118
00:06:58,259 --> 00:07:01,679
以编程方式您有一个Web应用程序
programmatically you have a web application

119
00:07:01,680 --> 00:07:04,380
并将在此处使用称为Flask的框架。
and will use this framework here called Flask.

120
00:07:04,379 --> 00:07:05,549
还有其他选择。
And there are alternatives.

121
00:07:05,550 --> 00:07:09,300
在Python世界中，有一个名为Django的框架，
In the world of Python there is a framework called Django,

122
00:07:09,300 --> 00:07:13,380
在PHP的世界中，有一些框架，例如Symfony和Laravel等。
in the world of PHP there are frameworks like Symfony and Laravel and the like.

123
00:07:13,379 --> 00:07:17,259
在Java，C Sharp和其他语言中，也有类似的框架。
In Java, in C sharp, and other languages there are similar frameworks.

124
00:07:17,259 --> 00:07:21,489
因此，这只是现有框架类型的代表。
So this is just representative of the types of frameworks that are out there.

125
00:07:21,490 --> 00:07:25,320
但是，在深入研究一些实际代码之前，可能会有所帮助
But it's perhaps helpful to know before we dive into some actual code

126
00:07:25,319 --> 00:07:29,489
这些框架倾向于实现某些设计模式。
that these frameworks tend to implement certain design patterns.

127
00:07:29,490 --> 00:07:32,970
同样，设计模式只是描述方式的一种理想方式
A design pattern is, again, just a fancy way of describing ways

128
00:07:32,970 --> 00:07:34,650
人类编写代码。
that humans write code.

129
00:07:34,649 --> 00:07:36,869
可以说过去几十年来，
Suffice it to say over the past many decades,

130
00:07:36,870 --> 00:07:39,510
很多人最初都是独立工作的
a lot of humans working initially independently

131
00:07:39,509 --> 00:07:41,669
不断地解决相同的问题，
kept solving the same problems again and again,

132
00:07:41,670 --> 00:07:44,160
他们意识到，哇，我注意到了模式
and they realized, wow, I'm noticing patterns

133
00:07:44,160 --> 00:07:46,290
我如何解决这个项目的问题
in how I'm solving a problem for this project

134
00:07:46,290 --> 00:07:47,980
对于这个项目和另一个。
and for this project and another.

135
00:07:47,980 --> 00:07:50,380
一旦人类程序员注意到了这些模式，
And once human programmers noticed these patterns,

136
00:07:50,379 --> 00:07:53,099
他们可以通过写书来形式化他们，
they might formalize them by writing a book,

137
00:07:53,100 --> 00:07:55,080
通过写博客文章之类的，然后
by writing a blog post or the like, and then

138
00:07:55,079 --> 00:07:58,749
给他们起一个名字，一个推荐给其他人采用的设计模式。
give them a name, a design pattern that they recommend that other people adopt.

139
00:07:58,750 --> 00:07:59,339
为什么？
Why?

140
00:07:59,339 --> 00:08:02,249
只是因为它可以帮助您组织代码
Just because it helps you organize your code instead

141
00:08:02,250 --> 00:08:04,529
将所有代码放在一个大文件中，
of putting all your code in one massive file,

142
00:08:04,529 --> 00:08:07,259
好吧，如果我们在这里放一些代码，在这里放一些代码，
well maybe if we put some code here, some code here,

143
00:08:07,259 --> 00:08:09,329
我们可以更有效地与他人合作
we can collaborate more effectively with others

144
00:08:09,329 --> 00:08:12,869
并在维护越来越大的项目时保持理智。
and just keep ourselves sane when maintaining bigger and bigger projects.

145
00:08:12,870 --> 00:08:15,210
所以Flask实现了众所周知的
So Flask implements what's generally known

146
00:08:15,209 --> 00:08:19,499
作为MVC设计模式或范例。
as an MVC design pattern or paradigm.

147
00:08:19,500 --> 00:08:23,730
MVC仅指代表模型，视图，
MVC just refers to an acronym representing model, view,

148
00:08:23,730 --> 00:08:24,630
和控制器。
and controller.

149
00:08:24,629 --> 00:08:27,899
这些都是技术性的术语，最终
And these are sort of technical terms of art that at the end of the day

150
00:08:27,899 --> 00:08:29,729
我们将看到相对简单。
we'll see are relatively simple.

151
00:08:29,730 --> 00:08:33,539
控制器将成为您编写大多数Python代码的地方。
Controller is going to be where you write most of your Python code.

152
00:08:33,538 --> 00:08:37,389
它是控制您的Web应用程序的一个或多个文件。
It is the file or files that control your web application.

153
00:08:37,389 --> 00:08:41,249
因此，过去，无论何时我们编写C程序或Python程序，
So in the past, any time we've written a C program or a Python program,

154
00:08:41,250 --> 00:08:43,529
您实际上一直在编写控制器代码。
you have in effect been writing controller code.

155
00:08:43,529 --> 00:08:45,719
我们只是从未在上面贴上标签。
We just never slapped that label on it.

156
00:08:45,720 --> 00:08:50,760
今天也将有一个我们称为视图的视图，即MVC中的V。
There's also going to be today what we'll call a view, the V in MVC.

157
00:08:50,759 --> 00:08:55,709
而视图只是指人类可以看到的所有内容，例如HTML，CSS，
And view just refers to all of the stuff that a human views, the HTML, the CSS,

158
00:08:55,710 --> 00:08:57,540
更一般而言，用户界面。
more generally the user interface.

159
00:08:57,539 --> 00:09:00,269
任何涉及用户的内容都将被描述
Anything involving the user is going to be described

160
00:09:00,269 --> 00:09:02,339
作为应用程序视图的一部分。
as part of your application's view.

161
00:09:02,340 --> 00:09:05,160
但同样，您（程序员）编写的任何代码，
But again, any of the code that you, the programmer, write,

162
00:09:05,159 --> 00:09:07,619
可以说，这是您控制器的一部分。
that's part of your controller, so to speak.

163
00:09:07,620 --> 00:09:10,830
最后是所谓的模型，MVC中的M。
And then lastly is the so-called model, the M in MVC.

164
00:09:10,830 --> 00:09:15,930
这通常指的是什么技术，什么服务，什么软件
And this generally refers to what technique, what service, what software

165
00:09:15,929 --> 00:09:17,589
您正在使用的数据。
you're using for your data.

166
00:09:17,590 --> 00:09:20,940
因此，也许这是一个SQL数据库，或者那是一个CSV文件。
So maybe that's a SQL database, maybe that's a CSV file.

167
00:09:20,940 --> 00:09:24,330
该模型引用您的应用程序正在使用的数据。
The model refers to the data that your application is using.

168
00:09:24,330 --> 00:09:27,570
再一次，这些术语都没有引入
So again, none of these terms are introducing

169
00:09:27,570 --> 00:09:30,930
上周或前几周我们无法完成的事情。
things we couldn't have done last week or in weeks prior.

170
00:09:30,929 --> 00:09:34,889
我们通过引入MVC作为首字母缩写词或设计模式来做的所有事情
All we're doing by introducing MVC as an acronym or a design pattern

171
00:09:34,889 --> 00:09:38,759
只是在Flask的方法上打上标签，
is just to slap a label on the approach that Flask,

172
00:09:38,759 --> 00:09:40,709
反过来，许多程序员，无论您是
and in turn many programmers, whether you're

173
00:09:40,710 --> 00:09:44,850
在设计基于Web的应用程序时使用Python或其他语言。
using Python or other languages used when designing web based applications.

174
00:09:44,850 --> 00:09:48,210
有其他选择，但这是最受欢迎的选择之一，也许
There are alternatives but this is among the most popular and perhaps

175
00:09:48,210 --> 00:09:49,350
最简单的。
among the simplest.

176
00:09:49,350 --> 00:09:51,360
就像我们用任何一种语言所做的一样，
So much like we've done with any language,

177
00:09:51,360 --> 00:09:53,550
让我们看一下最简单的网络
let's take a look at the simplest possible web

178
00:09:53,549 --> 00:09:57,929
您可以使用此库或称为Flask的框架编写的应用程序。
application you might write using this library or framework called Flask.

179
00:09:57,929 --> 00:10:01,829
事实证明，如果您填充一个名为application dot py的文件
It turns out if you fill a file called application dot py

180
00:10:01,830 --> 00:10:06,697
使用这些代码行，您刚刚制作了第一个Web应用程序。
with these lines of code, you have just made your very first web application.

181
00:10:06,697 --> 00:10:09,030
正如我们将要看到的，现在它并不会引起太多兴趣，
Now it's not going to do much of interest, as we'll see,

182
00:10:09,029 --> 00:10:12,719
但这几乎是您需要的最少代码量
but this is the minimal amount of code pretty much that you need in order

183
00:10:12,720 --> 00:10:16,470
编写一个Web应用程序，该程序是您一旦开始
to write a web application that is a program that once you start

184
00:10:16,470 --> 00:10:20,400
它只会不断地听着，听着，听着
it is going to just be constantly listening and listening and listening

185
00:10:20,399 --> 00:10:26,309
用于使80或443端口上的TCP请求从人们的浏览器中传入，
for TCP requests on port 80 or 443 to come in from people's browsers,

186
00:10:26,309 --> 00:10:27,449
包括您自己的。
your own included.

187
00:10:27,450 --> 00:10:30,870
然后你就可以写
And then now you have the ability to write

188
00:10:30,870 --> 00:10:33,760
响应这些用户的代码。
code that responds to those users.

189
00:10:33,759 --> 00:10:34,927
那我是什么意思呢？
So what do I mean by this?

190
00:10:34,927 --> 00:10:36,719
好吧，让我们继续前进，看看实际效果
Well, let's go ahead and see this in action

191
00:10:36,720 --> 00:10:39,990
并开始编写一些我们自己的第一个程序。
and start writing some of our own very first programs.

192
00:10:39,990 --> 00:10:43,230
我将切换到CS50 IDE，我们将在这里继续使用。
I'm going to switch over to CS50 IDE, which we'll continue using here.

193
00:10:43,230 --> 00:10:45,460
我不会再运行http-server了。
I'm not going to run http-server anymore.

194
00:10:45,460 --> 00:10:48,850
相反，我们将使用Flask代替该服务器。
Instead we're going to use Flask which will take the place of that server.

195
00:10:48,850 --> 00:10:52,190
我将继续，让我们首先创建一个非常简单的文件。
And I'm going to go ahead and let's create a very simple file first.

196
00:10:52,190 --> 00:10:54,507
我要继续，实际上，让我们这样做。
I'm going to go ahead and, actually let's do this.

197
00:10:54,506 --> 00:10:56,089
我将首先创建一个目录。
I'm going to first create a directory.

198
00:10:56,090 --> 00:10:58,120
因此，我将创建一个名为Hello的目录，
So I'm going to create a directory called Hello,

199
00:10:58,120 --> 00:10:59,750
然后我将进入cd。
and I'm going to cd into Hello.

200
00:10:59,750 --> 00:11:01,750
和往常一样，如果您打开文件浏览器
And as always, if you open your file browser

201
00:11:01,750 --> 00:11:04,569
您会在左上角看到相同的内容，但总的来说，
you'll see the same thing at top left, but in general I'll

202
00:11:04,570 --> 00:11:05,860
专注于命令行。
focus on the command line.

203
00:11:05,860 --> 00:11:09,550
现在，我在Hello目录中，让我继续创建文件。
And now that I'm in the Hello directory, let me go ahead and create a file.

204
00:11:09,549 --> 00:11:13,374
我将其保存在Hello中，糟糕，我将其保存在Hello中。
And I'll save this in Hello, whoops, I'll save this in Hello.

205
00:11:15,940 --> 00:11:20,050
让我继续打这个电话，比如说，
And let me go ahead and call this, let's say,

206
00:11:20,049 --> 00:11:24,399
应用程序点py，然后再次将其保存在Hello目录中。
application dot py, and again, saving it in the Hello directory.

207
00:11:24,399 --> 00:11:27,529
好的，如果我输入ls，我会在那里看到它，并且它目前是空的。
All right if I type ls, I'll see it there and it's currently empty.

208
00:11:27,529 --> 00:11:30,909
因此，让我继续一下，几乎复制了刚才的部分代码。
So let me go ahead and pretty much copy some of that code from a moment ago.

209
00:11:30,909 --> 00:11:34,269
让我继续，从Flask库中导入一些内容
Let me go ahead and from the Flask library import something

210
00:11:34,269 --> 00:11:37,929
在这种情况下，称为Flask（大写F），这只是他们的约定。
called Flask, capital F in this case, which is just their convention.

211
00:11:37,929 --> 00:11:43,389
让我继续并导入一个称为render的东西。
And let me go ahead and also import something called render.

212
00:11:43,389 --> 00:11:45,109
实际上，我们什至不这样做。
Actually let's not even do that yet.

213
00:11:45,110 --> 00:11:46,960
首先让我们保持这种简约。
Let's keep this minimalist at first.

214
00:11:46,960 --> 00:11:51,250
为了将此文件转换为成熟的Flask应用程序，
In order to turn this file into a full-fledged Flask application that

215
00:11:51,250 --> 00:11:54,370
是我自己的服务器，我将继续定义一个名为
is my own server, I'm going to go ahead and define a variable called

216
00:11:54,370 --> 00:11:55,840
按惯例的应用程序。
app by convention.

217
00:11:55,840 --> 00:11:58,180
我要调用这个Flask函数，
I'm going to call this Flask function, and I'm

218
00:11:58,179 --> 00:12:01,179
有点奇怪的是要使用下划线，下划线，名称，
a little weirdly going to pass an underscore, underscore, name,

219
00:12:01,179 --> 00:12:02,499
下划线，下划线。
underscore, underscore.

220
00:12:02,500 --> 00:12:05,709
现在，我们仅过去一次看到过该特殊变量。
Now we've only seen that special variable once in the past.

221
00:12:05,710 --> 00:12:08,410
回想一下，当我说，嗯，您应该
And that, recall, was when I said, well, you should either

222
00:12:08,409 --> 00:12:12,309
在Python文件底部调用main来调用您的main函数，
call main at the bottom of your Python file to call your main function,

223
00:12:12,309 --> 00:12:15,699
或者您可以在您所说的话中做这件令人讨厌的事情，如果名字相等，
or you can do this annoying thing where you say, if name equals,

224
00:12:15,700 --> 00:12:17,800
等于main然后调用main。
equals main then call main.

225
00:12:17,799 --> 00:12:22,179
因此，无论我们过去为什么使用此特殊变量，
So no matter why we used that in the past, this special variable,

226
00:12:22,179 --> 00:12:25,359
下划线，下划线，名称，下划线，下划线
underscore, underscore, name, underscore, underscore essentially

227
00:12:25,360 --> 00:12:27,890
指当前文件的名称。
refers to the name of the current file.

228
00:12:27,889 --> 00:12:32,049
所以这行代码说，Flask，打开当前文件
So this is a line of code that says, Flask, turn the current file

229
00:12:32,049 --> 00:12:35,499
到一个应用程序中，即一个Web应用程序
into an application, that is a web application that

230
00:12:35,500 --> 00:12:37,419
将监听浏览器的请求。
will listen for browsers' requests.

231
00:12:37,419 --> 00:12:41,649
现在，在我的文件中，我必须告诉Flask我的路线是什么。
Now in my file I have to tell Flask what are my routes.

232
00:12:41,649 --> 00:12:43,809
路由就是一个URL。
A route is simply a URL.

233
00:12:43,809 --> 00:12:48,173
因此，斜杠或斜杠索引点HTML或斜杠
So slash, or slash index dot HTML, or slash

234
00:12:48,173 --> 00:12:52,869
搜索或您今天在网址中看到的其他任意数量的路径
search, or any number of other paths that you see in today's URLs

235
00:12:52,870 --> 00:12:53,680
在网站上。
on websites.

236
00:12:53,679 --> 00:12:57,809
为了在Flask中做到这一点，我说了应用程序点路由，引用了反引号斜杠。
And to do this in Flask I say app dot route, quote unquote slash.

237
00:12:57,809 --> 00:13:00,969
现在，这是我们之前在Python中从未见过的东西，
Now, this is something we've not seen in Python before,

238
00:13:00,970 --> 00:13:02,620
但这实际上是Python功能。
but this is actually a Python feature.

239
00:13:02,620 --> 00:13:05,740
每当您在这样的函数开头看到at符号时，
Any time you see an at sign at the beginning of a function like this,

240
00:13:05,740 --> 00:13:07,600
这就是所谓的Python装饰器。
it's what's called a Python decorator.

241
00:13:07,600 --> 00:13:11,500
对于我们今天的目的，这只是一种特殊的方式
And for our purposes today, this is just a special way

242
00:13:11,500 --> 00:13:14,020
将一种功能应用于另一种功能。
of applying one function to another.

243
00:13:14,019 --> 00:13:16,089
但是，让我暂时将其留在那
But let me leave it at that for now and just

244
00:13:16,090 --> 00:13:19,420
说使用Flask的习惯是，一开始你
say that the convention when using Flask is that at first you

245
00:13:19,419 --> 00:13:22,459
定义您的路线，例如斜线默认路线，
define your route like your slash default route,

246
00:13:22,460 --> 00:13:23,780
然后定义一个函数。
then you define a function.

247
00:13:23,779 --> 00:13:25,869
您可以随意调用该函数，
And the function can be called whatever you want,

248
00:13:25,870 --> 00:13:27,820
但按照惯例，您应该打电话给
but by convention you should probably call

249
00:13:27,820 --> 00:13:31,720
它适合所讨论的实际路线。
it something appropriate for the actual route in question.

250
00:13:31,720 --> 00:13:34,330
同样，人们倾向于将默认路由称为索引。
And again, humans tend to call the default route your index.

251
00:13:34,330 --> 00:13:36,580
因此，我将继续调用该函数索引。
So I'm going to go ahead and call this function index.

252
00:13:36,580 --> 00:13:40,780
接下来，让我继续做一些愚蠢的事情，例如“ Hello，world，
And below that, let me just go ahead and do something silly like Hello, world,

253
00:13:40,779 --> 00:13:43,059
从字面上返回该字符串。
literally returning that string.

254
00:13:43,059 --> 00:13:46,989
接下来，让我们继续看看这里到底发生了什么。
And let's go ahead and see what exactly happens here after doing that.

255
00:13:46,990 --> 00:13:50,650
现在，如果我输入ls，请继续进入我的Hello目录中，
Let me go ahead now and in my Hello directory if I type ls,

256
00:13:50,649 --> 00:13:53,919
再次注意，我只有一个文件，应用程序点py。
notice that again, I only have one file, application dot py.

257
00:13:53,919 --> 00:13:57,369
为了启动我的服务器，因为它是Flask应用程序，
In order to start my server today, because it's a Flask application,

258
00:13:57,370 --> 00:14:00,370
我不想使用http服务器，而是
I do not want to use http-server, I instead

259
00:14:00,370 --> 00:14:02,440
要运行命令Flask run。
want to run the command Flask run.

260
00:14:02,440 --> 00:14:04,390
所以Flask是一个图书馆。
So Flask is, yes, a library.

261
00:14:04,389 --> 00:14:06,909
但安装时它也附带一个程序
But it also comes with a program when you install it

262
00:14:06,909 --> 00:14:11,869
在Mac或PC或IDE上也可以启动Flask应用程序。
on your Mac or PC or the IDE that lets you start a Flask application as well.

263
00:14:11,870 --> 00:14:13,850
您将在此处看到一些神秘的输出。
And you'll see some cryptic output here.

264
00:14:13,850 --> 00:14:16,960
但就像http-server一样，您会看到URL
But just like http-server, you'll see the URL

265
00:14:16,960 --> 00:14:19,130
当前正在运行的应用程序。
of your currently running application.

266
00:14:19,129 --> 00:14:23,499
如果我继续单击该URL并在另一个标签中打开它，瞧，
And if I go ahead and click this URL and open it in another tab, voila,

267
00:14:23,500 --> 00:14:27,250
我看到了我的第一个动态Web应用程序。
I see my very first dynamic web application.

268
00:14:27,250 --> 00:14:28,989
这只是打印Hello，世界。
It's only printing Hello, world.

269
00:14:28,990 --> 00:14:33,530
实际上，如果我使用Chrome的查看页面源功能，
And in fact, if I go to Chrome's view page source feature,

270
00:14:33,529 --> 00:14:35,739
请注意，它甚至不是完整的HTML。
notice that it's not even full-fledged HTML.

271
00:14:35,740 --> 00:14:38,050
这是字面上的文字，但这是因为我没有
It's literally text, but that's because I didn't

272
00:14:38,049 --> 00:14:41,709
麻烦返回任何实际的HTML了。
bother returning any actual HTML yet.

273
00:14:41,710 --> 00:14:42,880
因此，让我们做到这一点。
So let's do that.

274
00:14:42,879 --> 00:14:45,309
让我们实际上更正确地执行此操作，而不仅仅是返回
Let's actually do this more properly and not just return

275
00:14:45,309 --> 00:14:47,109
一些任意的文本字符串。
some arbitrary string of text.

276
00:14:47,110 --> 00:14:51,490
让我停止服务器，让我现在专注于此。
Let me stop the server and let me focus now on doing this.

277
00:14:51,490 --> 00:14:54,640
默认情况下，我声称的称为slash的路由
By default the route called slash I've claimed

278
00:14:54,639 --> 00:14:58,329
表示您应该返回一个称为索引点HTML的文件。
means that you should return a file called index dot HTML.

279
00:14:58,330 --> 00:15:00,530
好吧，让我们暂时假设它存在。
Well let's assume for the moment it exists.

280
00:15:00,529 --> 00:15:02,139
我该如何退货？
How do I go ahead and return it?

281
00:15:02,139 --> 00:15:04,029
从技术上讲，我将继续进行渲染
Technically I'm going to go ahead and render

282
00:15:04,029 --> 00:15:07,239
一个称为索引点HTML的模板。
a template called index dot HTML.

283
00:15:07,240 --> 00:15:09,700
为了使用此功能渲染模板，
And in order to use this function render template,

284
00:15:09,700 --> 00:15:13,370
我也需要从Flask库中导入它。
I need to import it from the Flask library as well.

285
00:15:13,370 --> 00:15:16,100
因此Flask再次是一个库，具有很多功能。
So Flask again is a library, comes with a lot of functions.

286
00:15:16,100 --> 00:15:18,080
其中第一个称为Flask本身。
The first one of which is called Flask itself.

287
00:15:18,080 --> 00:15:20,710
这就是将其激活为Web应用程序的原因。
That's what activates this as a web application.

288
00:15:20,710 --> 00:15:23,410
渲染模板是生活中的另一功能
Render template is another function whose purpose in life

289
00:15:23,409 --> 00:15:28,489
是要找到一个称为索引点HTML的文件，抓取其内容，
is to go find a file called index dot HTML, grab its contents,

290
00:15:28,490 --> 00:15:29,860
这样您就可以将其退回。
so that you can then return it.

291
00:15:29,860 --> 00:15:35,860
因此，它的精神类似于几周前在Python中使用open和read。
So it's similar in spirit to using open and read in Python a few weeks ago.

292
00:15:35,860 --> 00:15:38,470
但这也将为我们提供其他一些新颖的功能。
But it's going to give us some other fancy features as well.

293
00:15:38,470 --> 00:15:40,600
但是让我现在进入命令行，输入
But let me go now into my command line, type

294
00:15:40,600 --> 00:15:43,330
提醒我们，我们只有应用程序点py。
ls to remind us that we only have application dot py.

295
00:15:43,330 --> 00:15:46,330
我不想在同一目录中创建索引点HTML。
I don't want to create index dot HTML in the same directory.

296
00:15:46,330 --> 00:15:50,110
回想一下，烧瓶有一些组织上的建议
Flask, recall, has certain organizational recommendations

297
00:15:50,110 --> 00:15:54,040
像这样在这里我实际上应该放置索引点
like this here whereby I should actually put index dot

298
00:15:54,039 --> 00:15:59,509
HTML和我今天所有的HTML文件都在我的名为template的文件夹中。
HTML and all of my HTML files today onward in my folder called templates.

299
00:15:59,509 --> 00:16:00,289
因此，让我们做到这一点。
So let's do that.

300
00:16:00,289 --> 00:16:04,299
让我继续，使用make dir enter创建一个名为template的目录。
Let me go ahead and make a directory called templates with make dir enter.

301
00:16:04,299 --> 00:16:07,389
如果现在输入ls，您将看到我有一个模板目录。
If I type ls now you'll see that I have a templates directory.

302
00:16:07,389 --> 00:16:11,739
现在，让我继续创建一个称为索引点HTML的新实际文件。
Now let me go ahead and create a new actual file called index dot HTML.

303
00:16:11,740 --> 00:16:15,400
让我将其存储在模板，目录中，然后继续
Let me store that in my templates, directory and now let me go ahead

304
00:16:15,399 --> 00:16:17,289
和一些非常熟悉的东西。
and something pretty familiar.

305
00:16:17,289 --> 00:16:20,179
在这一点上，我们已经做了很多次，
We've done this many times at this point whereby we just

306
00:16:20,179 --> 00:16:22,109
弹出一个快速的HTML页面。
whip up a quick HTML page.

307
00:16:22,110 --> 00:16:24,740
我将在此处给出HTML的文档类型。
I'll give my doc type of HTML up here.

308
00:16:24,740 --> 00:16:26,360
让我有我的HTML标签。
Let me have my HTML tag.

309
00:16:26,360 --> 00:16:29,960
我的语言默认为英语。我在这里
My language will be English by default. Down here I'm

310
00:16:29,960 --> 00:16:31,580
将拥有我页面的头。
going to have the head of my page.

311
00:16:31,580 --> 00:16:33,640
在头里面，我将有一个标题。
Inside the head I'll have a title.

312
00:16:33,639 --> 00:16:34,879
我将其称为“ Hello”。
I'm going to call this Hello.

313
00:16:34,879 --> 00:16:36,349
在这里，我将拥有自己的身体。
Down here I'll have my body.

314
00:16:36,350 --> 00:16:40,340
在体内，我只想说你好，世界。
Inside the body I'm just going to say Hello, world instead.

315
00:16:40,340 --> 00:16:43,760
因此，从上周开始实际上仍然没有任何进展。
So still no progress really from last week.

316
00:16:43,759 --> 00:16:46,789
但是，现在让我回到应用程序点py，
But let me now go back to application dot py,

317
00:16:46,789 --> 00:16:50,899
提醒我们，我们刚刚返回了函数调用，
remind us that we've just now returned the function call,

318
00:16:50,899 --> 00:16:54,649
呈现索引点HTML的模板，再一次，此函数呈现模板，
render template of index dot HTML, and again, this function, render template,

319
00:16:54,649 --> 00:16:57,919
将要打开该文件，抓住其中的所有字节
is going to go open that file, grab all of the bytes inside of it

320
00:16:57,919 --> 00:17:00,449
并最终通过此行返回它们。
and return them ultimately via this line.

321
00:17:00,450 --> 00:17:03,950
所以现在让我继续并再次运行Flask，让我继续
So now let me go ahead and run Flask run again, let me go ahead

322
00:17:03,950 --> 00:17:07,730
并单击我的IDE的URL，瞧，同样的事情。
and click on my IDE's URL, voila, same thing.

323
00:17:07,730 --> 00:17:11,760
但是现在，如果我打开Chrome的查看源功能，
But now if I open up Chrome's view source feature,

324
00:17:11,759 --> 00:17:15,679
现在注意，我已经返回了完整的网页。
notice now that I've returned a full-fledged web page.

325
00:17:15,680 --> 00:17:18,170
再说一遍，从根本上讲并不是那么有趣
So again, not really fundamentally that interesting,

326
00:17:18,170 --> 00:17:23,030
但是我现在已经迈出了这一小步，以生成我想要的任何HTML。
but I've taken this baby step now toward generating any HTML that I want.

327
00:17:23,029 --> 00:17:24,529
因此，让我们变得更加有趣。
So let's make this more interesting.

328
00:17:24,529 --> 00:17:28,309
我一直声称，Web编程当然有这种方式
I've claimed all along that there is this way of course with web programming

329
00:17:28,309 --> 00:17:31,999
通过URL接受用户输入。
to take user input via the URL.

330
00:17:32,000 --> 00:17:33,689
那么我们如何去做呢？
So how can we go about doing that?

331
00:17:33,690 --> 00:17:35,810
好吧，我继续提出这个建议。
Well, me go ahead and propose this.

332
00:17:35,809 --> 00:17:39,619
让我继续在这里写另一行代码
Let me go ahead here and write an additional line of code

333
00:17:39,619 --> 00:17:41,389
做这样的事情。
that does something like this.

334
00:17:41,390 --> 00:17:45,770
让我声明一个名为的变量，实际上让我们这样做。
Let me declare a variable called, actually let's do this.

335
00:17:45,769 --> 00:17:51,199
渲染模板之后，事实证明您可以传入0个或多个命名参数。
After render template, it turns out you can pass in 0 or more named arguments.

336
00:17:51,200 --> 00:17:53,840
这些参数的名称完全取决于您，
And the names of these arguments are entirely up to you,

337
00:17:53,839 --> 00:17:55,309
到目前为止我们还没有看到。
and we haven't seen that thus far.

338
00:17:55,309 --> 00:17:58,129
到目前为止，任何时候我们使用别人的功能，
Thus far in the past, any time we've used someone else's function,

339
00:17:58,130 --> 00:18:00,422
您必须检查文档或讲义
you had to check the documentation or the lecture notes

340
00:18:00,422 --> 00:18:02,840
弄清楚你有哪些可用的参数
to figure out what were the available arguments you

341
00:18:02,839 --> 00:18:04,341
可以传递给此功能。
could pass into this function.

342
00:18:04,342 --> 00:18:06,050
但这与渲染模板不同。
But that's not true with render template.

343
00:18:06,049 --> 00:18:07,379
功能更强大。
It's a little more powerful.

344
00:18:07,380 --> 00:18:13,370
因此，如果我想从我的应用程序点py文件中传递用户名，
So if I want to pass a user's name from my application dot py file,

345
00:18:13,369 --> 00:18:16,019
回想一下，我们将开始调用我的控制器，
which, recall we're going to start calling my controller,

346
00:18:16,019 --> 00:18:18,229
我可以说，给我一个名为name的变量。
I can say, give me a variable called name.

347
00:18:18,230 --> 00:18:21,200
我希望这个人的名字的价值是什么？
What do I want the value of this person's name to be?

348
00:18:21,200 --> 00:18:24,920
好吧，我真正希望它是等效的
Well really what I want it to be is the equivalent

349
00:18:24,920 --> 00:18:27,380
问号后面有什么，对不对？
of whatever is after that question mark, right?

350
00:18:27,380 --> 00:18:31,340
从根本上说，从URL获取用户输入的唯一方法是，
The only way, fundamentally, to get user input from a URL, we've seen,

351
00:18:31,339 --> 00:18:32,989
问号后面是什么。
is whatever is after the question mark.

352
00:18:32,990 --> 00:18:35,150
而且我不想要q，我不想要猫，
And I don't want q, and I don't want cats,

353
00:18:35,150 --> 00:18:38,930
我要姓名等于David或姓名等于Brian。
I want name equals David or name equals Brian.

354
00:18:38,930 --> 00:18:40,320
那我该怎么办呢？
So how can I do that?

355
00:18:40,319 --> 00:18:43,249
好吧，让我继续说一下：名字等于
Well, let me go ahead and say this: name equals

356
00:18:43,250 --> 00:18:48,320
请求点args点get，引用不带引号的名称，
request dot args dot get, quote unquote name,

357
00:18:48,319 --> 00:18:52,049
并让我另外在该文件的顶部添加请求。
and let me Additionally add request to the top of this file.

358
00:18:52,049 --> 00:18:53,119
那我在做什么呢？
So what am I doing?

359
00:18:53,119 --> 00:18:58,039
当我从Flask库中导入其他请求变量时，
When I import this other request variable from the Flask library,

360
00:18:58,039 --> 00:19:03,919
这使我可以访问HTTP请求及其任何参数
this gives me access to the HTTP request and with it any parameters

361
00:19:03,920 --> 00:19:06,020
可能已经在URL中了。
that might have been in the URL.

362
00:19:06,019 --> 00:19:09,199
Flask为我做的是解析该URL。
And what Flask does for me is it parses that URL.

363
00:19:09,200 --> 00:19:12,530
它计算出q是什么，猫是什么，名字是什么，大卫是什么。
It figures out what is q, what is cats, what is name, what is David.

364
00:19:12,529 --> 00:19:16,189
问号后面有什么，Flask会为我解析
Whatever is after the question mark, Flask parses it for me

365
00:19:16,190 --> 00:19:19,940
并将其作为变量返回给我，我就可以访问这些变量
and hands it back to me as variables, and I can get access to those variables

366
00:19:19,940 --> 00:19:22,910
通过调用请求点参数作为参数，
by calling request dot args for arguments,

367
00:19:22,910 --> 00:19:26,330
点get，然后是参数名称
dot get, and then the name of the parameter

368
00:19:26,329 --> 00:19:29,899
我想从URL获得。
that I want to get from the URL.

369
00:19:29,900 --> 00:19:35,750
现在，如果我保存此代码，让我回到索引点HTML，
So now if I save this, let me go back to index dot HTML,

370
00:19:35,750 --> 00:19:40,610
这就是为什么今天以后将此文件称为模板的原因。
and here is why this file today onward is now called a template.

371
00:19:40,609 --> 00:19:43,399
就像人类世界一样，
A template, just like in the human world,

372
00:19:43,400 --> 00:19:46,400
是一种框架，您可以在其中插入其他值。
is kind of a framework into which you can plug other values.

373
00:19:46,400 --> 00:19:48,530
它是一个模板，您可以根据自己的工作。
It's a template that you can base your own work on.

374
00:19:48,529 --> 00:19:51,269
就像可以作为建筑物基础的蓝图。
It's like a blueprint that you can base a building on.

375
00:19:51,269 --> 00:19:54,229
因此，模板通常具有特殊的语法
So templates typically have special syntax

376
00:19:54,230 --> 00:19:56,090
通过它您可以插入一些值。
via which you can plug in some values.

377
00:19:56,089 --> 00:19:59,929
而且恐怕语法与我们以前看到的相比还是有点新的，
And I'm afraid the syntax is slightly new versus past things we've seen,

378
00:19:59,930 --> 00:20:03,140
但是如果您使用两个大括号，就好像不是
but if you use two curly braces, as though one weren't

379
00:20:03,140 --> 00:20:08,090
在C和其他情况下足够糟糕，左右两个大括号，
bad enough in C and in other contexts, two curly braces, left and right,

380
00:20:08,089 --> 00:20:13,069
您可以告诉Flask的渲染模板函数插入
you can tell Flask's render template function to plug

381
00:20:13,069 --> 00:20:16,069
在右边，您可以看到的任何变量的值
in right there the value of any variable that you

382
00:20:16,069 --> 00:20:21,019
已作为函数中的这些参数之一传递到渲染模板中
have passed into render template as one of these arguments in the function

383
00:20:21,019 --> 00:20:22,049
称呼。
call.

384
00:20:22,049 --> 00:20:25,609
因此，现在让我继续并再次运行Flask run以重新启动Web服务器。
So let me go ahead now and run Flask run again to restart my web server.

385
00:20:25,609 --> 00:20:29,329
让我继续打开此URL，它现在看起来非常愚蠢。
Let me go ahead and open this URL, and it looks pretty stupid right now.

386
00:20:29,329 --> 00:20:30,529
您好，没有。
Hello, None.

387
00:20:30,529 --> 00:20:33,019
但是请记住，None在Python中是一个特殊的值。
But recall that None is a special value in Python.

388
00:20:33,019 --> 00:20:35,189
这意味着没有任何价值。
It means something has no value.

389
00:20:35,190 --> 00:20:36,960
所以你知道我能做什么？
So you know what I could do?

390
00:20:36,960 --> 00:20:42,176
原来，让我回到这里，如果我回到我的网址，
It turns out that, let me go back over here, if I go back to my URL,

391
00:20:42,175 --> 00:20:45,133
然后让我放大，以便您可以看到它，让我继续并添加一个斜线，
and let me zoom out so you can see it, let me go ahead and add a slash,

392
00:20:45,134 --> 00:20:49,130
问号，而不是q等于猫，因为现在已经无关紧要了，
question mark, and not q equals cats because that's irrelevant now,

393
00:20:49,130 --> 00:20:51,740
但是名字等于大卫。
but how about name equals David.

394
00:20:51,740 --> 00:20:52,940
让我放大一下。
And let me zoom in on that.

395
00:20:52,940 --> 00:20:56,630
我所添加的只是斜杠问号名称等于David。
All I've added is the slash question mark name equals David.

396
00:20:56,630 --> 00:20:59,660
让我继续并按Enter键，瞧，现在我
Let me go ahead and hit Enter, and voila, now I

397
00:20:59,660 --> 00:21:01,370
有一个网页，上面写着“ Hello David”。
have a web page that says Hello David.

398
00:21:01,369 --> 00:21:04,579
实际上，如果我查看页面源代码，请注意HTML
And indeed if I view my page source, notice the HTML

399
00:21:04,579 --> 00:21:06,199
已动态生成。
has been dynamically generated.

400
00:21:06,200 --> 00:21:09,650
我的IDE上没有文件说“你好逗号大卫”，
There is no file on my IDE that says Hello comma David,

401
00:21:09,650 --> 00:21:11,600
而是动态地插入了它。
rather it's been dynamically plugged in.

402
00:21:11,599 --> 00:21:12,829
并请注意，这可能会改变。
And notice this can change.

403
00:21:12,829 --> 00:21:15,829
如果我继续将名称更改为Brian，请输入，
If I go ahead and change the name to Brian, enter,

404
00:21:15,829 --> 00:21:18,469
他的页面发生了变化，当然，如果我现在查看页面源
his page changes, and of course if I view the page source now

405
00:21:18,470 --> 00:21:21,410
好像我有一个名为index dot HTML的文件
it's as though I had a file called index dot HTML

406
00:21:21,410 --> 00:21:23,300
字面上有布莱恩（Brian）的名字。
that literally had Brian's name in it.

407
00:21:23,299 --> 00:21:27,559
但是不，我的模板中只有那个占位符。
But no, there's just that placeholder within my template instead.

408
00:21:27,559 --> 00:21:28,669
我可以清理这个。
And I can clean this up.

409
00:21:28,670 --> 00:21:32,000
请注意，如果没有名称价值，这看起来很愚蠢，
Notice it looked pretty stupid if there was no value for name,

410
00:21:32,000 --> 00:21:34,419
但结果是请求点args，点
but it turns out the request dot args, dot

411
00:21:34,420 --> 00:21:37,430
get函数采用第二个可选参数。
get function takes a second optional argument.

412
00:21:37,430 --> 00:21:40,220
如果我不知道是否有价值
If I don't know if there's going to be of value

413
00:21:40,220 --> 00:21:42,200
我想给它一个默认参数，
and I want to give it a default argument,

414
00:21:42,200 --> 00:21:46,800
我对get函数的第二个参数实际上可以是默认值。
my second argument to the get function can actually be the default value.

415
00:21:46,799 --> 00:21:50,389
因此，如果我现在继续进行，让我继续进行，请重新运行Flask。
So if I go ahead now, and let me go ahead rerun Flask.

416
00:21:50,390 --> 00:21:53,690
现在让我继续操作，并在不使用name参数的情况下重新加载。
And let me go ahead now and reload with no name argument.

417
00:21:53,690 --> 00:21:57,500
现在您看到Hello逗号世界的默认值，但是如果我回到那里
Now you see a default value of Hello comma world, but if I go back up there

418
00:21:57,500 --> 00:22:00,680
并重新输入我的名字，现在不需要默认名称了。
and put my name back in, now it doesn't need the default.

419
00:22:00,680 --> 00:22:04,680
我看到了人类实际输入的内容。
I see what the human actually typed in.

420
00:22:04,680 --> 00:22:06,800
那么，这里发生的事情，好吧，如果您考虑
So what's going on here, well, if you consider

421
00:22:06,799 --> 00:22:10,729
当您输入cats并按Enter键时，google.com在做什么？
what google.com is doing when you type in cats and hit Enter,

422
00:22:10,730 --> 00:22:15,140
该网址中的q等于猫这个词被传递给google.com，
that word q equals cats is being passed to google.com in the URL,

423
00:22:15,140 --> 00:22:18,440
Google正在运行某些程序，也许是带有Flask的Python，
Google is running some program, maybe it's Python with Flask,

424
00:22:18,440 --> 00:22:21,230
可能是其他某种语言正在分析网址，
maybe it's some other language that's analyzing the URL,

425
00:22:21,230 --> 00:22:25,040
抓住q等于猫，然后他们实质上是在搜索数据库
grabbing q equals cats, and then they're searching their database essentially

426
00:22:25,039 --> 00:22:28,279
为猫的关键字，然后它们是动态的
for a keyword of cats, and then they're dynamically

427
00:22:28,279 --> 00:22:31,699
生成显示所有这些图片并进行搜索的HTML
generating the HTML that shows you all of those pictures and search

428
00:22:31,700 --> 00:22:33,260
猫的结果。
results of cats.

429
00:22:33,259 --> 00:22:37,039
没有网页，Google服务器上没有HTML文件
There is no web page, there's no HTML file on Google servers

430
00:22:37,039 --> 00:22:39,199
经常有大量的猫。
that constantly has a big list of cats.

431
00:22:39,200 --> 00:22:41,780
就像肯定没有人维护一个非常大的HTML
Like there's certainly no human maintaining a really big HTML

432
00:22:41,779 --> 00:22:45,409
文件整天都充满了图像标签和猫。
file just filled with image tags and cats all day long.

433
00:22:45,410 --> 00:22:47,600
可以说这都是动态生成的。
Suffice it to say that's all dynamically generated.

434
00:22:47,599 --> 00:22:50,329
即使有了这个简单的例子，我们现在也可以看到
And even with this trivial example, we see now

435
00:22:50,329 --> 00:22:54,619
也许我们正在抓紧这种能力的表面。
perhaps that we're scratching the surface of that very capability.

436
00:22:54,619 --> 00:23:01,189
好吧，让我在这里暂停，看看是否有任何疑问或困惑，
All right, let me pause here and see if there are any questions or confusion,

437
00:23:01,190 --> 00:23:04,070
因为任何框架都可以同时完成很多工作
because it's a lot all at once given that with any framework

438
00:23:04,069 --> 00:23:06,319
您通常必须先学习约定
you typically have to learn the conventions first

439
00:23:06,319 --> 00:23:08,689
然后您就可以开始工作了。
and then you can start to be productive.

440
00:23:08,690 --> 00:23:11,930
布莱恩：是的，所以在您调用渲染模板函数时，
BRIAN: Yeah, so in your, when you called the render template function,

441
00:23:11,930 --> 00:23:16,100
有人问为什么您不需要在模板中说斜杠索引点HTML，
someone asked why don't you need to say it's in templates slash index dot HTML,

442
00:23:16,099 --> 00:23:18,199
为什么只说索引点HTML？
and why did you just say index dot HTML?

443
00:23:18,200 --> 00:23:18,900
DAVID J. MALAN：好问题。
DAVID J. MALAN: Good question.

444
00:23:18,900 --> 00:23:20,733
这是“仅因为”答案之一。
This is one of those "just because" answers.

445
00:23:20,732 --> 00:23:24,349
渲染模板功能已经以这种方式实现
The render template function has been implemented in such a way

446
00:23:24,349 --> 00:23:27,769
它假定您的文件位于模板目录中。
that it assumes that your files are in the templates directory.

447
00:23:27,769 --> 00:23:30,649
从技术上讲，您可以通过重新配置应用程序来覆盖该设置，
You can technically override that by reconfiguring the application,

448
00:23:30,650 --> 00:23:32,480
但是默认的，实际上是约定
but the default and indeed the convention

449
00:23:32,480 --> 00:23:35,060
就是将这些文件放在模板中。
is to just put those files in templates.

450
00:23:35,059 --> 00:23:36,169
好问题。
Good question.

451
00:23:36,170 --> 00:23:37,220
圣地亚哥？
Santiago?

452
00:23:37,220 --> 00:23:41,630
圣地亚哥：为什么当您声明应用程序，应用程序点路线，
SANTIAGO: Why when you declare the app, app dot route,

453
00:23:41,630 --> 00:23:45,253
您必须将正斜杠作为对此的论点吗？
you have to include the forward slash as an argument to that?

454
00:23:45,252 --> 00:23:48,169
DAVID J. MALAN：是的，那为什么还要加上正斜杠？
DAVID J. MALAN: Yeah, so why do you have to include the forward slash?

455
00:23:48,170 --> 00:23:52,220
在Flask中，这就是告诉Flask使用的方式
That is the way, in Flask, of telling Flask, use

456
00:23:52,220 --> 00:23:54,590
此路线的以下功能。
the following function for this route.

457
00:23:54,589 --> 00:23:59,702
而斜线也许是最简单，当然也是最基本的路线
And slash is perhaps the simplest, certainly most basic route

458
00:23:59,702 --> 00:24:00,619
您可以定义。
that you could define.

459
00:24:00,619 --> 00:24:02,569
有点没有其他字眼了。
It's sort of the absence of any other words.

460
00:24:02,569 --> 00:24:05,629
因此，您必须在其中加斜杠，否则服务器将不会
So you have to put slash there because otherwise the server won't

461
00:24:05,630 --> 00:24:11,390
知道如果您访问点com，斜杠之类的东西，仅此而已。
know what to do if you visit something dot com, slash, and that's it.

462
00:24:11,390 --> 00:24:12,488
我们可以更改此通知。
We can change this notice.

463
00:24:12,488 --> 00:24:14,030
我可以将其更改为我想要的任何内容。
I can change this to anything I want.

464
00:24:14,029 --> 00:24:18,169
让我停止我的服务器，然后将其更改为斜杠，好像我在
Let me stop my server, and let me change this to slash secret, as though I'm

465
00:24:18,170 --> 00:24:20,540
在我的网站上创建一个秘密URL。
creating a secret URL on my website.

466
00:24:20,539 --> 00:24:22,759
让我继续并重新运行Flask run。
Let me go ahead and rerun Flask run.

467
00:24:22,759 --> 00:24:25,469
让我打开此URL，然后注意会发生什么。
Let me open up this URL, and notice what happens.

468
00:24:25,470 --> 00:24:26,570
什么都没发生。
Nothing happens.

469
00:24:26,569 --> 00:24:29,509
找不到，我访问斜线时为404。
Not found, 404 when I visit slash.

470
00:24:29,509 --> 00:24:31,159
Chrome只是令人讨厌。
And Chrome is just being annoying.

471
00:24:31,160 --> 00:24:34,010
如今，为了简单起见，它一直隐藏着斜线，
It's hiding the slash just for simplicity these days,

472
00:24:34,009 --> 00:24:37,009
但即使您没有将其视为人类，也可以使用斜线。
but the slash is there even though you're not seeing it as the human.

473
00:24:37,009 --> 00:24:42,379
但是，如果我更改此设置并转为斜杠秘密，那么我们将再次看到该页面。
But if I change this and go to slash secret, then we see that page again.

474
00:24:42,380 --> 00:24:46,430
因此，该应用程序仅在应用程序点路由处起作用
So that app at app dot route function just

475
00:24:46,430 --> 00:24:52,513
让您定义应该与以下功能关联的路线。
lets you define what route should be associated with the following function.

476
00:24:52,512 --> 00:24:53,179
还有其他问题吗？
Other questions?

477
00:24:53,180 --> 00:24:55,160
是的，交给索菲娅。
Yeah, over to Sophia.

478
00:24:55,160 --> 00:24:58,070
SOPHIA：模型，它现在是HTML文件的一部分吗？
SOPHIA: The model, is it a part of the HTML file now?

479
00:24:58,069 --> 00:25:02,217
就像名字一样，我想是数据，它是用HTML文件编码的吗？
Like the name, I guess as the data, is it encoded with an HTML file?

480
00:25:02,218 --> 00:25:04,010
DAVID J. MALAN：是的，目前我想
DAVID J. MALAN: Yeah, at the moment I would

481
00:25:04,009 --> 00:25:05,929
认为我们还没有真正的模型。
argue we don't really have a model yet.

482
00:25:05,930 --> 00:25:07,980
就像没有数据库一样，没有CSV文件，
Like there's no database, there's no CSV file,

483
00:25:07,980 --> 00:25:11,630
所以现在我们只在使用C（控制器）和V（视图）视图。
so right now we're just playing with C, controller and V, view.

484
00:25:11,630 --> 00:25:12,908
那完全没问题。
And that's totally fine.

485
00:25:12,907 --> 00:25:15,949
只有当我们拥有成熟的应用程序，就像我们今天很快将要使用的那样
It's only when we have a full-fledged application like we soon will today

486
00:25:15,950 --> 00:25:18,120
M确实发挥了作用。
that really the M comes into play.

487
00:25:18,119 --> 00:25:20,729
但是，这又是一种合理的人可能会不同意的观点。
But again, this is sort of, reasonable people might disagree.

488
00:25:20,730 --> 00:25:23,780
它们只是约定，不是硬性规定。
They're just conventions, they're not hard, fast rules.

489
00:25:23,779 --> 00:25:27,469
好吧，这有点愚蠢，为了
All right, so this is a little silly, that in order

490
00:25:27,470 --> 00:25:31,130
要被我的网站打招呼，您必须有足够的资金
to be greeted by my website you have to have the wherewithal

491
00:25:31,130 --> 00:25:35,510
知道您必须在URL栏中键入自己的名字，对吗？
to know that you have to type your own name into the URL bar, right?

492
00:25:35,509 --> 00:25:36,449
没有人这样做。
No one does that.

493
00:25:36,450 --> 00:25:38,930
但这不是网络通常的工作方式。
That's just not how the web typically works.

494
00:25:38,930 --> 00:25:41,760
相反，我们发现自己是人类填写表格。
We instead find ourselves as humans filling out forms.

495
00:25:41,759 --> 00:25:45,259
因此，让我们更进一步，以这种方式进行实际改进
So let's take this one step further and actually improve things in such a way

496
00:25:45,259 --> 00:25:47,759
我们实际上有一个表格。
that we actually have a form instead.

497
00:25:47,759 --> 00:25:49,199
因此，让我继续执行此操作。
So let me go ahead and do this.

498
00:25:49,200 --> 00:25:52,443
我将继续创建另一个文件。
I'm going to go ahead and create another file.

499
00:25:52,442 --> 00:25:53,609
让我继续执行此操作。
Let me go ahead and do this.

500
00:25:53,609 --> 00:25:56,779
让我进入我当前所在的模板目录
Let me go into my templates directory where I currently

501
00:25:56,779 --> 00:26:00,199
只有索引点HTML，让我复制这个文件，
only have index dot HTML, and let me just copy this file,

502
00:26:00,200 --> 00:26:04,400
索引点HTML，现在又称为问候点HTML。
index dot HTML, into another one right now called greet dot HTML.

503
00:26:04,400 --> 00:26:08,690
就是说，我想要我的问候文件，最终，让我继续
And that is to say I want my greet file, ultimately, let me go ahead

504
00:26:08,690 --> 00:26:12,020
并在我的编辑器中打开它，最后打招呼
and open this in my editor, greet ultimately

505
00:26:12,019 --> 00:26:14,969
将要完成索引之前的工作。
is going to do the job that index was a moment ago.

506
00:26:14,970 --> 00:26:16,880
我将改变索引的行为
And I'm going to change the behavior of index

507
00:26:16,880 --> 00:26:19,500
点HTML即可具有实际形式。
dot HTML to instead have an actual form.

508
00:26:19,500 --> 00:26:21,500
所以我要继续删除它，我
So I'm going to go ahead and delete this and I'm

509
00:26:21,500 --> 00:26:24,560
要做一个形式动作等于一条路线
going to do a form action equals, a route

510
00:26:24,559 --> 00:26:27,979
叫做slash greet，尚不存在，但我很快就会下注。
called slash greet, which doesn't exist yet, but I wager it soon will.

511
00:26:27,980 --> 00:26:31,160
我将先使用get，然后在此表单中使用
I'll use get initially, and then inside of this form

512
00:26:31,160 --> 00:26:35,420
让我继续，给我自己输入一个名称，该名称实际上是
let me go ahead and give myself an input whose name is going to be literally

513
00:26:35,420 --> 00:26:37,190
名字，因为我想要人类的名字。
name, because I want the human's name.

514
00:26:37,190 --> 00:26:40,430
因此，红色名称是标签的名称。
So the red name is the tag's name.

515
00:26:40,430 --> 00:26:44,870
此刻以绿色表示的名字是相关人员的名字，
Name in green at the moment is the name of the human in question,

516
00:26:44,869 --> 00:26:46,729
虽然有点混乱。
although a little confusingly.

517
00:26:46,730 --> 00:26:50,270
然后让我继续说这个字段的类型将是文本。
And then let me go ahead and say the type of this field will be text.

518
00:26:50,269 --> 00:26:53,849
然后让我继续给自己输入类型，等于提交，
And then let me go ahead and give myself an input type, equals submit,

519
00:26:53,849 --> 00:26:57,559
所以我有一个提交按钮，它的价值
so I have a submit button, and the value of that

520
00:26:57,559 --> 00:26:59,059
将是默认值。
will be whatever the default is.

521
00:26:59,059 --> 00:27:02,239
现在让我回到应用程序点py，
So now let me go back to application dot py,

522
00:27:02,240 --> 00:27:04,400
让我回到我的Hello目录。
let me go back to my Hello directory.

523
00:27:04,400 --> 00:27:07,220
确保您不在模板目录中运行Flask run。
Make sure you don't run Flask run in your templates directory.

524
00:27:07,220 --> 00:27:11,750
确保只在应用程序点py文件所在的位置运行它。
Make sure you only ever run it where the application dot py file is.

525
00:27:11,750 --> 00:27:13,659
让我运行这个文件。
Let me run this file.

526
00:27:13,660 --> 00:27:16,130
让我继续打开它，瞧。
Let me go ahead and open it now, and voila.

527
00:27:16,130 --> 00:27:19,490
我的斜线路线，默认路线通知，
My slash route, the default route notice,

528
00:27:19,490 --> 00:27:21,930
已更改为此HTML表单。
has changed to be this HTML form.

529
00:27:21,930 --> 00:27:25,088
而且，如果我查看Chrome中的视图源，
And if I look at the view source of that in Chrome,

530
00:27:25,087 --> 00:27:26,629
您会确切地看到我刚刚输入的内容。
you'll see exactly what I just typed.

531
00:27:26,630 --> 00:27:28,380
因此，表单没有任何动态。
So there's nothing dynamic about the form.

532
00:27:28,380 --> 00:27:29,540
这确实是硬编码的。
That is indeed hard coded.

533
00:27:29,539 --> 00:27:31,169
那里没有占位符。
There's no placeholders there.

534
00:27:31,170 --> 00:27:34,040
但是请注意，此表格是我事先设计的，
But notice that this form has been designed in advance by me to go

535
00:27:34,039 --> 00:27:36,979
使用get进入斜线欢迎路线。
to the slash greet route using get.

536
00:27:36,980 --> 00:27:38,360
那么我该如何实现呢？
Well how do I implement that?

537
00:27:38,359 --> 00:27:40,549
好吧，让我真正进入我的应用程序
Well let me actually go into my application

538
00:27:40,549 --> 00:27:44,269
现在，因为您会注意到我是否键入我的名字David，然后单击Submit，
now, because you'll notice if I type in my name, David, and click Submit,

539
00:27:44,269 --> 00:27:45,139
未找到。
not found.

540
00:27:45,140 --> 00:27:48,470
因为请注意，斜杠打招呼不存在。
Because notice that slash greet does not exist.

541
00:27:48,470 --> 00:27:51,270
那不是我的应用程序中定义的路由。
That is not a defined route in my application.

542
00:27:51,269 --> 00:27:56,419
因此，让我回到服务器，再继续下面的操作，
So let me go back to my server, and let me go ahead down below,

543
00:27:56,420 --> 00:27:57,920
让我们做类似的事情。
and let's just do something similar.

544
00:27:57,920 --> 00:28:01,260
应用程式点路线，引用不加引号，斜线表示欢迎。
App dot route, quote unquote, slash greet.

545
00:28:01,259 --> 00:28:02,926
因此，让我们给自己第二条路。
So let's give myself a second route.

546
00:28:02,926 --> 00:28:04,759
让我继续定义功能
Let me go ahead and define the function that

547
00:28:04,759 --> 00:28:07,039
用户访问斜线时打招呼。
should be called when a user visits slash greet.

548
00:28:07,039 --> 00:28:10,129
再说一次，您可以随心所欲地调用它，但让我们保持自己，
And again, you can call it anything you want, but let's keep ourselves,

549
00:28:10,130 --> 00:28:12,530
让我们保持简单，就称它为同一个东西
let's keep things simple and just call it the same thing

550
00:28:12,529 --> 00:28:14,989
作为路线，尽管这不是必须的。
as the route, though again, that's not a requirement.

551
00:28:14,990 --> 00:28:17,570
然后在我的问候功能中，我想做什么？
And then in my greet function, well what do I want to do?

552
00:28:17,569 --> 00:28:20,549
让我继续说，返回“要做的事”。
Let me go ahead and say, return "to do."

553
00:28:20,549 --> 00:28:21,779
我还没做
I haven't done it yet.

554
00:28:21,779 --> 00:28:24,499
但是同样，像在C和Python中一样，采取一些小步骤，
But again, as in C and in Python, take baby steps,

555
00:28:24,500 --> 00:28:27,680
并确保到目前为止，您的代码基础仍然有效。
and just make sure the basics of your code are working so far.

556
00:28:27,680 --> 00:28:29,750
让我重新运行Flask运行。
Let me rerun Flask run.

557
00:28:29,750 --> 00:28:31,639
让我打开我的URL。
Let me open my URL.

558
00:28:31,640 --> 00:28:33,980
现在让我尝试再次填写此表格。
And now let me try filling out this same form again.

559
00:28:33,980 --> 00:28:36,897
实际上，我有点烦恼自动完成功能弹出了，
And actually I'm a little annoyed that the autocomplete is popping up,

560
00:28:36,896 --> 00:28:38,249
但我们可以稍后将其关闭。
but we can turn that off later.

561
00:28:38,250 --> 00:28:40,729
让我继续，单击“提交”，然后瞧瞧。
Let me go ahead and click Submit, and voila.

562
00:28:40,730 --> 00:28:43,580
现在招呼路线确实存在。
Now the greet route does exist.

563
00:28:43,579 --> 00:28:46,069
请注意，斜杠问候语是功能齐全的。
Notice that slash greet is fully functional.

564
00:28:46,069 --> 00:28:49,489
不再找不到它了，但是它当然没有做任何有用的事情，
It's not a not found anymore, but it's of course not doing anything useful,

565
00:28:49,490 --> 00:28:50,750
因此，“要做”。
hence the "to do."

566
00:28:50,750 --> 00:28:51,650
好吧，没关系。
Well that's OK.

567
00:28:51,650 --> 00:28:55,160
让我回到这里停止服务器。
Let me go back here and stop the server.

568
00:28:55,160 --> 00:29:00,230
让我改为招呼一个称为greet dot HTML的模板。
And let me instead have greet render a template called greet dot HTML.

569
00:29:00,230 --> 00:29:04,190
但是请记住，问候点HTML是我开始的地方。
But recall that greet dot HTML is where I started.

570
00:29:04,190 --> 00:29:06,620
现在是具有此占位符的文件。
It is the file now that has this placeholder.

571
00:29:06,619 --> 00:29:12,049
所以我想我所能做的就是移动我以前使用的代码
So I think what I can do is just move the code that I was using earlier

572
00:29:12,049 --> 00:29:14,359
对于不再需要的索引，因为索引
for index which no longer needs it, because index

573
00:29:14,359 --> 00:29:18,559
点HTML只有硬编码的静态形式，让我继续
dot HTML has only a hardcoded static form, let me go ahead

574
00:29:18,559 --> 00:29:22,609
然后只需将name参数移到我的问候路线即可。
and just move the name parameter to my greet route instead.

575
00:29:22,609 --> 00:29:24,799
让我继续并重新启动服务器。
Let me go ahead and restart my server.

576
00:29:24,799 --> 00:29:27,409
让我继续打开我的URL。
Let me go ahead and open my URL.

577
00:29:27,410 --> 00:29:31,760
让我继续输入我的名字，然后点击Submit和voila。
Let me go ahead and type my name in and hit submit, and voila.

578
00:29:31,759 --> 00:29:37,159
现在我们有了两条功能齐全的路线，斜线和斜线打招呼，
So now we have two fully functional routes, slash and slash greet,

579
00:29:37,160 --> 00:29:39,920
第一个恰好只显示
the first of which just so happens to only display

580
00:29:39,920 --> 00:29:43,670
静态形式，其中第二种实际上恰好是在做某事
the static form, the second of which actually happens to do something

581
00:29:43,670 --> 00:29:46,040
更加有趣并向用户打招呼。
more interesting and greet the user.

582
00:29:46,039 --> 00:29:49,099
我刚才提到，用户界面让我有点生气
And I mentioned a moment ago, I was kind of annoyed by the user interface

583
00:29:49,099 --> 00:29:52,089
在这里，这是在记住谁之前输入过他们的名字的事实，
here, the fact that it's remembering who typed their name in before,

584
00:29:52,089 --> 00:29:54,756
我只是以错误的方式摩擦我，从而泄漏了一点隐私。
I just, rubbing me the wrong way, leaks a little bit of privacy.

585
00:29:54,757 --> 00:29:57,040
因此，让我实际进入索引并回想一下
So let me actually go into my index and recall

586
00:29:57,039 --> 00:30:00,639
HTML中还有其他属性（例如自动完成功能）等于off。
that there's other attributes in HTML like autocomplete equals off.

587
00:30:00,640 --> 00:30:05,260
我也可以进行自动对焦，使该文本字段闪烁的光标
I can also do autofocus to give that textfield the blinking cursor

588
00:30:05,259 --> 00:30:08,589
默认情况下。现在让我继续并重新启动
by default. And now let me go ahead and restart

589
00:30:08,589 --> 00:30:11,019
进行此更改后我的服务器。
my server after making this change.

590
00:30:11,019 --> 00:30:12,459
让我继续并重新加载。
Let me go ahead and reload.

591
00:30:12,460 --> 00:30:13,330
你知道吗？
And you know what?

592
00:30:13,329 --> 00:30:14,439
我们可以做的更好。
We can do a little better.

593
00:30:14,440 --> 00:30:17,980
我们还添加一个占位符，用引号引起来，
Let's also add one of those placeholder, quote unquote name,

594
00:30:17,980 --> 00:30:20,890
只是为了让我的访客更清楚
just so that it's a little more clear to my visitors

595
00:30:20,890 --> 00:30:23,620
哦，你要我在这里输入我的名字，大卫。
that, oh, you want me to type my name, David, here.

596
00:30:23,619 --> 00:30:24,969
自动完成功能现已关闭。
Autocomplete is now off.

597
00:30:24,970 --> 00:30:26,770
我单击提交，瞧。
I click Submit, voila.

598
00:30:26,769 --> 00:30:31,686
现在，我们有了一个可以正常使用的Web应用程序。
We now have a working, if simple, web application.

599
00:30:31,686 --> 00:30:33,519
好吧，那又有什么呢？
All right, so what were the additions there?

600
00:30:33,519 --> 00:30:37,629
与以前相同的应用程序，但是我们增加了第二条路线
Same exact application as before, but we added a second route

601
00:30:37,630 --> 00:30:44,470
和第二个模板，以便一个表单可以将数据提交到另一条路由
and a second template so that one form could submit data to the other route

602
00:30:44,470 --> 00:30:45,470
反而。
instead.

603
00:30:45,470 --> 00:30:50,050
所以让我在这里暂停一下，看看在我们之前是否有任何疑问或困惑
So let me pause here to see if there's any questions or confusion before we

604
00:30:50,049 --> 00:30:53,339
继续对此进行迭代。
continue to iterate on this.

605
00:30:53,339 --> 00:30:55,759
问题或困惑。
Questions or confusion.

606
00:30:55,759 --> 00:31:00,509
说话者1：我想知道它如何等于双引号名称，
SPEAKER 1: I'm wondering how that came equals double quote name,

607
00:31:00,509 --> 00:31:05,832
该名称等于您以后指定的名称吗？
is that equivalent to the name that you later specified?

608
00:31:05,833 --> 00:31:06,750
DAVID J. MALAN：是的。
DAVID J. MALAN: It is.

609
00:31:06,750 --> 00:31:09,029
我将通过现在更改来演示这一点。
And I'll demonstrate this by changing that now.

610
00:31:09,029 --> 00:31:12,539
我之所以称它为“名字”，是因为我们确实在谈论人类的名字，
I called it name just because we're indeed talking about humans' names,

611
00:31:12,539 --> 00:31:14,829
但我可以随便叫这个。
but I could call this anything I want.

612
00:31:14,829 --> 00:31:19,149
因此，例如，以我的形式，我正在收集此人的名字。
So for instance in my form I'm collecting this as the person's name.

613
00:31:19,150 --> 00:31:22,390
但是我可以将其更改为第一个下划线名称，例如，
But I could change it to first underscore name, for instance,

614
00:31:22,390 --> 00:31:24,070
如果我只在乎他们的名字。
if I only care about their first name.

615
00:31:24,069 --> 00:31:25,949
让我更改占位符以使其清楚
Let me change the placeholder to make clear

616
00:31:25,950 --> 00:31:27,660
我只想要他们的名字。
that I only want their first name.

617
00:31:27,660 --> 00:31:30,360
现在让我转到我的应用程序点py。
Let me now go to my application dot py.

618
00:31:30,359 --> 00:31:36,509
让我获得第一个下划线名称HTTP参数，然后
Let me get the first underscore name HTTP parameter, and then

619
00:31:36,509 --> 00:31:42,449
在我的模板中，迎接点HTML，让我将其更改为第一个下划线名称。
in my template, greet dot HTML, let me change this to first underscore name.

620
00:31:42,450 --> 00:31:44,580
实际上，我需要再进行一次更改。
And actually I need to make one more change.

621
00:31:44,579 --> 00:31:47,539
我还需要将其更改为第一个下划线名称。
I need to change this to first underscore name as well.

622
00:31:47,539 --> 00:31:50,789
因此，您不得不在各处重复自己，这有点烦人，
So it's a little annoying that you have to repeat yourself all over the place,

623
00:31:50,789 --> 00:31:52,499
但是它们的含义不同。
but they mean different things.

624
00:31:52,500 --> 00:31:55,979
在应用程序点py的上下文中，这是一个参数
In the context of application dot py, this is a parameter

625
00:31:55,980 --> 00:31:57,930
我正在传递我的模板。
that I'm passing into my template.

626
00:31:57,930 --> 00:32:01,800
在此get函数的上下文中，这是HTTP参数
In the context of this get function, this is the HTTP parameter

627
00:32:01,799 --> 00:32:03,809
我是从URL抓取的。
that I'm grabbing from the URL.

628
00:32:03,809 --> 00:32:07,169
在我的模板中，这是指
And in the context of my template, this refers

629
00:32:07,170 --> 00:32:10,500
到第一个，这是我的论点
to the first of those, which is the argument I'm

630
00:32:10,500 --> 00:32:12,810
传入渲染模板。
passing into render template.

631
00:32:12,809 --> 00:32:17,459
如果我重新加载服务器，然后让我继续并在此处重新加载表单。
And if I reload the server, and let me go ahead and reload the form here.

632
00:32:17,460 --> 00:32:19,030
让我只输入我的名字。
Let me type in only my first name.

633
00:32:19,029 --> 00:32:19,649
点击提交。
Click submit.

634
00:32:19,650 --> 00:32:23,100
一大堆事情发生了变化，而不是输出方面的变化
A whole bunch of things changed, not in terms of output

635
00:32:23,099 --> 00:32:24,809
但在功能方面。
but in terms of functionality.

636
00:32:24,809 --> 00:32:31,179
您会看到，现在我使用的是第一个下划线名称，而不是名称本身。
And you'll see that now I'm using first underscore name instead of name itself.

637
00:32:31,180 --> 00:32:37,610
有关路线或参数的其他问题或困惑
Other questions or confusion about routes or parameters

638
00:32:37,609 --> 00:32:40,579
在网址，模板中还是其他？
in the URL, templates or otherwise?

639
00:32:40,579 --> 00:32:41,389
不？
No?

640
00:32:41,390 --> 00:32:44,120
好吧，那我就问我们一个问题。
All right, well let me ask a question then of us.

641
00:32:44,119 --> 00:32:47,479
让我继续向下滚动一下以腾出空间。
Let me go ahead and scroll this down just a bit to make room.

642
00:32:47,480 --> 00:32:50,090
再次，这是我的索引点HTML文件。
Here, again, is my index dot HTML file.

643
00:32:50,089 --> 00:32:51,409
它包含一个表格。
It contains a form.

644
00:32:51,410 --> 00:32:55,730
现在是我的问候点HTML文件，其中仅包含
Here now is my greet dot HTML file, which contains just,

645
00:32:55,730 --> 00:32:58,520
你好，逗号等等。
hello comma so and so.

646
00:32:58,519 --> 00:33:02,037
对此设计欠佳的是什么？
What looks poorly designed about this?

647
00:33:02,038 --> 00:33:05,330
我将继续将我的短名字恢复为多一点
I'm going to go ahead and revert just to my shorter names just so a little more

648
00:33:05,329 --> 00:33:07,849
可以立即安装到屏幕上。
fits onto the screen at once.

649
00:33:07,849 --> 00:33:10,749
但是，对此有何设计欠佳？
But what looks poorly designed about this?

650
00:33:10,750 --> 00:33:12,100
我声称这是正确的。
I claim that it's correct.

651
00:33:12,099 --> 00:33:14,809
我们似乎有一个正常工作的Web应用程序。
We seem to have a working web application.

652
00:33:14,809 --> 00:33:17,479
但是，什么是设计不当的争论呢？
But what is poorly designed arguably?

653
00:33:17,480 --> 00:33:19,880
布莱恩：让我们听听彼得的声音。
BRIAN: Let's hear from Peter.

654
00:33:19,880 --> 00:33:22,550
说话者2：嗯，我想你明白了，
SPEAKER 2: Well I guess you're getting it,

655
00:33:22,549 --> 00:33:27,859
因此，URL会公开输入的个人数据，无论
so the URL is exposing the personal data of the input, whatever

656
00:33:27,859 --> 00:33:32,524
他们可能已经放进去了，所以我想我们想用post代替它。
they might have put in, so I guess we'd want to use post instead to hide it.

657
00:33:32,525 --> 00:33:33,650
DAVID J. MALAN：好的收获。
DAVID J. MALAN: Good catch.

658
00:33:33,650 --> 00:33:37,520
所以这段时间我非常刻意，但有点令人担忧
So all this time I have very deliberately but a little worrisomely

659
00:33:37,519 --> 00:33:40,486
在某种意义上一直在泄露URL中的信息
been leaking information in the URL in the sense

660
00:33:40,487 --> 00:33:43,070
现在它可能会被我的浏览器保存，对吗？
that now it's probably going to be saved by my browser, right?

661
00:33:43,069 --> 00:33:45,439
通常，当您在网址栏中输入内容时，
Often when you're typing something to your URL bar,

662
00:33:45,440 --> 00:33:47,360
您可以查看之前搜索过的内容，
you can see what you've searched for before,

663
00:33:47,359 --> 00:33:51,044
您以前去过哪些网站，这是一个很好的用户界面
what websites you've been to before, and that's a good user interface

664
00:33:51,045 --> 00:33:54,170
它的功能在于它可以帮助您键入击键，因为您可以
feature in that it just helps you type your keystrokes because you can just

665
00:33:54,170 --> 00:33:56,780
按Tab键，然后按Enter键以快速完成您的想法。
hit Tab and hit Enter to finish your thought quickly.

666
00:33:56,779 --> 00:34:00,019
但是，如果您不希望别人知道您去了哪里，这是一种侵入性的行为
But it's a little invasive if you don't want people knowing where you went

667
00:34:00,019 --> 00:34:02,629
或您搜索的内容，或者这是一台实验室计算机
or what you searched for or if it's a lab computer

668
00:34:02,630 --> 00:34:04,190
或您的兄弟姐妹也在使用它。
or your siblings are using it too.

669
00:34:04,190 --> 00:34:07,730
有很多原因导致您不希望输入的内容结束
There's a lot of reasons why you don't want your typed input ending up

670
00:34:07,730 --> 00:34:08,690
在该网址栏中。
in that URL bar.

671
00:34:08,690 --> 00:34:12,380
我上周提议，我们可以通过使用来避免这种情况，
And I proposed last week that we can avoid this by using,

672
00:34:12,380 --> 00:34:14,030
你建议的是职位。
what you proposed is post.

673
00:34:14,030 --> 00:34:15,150
确实，让我们做到这一点。
And indeed let's do this.

674
00:34:15,150 --> 00:34:17,389
让我回到索引点HTML。
Let me go back to my index dot HTML.

675
00:34:17,389 --> 00:34:22,340
让我在HTML文件中进行简单的更改，将发布方法更改为。
Let me make a simple change in my HTML file, changing the method to post.

676
00:34:22,340 --> 00:34:25,370
发布将与get几乎相同，
Post is going to be almost the same as get,

677
00:34:25,369 --> 00:34:29,059
但不要将我的参数放在网址中
but instead of putting my parameters in the URL

678
00:34:29,059 --> 00:34:32,269
例如网址中的q等于猫或名字等于David，
like q equals cats or name equals David in the URL,

679
00:34:32,269 --> 00:34:35,479
而是隐喻地将其降低，深化
it's going to instead metaphorically put it lower, deeper

680
00:34:35,480 --> 00:34:37,070
在虚拟信封中。
inside the virtual envelope.

681
00:34:37,070 --> 00:34:39,409
因此它仍然是从浏览器发送到服务器的，
So it's still being sent from the browser to server,

682
00:34:39,409 --> 00:34:43,460
但浏览器不会在网址栏中记住它。
but it's not going to get remembered by the browser in the URL bar.

683
00:34:43,460 --> 00:34:46,830
但是，如果执行此操作，则需要更改控制器。
But if I do this I need to change my controller.

684
00:34:46,829 --> 00:34:49,819
我需要我的Python代码在稍微不同的位置查找
I need my Python code to look in a somewhat different location

685
00:34:49,820 --> 00:34:50,480
做到这一点。
to get at that.

686
00:34:50,480 --> 00:34:52,159
这是一个非常简单的更改。
And it's a pretty simple change.

687
00:34:52,159 --> 00:34:53,929
相反，我必须这样做。
Instead I have to do this.

688
00:34:53,929 --> 00:34:59,150
我必须告诉Flask，斜线打招呼，
I have to tell Flask that the route, slash greet,

689
00:34:59,150 --> 00:35:02,420
实际上将支持一组不同的方法。
is actually going to support a different set of methods.

690
00:35:02,420 --> 00:35:05,510
与其支持默认的get，
Rather than supporting get, which is the default,

691
00:35:05,510 --> 00:35:09,180
我必须传递一个叫做方法的有点神秘的论点。
I have to pass in the somewhat cryptic argument called methods.

692
00:35:09,179 --> 00:35:12,319
然后我必须从字面上传递方法的Python列表
And then I have to pass in literally a Python list of the methods

693
00:35:12,320 --> 00:35:13,910
我希望该列表支持。
I want this list to support.

694
00:35:13,909 --> 00:35:17,029
默认情况下，如果您不使用此参数，则全部
By default if you don't use this argument, all

695
00:35:17,030 --> 00:35:19,970
在这些路线中，第一条和第二条
of these routes, the first and the second,

696
00:35:19,969 --> 00:35:23,989
本质上具有此默认值，方法等于
have essentially this default value, methods equals,

697
00:35:23,989 --> 00:35:26,467
quote unquote进入列表，因此是一个大小为1的列表。
quote unquote get in a list, so a list of size one.

698
00:35:26,467 --> 00:35:29,509
如果您不得不在所有地方键入内容，那会有点烦人，
It would be a little annoying if you had to type that all over the place,

699
00:35:29,510 --> 00:35:32,460
因此默认值仅允许您完全不输入任何内容。
so the default just allows you to just type nothing at all.

700
00:35:32,460 --> 00:35:34,550
但是如果您想支持职位，您确实有
But if you want to support post, you do have

701
00:35:34,550 --> 00:35:39,020
重写此方法，并将get default更改为显式发布。
to override this and change the get default to post explicitly.

702
00:35:39,019 --> 00:35:43,759
而且，您必须从其他变量中获取参数。
And you have to get the parameters from a different variable.

703
00:35:43,760 --> 00:35:48,880
与其使用引用URL中参数的请求点args代替，
Instead of using request dot args which refers to the arguments in the URL,

704
00:35:48,880 --> 00:35:51,980
您必须将其更改为请求点格式。
you have to change it to request dot form.

705
00:35:51,980 --> 00:35:53,510
这些都是可怕的名字。
These are horribly named.

706
00:35:53,510 --> 00:35:57,770
在Flask中，这些全局变量，请求点参数和请求点形式
In Flask, these global variables, request dot args and request dot form

707
00:35:57,769 --> 00:36:00,529
分别参考get和post。
refer to get and post respectively.

708
00:36:00,530 --> 00:36:03,710
更好的名字可能是请求点获取和请求点发布，
Better names might have been request dot get and request dot post,

709
00:36:03,710 --> 00:36:04,940
但这就是我们所拥有的。
but this is what we have.

710
00:36:04,940 --> 00:36:08,000
因此request dot args是用于URL中的get请求。
So request dot args is for get requests in the URL.

711
00:36:08,000 --> 00:36:13,040
请求点形式用于发布请求，其中相同信息被更深层地掩埋
Request dot form is for post requests where the same info is buried deeper

712
00:36:13,039 --> 00:36:14,719
在虚拟信封中。
in the virtual envelope.

713
00:36:14,719 --> 00:36:17,359
在完成这些更改之后，让我继续进行，
So after those changes, let me go ahead and make,

714
00:36:17,360 --> 00:36:20,900
对不起，不要打错，语言错误，烧瓶运行。
sorry not make, wrong language, Flask run.

715
00:36:20,900 --> 00:36:25,190
好吧，让我继续打开我的URL，瞧。
All right let me go ahead and open my URL, and voila.

716
00:36:25,190 --> 00:36:29,420
我要输入David，单击Submit，然后注意其中的魔力。
I'm going to type in David, click Submit, and now notice the magic.

717
00:36:29,420 --> 00:36:33,320
现在这条路还是斜线迎接，但没人
Now the route is still slash greet, but no one

718
00:36:33,320 --> 00:36:36,230
以后使用我的笔记本电脑的人会知道我叫什么名字
who uses my laptop later is going to know what my name was

719
00:36:36,230 --> 00:36:40,580
或我的Google搜索是什么，或我的信用卡号是
or what my Google search was or what my credit card number was

720
00:36:40,579 --> 00:36:44,869
或其他任何我可能在此处输入过的表格（例如我的名字）。
or anything else that I might have typed into a form here like my name.

721
00:36:44,869 --> 00:36:48,089
但是输出仍然可以正常运行。
But the output is still fully functional.

722
00:36:48,090 --> 00:36:51,108
所以这确实是要清楚的是帖子是什么
So this indeed, to be clear, is post is what

723
00:36:51,108 --> 00:36:53,900
每当您远程收集任何东西时，您都会使用
you would use whenever you're collecting anything remotely personal

724
00:36:53,900 --> 00:36:56,330
例如人们的电子邮件地址或他们的信用额度
like people's email addresses, perhaps, or their credit

725
00:36:56,329 --> 00:36:59,779
卡或密码，当然还有其他值，
card, or their passwords, certainly, and other values,

726
00:36:59,780 --> 00:37:04,760
但您可以使用get，因为到目前为止我们一直在使用。
but you can otherwise use get as we've been using thus far.

727
00:37:04,760 --> 00:37:06,920
好吧，让我问一个后续问题，因为我
Well let me ask a follow up question, because I

728
00:37:06,920 --> 00:37:08,880
认为我们仍然可以做得更好。
think we can still do better than this.

729
00:37:08,880 --> 00:37:12,470
从根本上讲索引点HTML的设计
There's something fundamentally about the design of index dot HTML

730
00:37:12,469 --> 00:37:15,919
并迎接感觉不太理想的点HTML。
and greet dot HTML that feels a little suboptimal.

731
00:37:15,920 --> 00:37:21,290
我敢说你们中的几个人在过去一周中注意到了同样的问题
And I dare say several of you noticed this same problem in this past week

732
00:37:21,289 --> 00:37:24,649
当您自己创建一些HTML文件时。
when you were just creating a few HTML files on your own.

733
00:37:24,650 --> 00:37:28,970
有点单调乏味，烦人，凌乱或设计不良
What was a little tedious or annoying or messy or poorly designed

734
00:37:28,969 --> 00:37:33,499
尽你所能从创建这几个HTML中看出
as best you could tell from creating these several HTML

735
00:37:33,500 --> 00:37:36,470
您自己的个人主页的文件？
files for your own personal home page?

736
00:37:36,469 --> 00:37:40,369
布莱恩：聊天表明您在两个HTML之间重复了一些HTML
BRIAN: The chat is suggesting you've repeated some HTML between the two HTML

737
00:37:40,369 --> 00:37:40,889
文件。
files.

738
00:37:40,889 --> 00:37:43,309
DAVID J. MALAN：是的，老天，我是说第二份文件，
DAVID J. MALAN: Yeah, my god, I mean honestly by the second file,

739
00:37:43,309 --> 00:37:45,649
第三文件，第四文件，您可能只是复制和粘贴
third file, fourth file, you're probably just copying and pasting

740
00:37:45,650 --> 00:37:48,080
您以前的文件，然后进行较小的更改，
your previous files and then making minor changes,

741
00:37:48,079 --> 00:37:49,249
这就是您所能做的。
and that's all you could do.

742
00:37:49,250 --> 00:37:51,680
单独使用HTML和CSS，甚至使用JavaScript，
With HTML and CSS alone and even JavaScript,

743
00:37:51,679 --> 00:37:54,499
您不能跨多个页面共享HTML。
you can't share HTML across multiple pages.

744
00:37:54,500 --> 00:37:57,680
过去一周提供静态内容时的唯一选择
Your only option this past week when serving static content

745
00:37:57,679 --> 00:38:00,559
是多余地复制和粘贴该内容。
was to copy and paste that content redundantly.

746
00:38:00,559 --> 00:38:01,339
看看这个。
And look at this.

747
00:38:01,340 --> 00:38:06,530
在我的索引点HTML文件中，我刚刚从第1行到第7行突出显示的所有内容
In my index dot HTML file, everything I've just highlighted from line 1 to 7

748
00:38:06,530 --> 00:38:10,580
恰好与第1行到第7行的所有内容完全相同
happens to be exactly the same as everything from line 1 to 7

749
00:38:10,579 --> 00:38:12,779
在问候点HTML。
in greet dot HTML.

750
00:38:12,780 --> 00:38:17,250
因此，这是Flask或任何Web编程框架提供的另一个功能。
So here's another feature you get with Flask or any web programming framework.

751
00:38:17,250 --> 00:38:19,370
这些本身并不是Flask特有的。
These aren't specific to Flask, per se.

752
00:38:19,369 --> 00:38:23,269
您可以排除常见内容。
You get the ability to factor out common content.

753
00:38:23,269 --> 00:38:25,139
那么我们如何去做呢？
And so how do we go about doing this?

754
00:38:25,139 --> 00:38:26,659
好吧，让我继续执行此操作。
Well, let me go ahead and do this.

755
00:38:26,659 --> 00:38:30,109
让我继续创建第三个文件，按惯例在Flask中
Let me go ahead and create a third file that by convention in Flask

756
00:38:30,110 --> 00:38:32,060
被称为布局点HTML。
is called layout dot HTML.

757
00:38:32,059 --> 00:38:35,449
为了安全起见，我将其放入我的模板目录中
And to be safe, to be sure, I'm going to put this in my templates directory

758
00:38:35,449 --> 00:38:37,189
因为它又是一个HTML文件。
because again it's an HTML file.

759
00:38:37,190 --> 00:38:40,490
我将继续复制所有相同的样板，如果可以的话，
I'm going to go ahead and copy paste all of that same boilerplate, if you will,

760
00:38:40,489 --> 00:38:44,479
所有共同点，并删除问候点HTML特有的内容。
all of the commonalities, and delete what was specific to greet dot HTML.

761
00:38:44,480 --> 00:38:46,940
我认为我们正在看的是第1至10行，
And I think what we're looking at, lines 1 through 10,

762
00:38:46,940 --> 00:38:52,583
现在就像是另外两个网页的布局的模板（如果您愿意）。
is now like a template for, if you will, the layout for my other two web pages.

763
00:38:52,583 --> 00:38:54,500
所以您知道什么，让我继续进行。
So you know what, let me go ahead and do this.

764
00:38:54,500 --> 00:38:59,389
让我使用一些特殊的语法并说出块体，然后，有点奇怪，
Let me use some special syntax and say block body, and then, a little weirdly,

765
00:38:59,389 --> 00:39:01,979
在这里结束。
end block here.

766
00:39:01,980 --> 00:39:06,140
所以这是Flask特定的语法或技术上
So this is Flask specific syntax or technically

767
00:39:06,139 --> 00:39:08,719
Jinja特定的语法，这是Flask的一种语言
Jinja specific syntax, which is a language that Flask

768
00:39:08,719 --> 00:39:12,259
正在使用别人写的，这是Flask中的特殊语法，
is using which someone else wrote, this is special syntax in Flask that

769
00:39:12,260 --> 00:39:15,950
本质上说是在这里放置一个占位符。
essentially says put a placeholder here.

770
00:39:15,949 --> 00:39:19,919
在此处放置一个占位符，这样我就可以插入其他HTML。
Put a placeholder here so I can plug in other HTML in just a bit.

771
00:39:19,920 --> 00:39:21,170
那么，我现在该如何使用呢？
So how do I use this now?

772
00:39:21,170 --> 00:39:23,460
好吧，让我转到我的索引点HTML文件，
Well let me go to my index dot HTML file,

773
00:39:23,460 --> 00:39:26,570
让我摆脱所有的冗余，
and let me get rid of all of the redundancy,

774
00:39:26,570 --> 00:39:29,990
沸腾索引点HTML的本质。
boiling down index dot HTML really into its essence.

775
00:39:29,989 --> 00:39:33,089
索引点HTML唯一的特殊之处就是该表单。
The only thing that's special about index dot HTML was that form.

776
00:39:33,090 --> 00:39:36,590
因此，如果我想使用刚创建的布局，请继续
So if I want to use the same layout that I just created, let me go ahead

777
00:39:36,590 --> 00:39:41,750
然后在这里用特殊的语法说出来，扩展布局点HTML，
and say up here using that special syntax, extends layout dot HTML,

778
00:39:41,750 --> 00:39:46,700
然后在这里让我说，如果您愿意，这是我的身体障碍。
and then down here let me say, here is my body block, if you will.

779
00:39:46,699 --> 00:39:47,959
让我稍微缩进一点。
Let me un-indent that a bit.

780
00:39:47,960 --> 00:39:51,810
然后让我在这里结束发言。
And then let me say down here end block.

781
00:39:51,809 --> 00:39:55,849
同样，语法很奇怪，但是思想很相似。
So again, syntax is weird, but the ideas are pretty similar.

782
00:39:55,849 --> 00:39:58,429
这在本质上与我们的头文件几乎相似
This is almost similar in spirit to our header files

783
00:39:58,429 --> 00:40:00,799
在C中，您可以排除一些共同点
in C, where you could factor out some commonalities

784
00:40:00,800 --> 00:40:02,570
并在多个地方重复使用它们。
and just reuse them in multiple places.

785
00:40:02,570 --> 00:40:04,653
这里有点儿幻想，因为您可以
Here it's a little fancier because you can kind of

786
00:40:04,652 --> 00:40:07,009
有这个蓝图，这个布局，从字面上看
have this blueprint, this layout, literally

787
00:40:07,010 --> 00:40:09,140
然后您可以插入其他内容。
that you can then plug different content into.

788
00:40:09,139 --> 00:40:13,969
所以第一行说，嘿Flask，以下文件，索引点HTML，
So this first line says, hey Flask, the following file, index dot HTML,

789
00:40:13,969 --> 00:40:17,019
从本质上继承，它扩展了我的默认布局。
essentially inherits from, it extends my default layout.

790
00:40:17,019 --> 00:40:18,019
那是什么布局？
Well what's that layout?

791
00:40:18,019 --> 00:40:18,799
就是这个
It's this.

792
00:40:18,800 --> 00:40:23,300
请注意，此布局定义了该占位符，任意称为body。
Notice that this layout defines this placeholder, arbitrarily called body.

793
00:40:23,300 --> 00:40:26,420
我可以将其称为x或y或z，但我将其称为body。
I could have called it x or y or z, but I'm going to call it body.

794
00:40:26,420 --> 00:40:26,990
为什么？
Why?

795
00:40:26,989 --> 00:40:30,769
因为这真的就像我身体中100％的内容一样。
Because really it's like 100% of the contents of my body.

796
00:40:30,769 --> 00:40:32,419
因此似乎是个好名字。
So seems like a good name.

797
00:40:32,420 --> 00:40:35,750
然后在索引点HTML中，我现在需要告诉Flask，
And then in index dot HTML, I just now need to tell Flask,

798
00:40:35,750 --> 00:40:40,339
这里有一些您应该插入该占位符的代码。
here comes some code that you should plug into that placeholder.

799
00:40:40,340 --> 00:40:45,090
您可以在此处插入一行或多行HTML代码。
And you can plug one or more lines of HTML code in here.

800
00:40:45,090 --> 00:40:46,670
所以，让我继续保存。
So let me go ahead and save this.

801
00:40:46,670 --> 00:40:51,230
现在让我继续打招呼，类似地删除所有多余的内容，
Let me go ahead now and go to greet, similarly delete all that redundancy,

802
00:40:51,230 --> 00:40:56,060
现在让我在这里再说一遍，扩展布局点HTML，
and now let me go up here and say again, extends layout dot HTML,

803
00:40:56,059 --> 00:40:59,929
然后在这里，我说这是我的身体障碍。
and then down here let me say here is my body block.

804
00:40:59,929 --> 00:41:03,559
让我略微缩进，然后让我说结束
Let me just un-indent this slightly, and then let me say end block

805
00:41:03,559 --> 00:41:05,309
并保存该文件。
and save that file.

806
00:41:05,309 --> 00:41:08,149
所以现在这些HTML文件很快看起来很奇怪。
So now these HTML files are quickly looking weird.

807
00:41:08,150 --> 00:41:10,190
就像这里几乎没有HTML，
Like there's barely any HTML in here, it's

808
00:41:10,190 --> 00:41:15,950
实际上只是文本和怪异的Flask语法，在索引点HTML中也是一样，
really just text and weird Flask syntax, same thing in index dot HTML,

809
00:41:15,949 --> 00:41:19,009
但这又是Web应用程序的价值之一。
but again, this is one of the values of a web application.

810
00:41:19,010 --> 00:41:21,228
如果您拥有Python之类的编程语言，
Where you have a programming language like Python,

811
00:41:21,228 --> 00:41:23,270
您可以排除这些共同点，真正地
you can factor out those commonalities and really

812
00:41:23,269 --> 00:41:26,559
开始像Google和Facebook一样动态地生成页面
start generating pages dynamically just like the Googles and Facebooks

813
00:41:26,559 --> 00:41:29,029
和世界其他地方每天都在做。
and others of the world do every day.

814
00:41:29,030 --> 00:41:32,950
现在让我继续并重新运行Flask run
So let me go ahead now and rerun Flask run

815
00:41:32,949 --> 00:41:36,309
并一如既往地交叉手指，因为我在这里做了很多修改。
and cross my fingers as always because I made a whole bunch of changes here.

816
00:41:36,309 --> 00:41:40,869
让我打开我的URL，到目前为止，看来效果还不错。
Let me open my URL, and voila, seems to be working OK so far.

817
00:41:40,869 --> 00:41:44,629
让我继续，在提交此文件之前，让我向您展示页面源代码。
Let me go ahead and, before I submit this, let me show you the page source.

818
00:41:44,630 --> 00:41:48,040
请注意，它在那里打印的不是很漂亮，
Notice that it's there it's not quite as pretty printed,

819
00:41:48,039 --> 00:41:50,589
像缩进有点差，但是没关系。
like the indentation's a little off, but that's OK.

820
00:41:50,590 --> 00:41:52,720
您的模板应具有良好的样式。
Your templates should be well styled.

821
00:41:52,719 --> 00:41:55,549
模板中的所有内容都应精美缩进。
Everything should be beautifully indented in your templates.

822
00:41:55,550 --> 00:41:58,120
但是如果您的模板是由Flask渲染的
But if your templates are then rendered by Flask

823
00:41:58,119 --> 00:41:59,859
而且空格不是很漂亮，
and the whitespace isn't quite as pretty,

824
00:41:59,860 --> 00:42:02,570
没关系，因为浏览器也不在乎。
that doesn't matter because again, the browser doesn't care.

825
00:42:02,570 --> 00:42:05,020
但是确实，我有一个完整的完整网页。
But indeed, I have a full-fledged complete web page.

826
00:42:05,019 --> 00:42:06,609
让我提交这张表格。
Let me submit this form.

827
00:42:06,610 --> 00:42:07,940
它似乎仍然有效。
It seems to still work.

828
00:42:07,940 --> 00:42:09,700
那是我的绝招。
That's my slash greet route.

829
00:42:09,699 --> 00:42:12,099
我看到的是大卫你好，如果我在这里查看页面源代码，
I'm seeing Hello, David, and if I view page source here,

830
00:42:12,099 --> 00:42:15,182
注意另一个确认表单提交。
notice another confirm form submission.

831
00:42:15,182 --> 00:42:16,599
这实际上是一项安全功能。
This is actually a safety feature.

832
00:42:16,599 --> 00:42:19,269
您不希望网站诱使您像退房一样
You don't want websites tricking you into like checking out

833
00:42:19,269 --> 00:42:21,609
通过邮寄两次使用您的信用卡，所以我
twice with your credit card via post, so I'm

834
00:42:21,610 --> 00:42:23,500
继续，然后单击手动重新加载
going to go ahead and click reload manually

835
00:42:23,500 --> 00:42:26,200
这确认我要重新提交此表单，因为存在
which confirms that I want to resubmit this form because there's

836
00:42:26,199 --> 00:42:27,699
没什么危险的。
nothing dangerous about it.

837
00:42:27,699 --> 00:42:30,309
现在有我打招呼的路线。
There is now my greet route.

838
00:42:30,309 --> 00:42:33,789
因此，这可能会为您节省很多头痛或乏味
So this probably would have saved you all a lot of headache or tedium

839
00:42:33,789 --> 00:42:37,089
或复制粘贴，您上周在工具包中只是没有此工具。
or copy paste, you just didn't have this tool in the tool kit last week.

840
00:42:37,090 --> 00:42:43,190
您不能仅在浏览器中使用HTML和CSS甚至JavaScript来做到这一点。
You cannot do it with HTML and CSS or even JavaScript alone in the browser.

841
00:42:43,190 --> 00:42:47,080
所以这是您的模板真正闪耀的地方。
So this is where you have templates really shining.

842
00:42:47,079 --> 00:42:49,629
您不仅可以让模板使用两个大括号
Not only can you have templates use two curly braces

843
00:42:49,630 --> 00:42:54,760
要插入变量的值，可以使用大括号百分号
to plug in values of variables, you can use this curly brace percent sign

844
00:42:54,760 --> 00:43:00,420
语法并插入其他文件的实际内容。
syntax and plug in actual contents of other files.

845
00:43:00,420 --> 00:43:01,140
ew。
Whew.

846
00:43:01,139 --> 00:43:04,119
有疑问或困惑吗？
Questions or confusion?

847
00:43:04,119 --> 00:43:05,869
布莱恩：有一个澄清的问题。
BRIAN: There was a clarification question.

848
00:43:05,869 --> 00:43:07,819
你能告诉我们什么是[吗？进子吗？]
Could you tell us what is [? Jinja? ?]

849
00:43:07,820 --> 00:43:09,320
DAVID J. MALAN：是的，所以我略过了，因为我
DAVID J. MALAN: Yes, so I skirted over that because I

850
00:43:09,320 --> 00:43:11,360
就像那里有多少个新名词一样让我感到烦恼
was getting annoyed at just like how many new terms there

851
00:43:11,360 --> 00:43:13,490
是当今，坦率地说在Web编程世界中
are today and frankly in the web programming world

852
00:43:13,489 --> 00:43:14,739
我们有点被困住了。
that we're sort of stuck with.

853
00:43:14,739 --> 00:43:17,812
因此，这是代码重用的一个很好的例子。
So this is a good example of code reuse.

854
00:43:17,813 --> 00:43:19,730
那里有很多聪明人
There's a lot of smart people out there, a lot

855
00:43:19,730 --> 00:43:21,080
人解决不同的问题。
of people solving different problems.

856
00:43:21,079 --> 00:43:23,599
如果我们所有人都有点烦人和自大
It would be a little annoying and a little arrogant if all of us

857
00:43:23,599 --> 00:43:25,807
试图解决世界上所有的计算问题。
tried to solve all of the world's computing problems.

858
00:43:25,807 --> 00:43:31,579
因此，Flask的作者决定使用其模板功能
And so the authors of Flask decided that for their template feature

859
00:43:31,579 --> 00:43:34,829
他们不会重新发明轮子，而是想出自己的语法。
they would not reinvent the wheel and come up with their own syntax.

860
00:43:34,829 --> 00:43:38,839
他们会使用别人现有的疯狂语法，如果您愿意的话，
They would use someone else's existing crazy syntax, if you will,

861
00:43:38,840 --> 00:43:41,480
使用双大括号和大括号
that uses the double curly braces and the curly brace

862
00:43:41,480 --> 00:43:43,790
和百分号，以便它们只是结合起来
and the percent signs so that they're just combining

863
00:43:43,789 --> 00:43:45,749
一个人与另一人的语言。
one person's language with another.

864
00:43:45,750 --> 00:43:46,709
这很常见。
And this is so common.

865
00:43:46,710 --> 00:43:48,710
这是一件好事，因为从技术上讲，您
And this is a good thing because technically you

866
00:43:48,710 --> 00:43:52,670
如果您出于某种原因真的是反金贾人，可以使用其他语言，
can plug in a different language if you really are anti-Jinja for some reason,

867
00:43:52,670 --> 00:43:55,530
您只讨厌语法，实际上可以使用其他语法。
you just hate the syntax, you can actually use something else.

868
00:43:55,530 --> 00:43:57,800
因此，这实际上是计算的演示
And so this is actually a demonstration in computing

869
00:43:57,800 --> 00:44:01,700
真正基于组件的设计
of really a component based design where you

870
00:44:01,699 --> 00:44:04,819
可以将不同的软件组合在一起，并具有
can plug different pieces of software together and have

871
00:44:04,820 --> 00:44:06,110
他们仍然可以互操作。
them still interoperate.

872
00:44:06,110 --> 00:44:09,680
我们将在课程的网站上添加指向Jinja文档的链接，
And we'll add to the course's website links to Jinja's documentation,

873
00:44:09,679 --> 00:44:13,589
我们将在模板中看到一点点，您可以使用Jinja做更多的事情。
and we'll see in a little bit what more you can do with Jinja in the template.

874
00:44:13,590 --> 00:44:17,060
再说一遍，Jinja只是真正地引用了双花括号语法
So again, Jinja just refers to really the double curly brace syntax

875
00:44:17,059 --> 00:44:24,439
以及出现在我们模板文件中的大括号百分号语法。
and the curly brace percent sign syntax that appears in our templates files.

876
00:44:24,440 --> 00:44:27,770
好的，打个招呼的最后一个功能。
All right, one last feature when it comes to saying hello.

877
00:44:27,769 --> 00:44:30,319
到目前为止，在应用程序点py中，我一直
Thus far in application dot py, I've been

878
00:44:30,320 --> 00:44:34,430
如果在语法上比较复杂，则在概念上保持一点简单
keeping things a little conceptually simple if complicated syntactically

879
00:44:34,429 --> 00:44:38,329
在我的表单中，有两条不同的路线，一条路线为斜线，
by having two separate routes, one route, slash, for my form,

880
00:44:38,329 --> 00:44:44,659
然后是我实际打招呼的另一条路线
and then another route for my actual greet route that

881
00:44:44,659 --> 00:44:46,429
实际显示信息。
actually displays the information.

882
00:44:46,429 --> 00:44:49,189
但严格来说我可以有点聪明
But strictly speaking I can be a little clever

883
00:44:49,190 --> 00:44:51,770
并结合这些路线，如果只是因为
and combine these routes, if only because if you're

884
00:44:51,769 --> 00:44:54,649
建立一个非常复杂的网站，其中包含很多路线，
building a pretty sophisticated website that's got lots of routes,

885
00:44:54,650 --> 00:44:58,550
如果每条路线都需要两条路线（如果一种形式具有
it's kind of annoying if like every route needs two routes if one form has

886
00:44:58,550 --> 00:44:59,880
提交给另一个。
to submit to another.

887
00:44:59,880 --> 00:45:03,230
因此，让我建议我们加强实施
So let me just propose that we tighten up our implementation

888
00:45:03,230 --> 00:45:05,780
并实际上重用了我们的一条路线。
and actually reuse our one route.

889
00:45:05,780 --> 00:45:07,850
所以，让我继续删除我的问候路线，
So let me go ahead and delete my greet route,

890
00:45:07,849 --> 00:45:11,639
只是因为我在那儿有点多余而感到困扰，
just because it's bothering me that I'm getting a little redundancy there,

891
00:45:11,639 --> 00:45:15,139
让我继续说说我的默认路线，索引，
and let me go ahead and say that my default route, my index,

892
00:45:15,139 --> 00:45:19,309
实际上将同时支持get和post这两种方法。
will actually support both methods, get and post.

893
00:45:19,309 --> 00:45:23,239
因此，我将使用相同的路线，不仅要向用户显示表单，
So I'm going to use the same route, not only to show the user the form,

894
00:45:23,239 --> 00:45:26,249
同时也要向用户问好。
but also to say hello to the user as well.

895
00:45:26,250 --> 00:45:30,259
因此，我需要能够在同一条路线上同时支持get和post。
So I need to be able to support both get and post on the same route.

896
00:45:30,260 --> 00:45:31,560
那我该怎么做呢？
So how am I going to do this?

897
00:45:31,559 --> 00:45:33,409
好吧，让我继续执行此操作。
Well, let me go ahead and do this.

898
00:45:33,409 --> 00:45:40,689
我可以做的是，如果请求点方法等于获取，
What I can do is if request dot method equals equals get,

899
00:45:40,690 --> 00:45:45,460
那么我实际上可以继续在这里执行这一行代码。
then I can actually go ahead and execute this line of code here.

900
00:45:45,460 --> 00:45:50,950
否则，如果请求点方法等于发布，那么我将要做的是
Else if request dot method equals equals post, then what I'm going to do

901
00:45:50,949 --> 00:45:55,989
是这个，返回，渲染模板，打招呼HTML，
is this, return, render template, greet dot HTML,

902
00:45:55,989 --> 00:45:59,514
我将以请求点名称的形式传递
and I'm going to pass in a name of request dot form

903
00:45:59,514 --> 00:46:03,889
点获取，名称，然后是世界的默认值。
dot get, name, and then a default value of world.

904
00:46:03,889 --> 00:46:04,689
没什么新鲜的。
So nothing new.

905
00:46:04,690 --> 00:46:07,000
那只是我刚才删除的代码。
That's just the code that I deleted a moment ago.

906
00:46:07,000 --> 00:46:09,759
但是请注意，我现在正在重复使用相同的路线，
But notice now I'm reusing the same route,

907
00:46:09,760 --> 00:46:13,370
我只是在逻辑上检查我的控制器代码，
and I'm just checking logically in my controller code,

908
00:46:13,369 --> 00:46:16,161
如果可以的话，如果该方法以get的形式出现，
if you will, well if the method came in as get,

909
00:46:16,161 --> 00:46:17,619
继续，只显示表格。
go ahead and just display the form.

910
00:46:17,619 --> 00:46:21,639
如果该方法是作为帖子发布的，请继续与用户打招呼。
If the method came in as post, go ahead and greet the user.

911
00:46:21,639 --> 00:46:23,109
现在为什么要这样做？
Now why is this going to work?

912
00:46:23,110 --> 00:46:26,140
事实证明，每当您访问Internet上的URL时，
Well it turns out, whenever you visit a URL on the internet,

913
00:46:26,139 --> 00:46:31,089
例如HTTP冒号斜杠，www.harvard.edu或yale.edu
like HTTP colon slash slash, www.harvard.edu or yale.edu

914
00:46:31,090 --> 00:46:36,280
或google.com，您一直都在进行获取请求。
or google.com, you have always been making get requests.

915
00:46:36,280 --> 00:46:39,520
实际上，回想一下上周我们查看这些示例HTTP请求时，
In fact, recall last week when we looked at those sample HTTP requests,

916
00:46:39,519 --> 00:46:41,919
和标题，我们上周所做的一切
and the headers, everything we did last week

917
00:46:41,920 --> 00:46:44,800
默认情况下，信封中包含关键字get。
had the keyword get by default in the envelope.

918
00:46:44,800 --> 00:46:48,370
因此，get与表单根本没有任何关系，
So get does not have anything fundamentally to do with forms,

919
00:46:48,369 --> 00:46:51,069
这实际上是默认的HTTP动词
it's actually the default HTTP verb that's

920
00:46:51,070 --> 00:46:53,680
每当您访问任何URL时都使用。
used whenever you just visit any URL.

921
00:46:53,679 --> 00:46:57,039
每当您访问网络上的URL时，默认情况下都会使用get。
Any time you visit a URL on the web you are using get by default.

922
00:46:57,039 --> 00:47:01,779
提交表单时，您可能会像我首先使用的那样使用get，
When you submit a form, you are potentially using get as I did first,

923
00:47:01,780 --> 00:47:05,530
或者您像我第二次那样使用帖子。
or you are using post as I did second.

924
00:47:05,530 --> 00:47:08,560
那么，这里的要点是什么？
So what's the takeaway here?

925
00:47:08,559 --> 00:47:12,099
好吧，让我继续，对我的表格进行一次更改。
Well let me go ahead and make one change to my form.

926
00:47:12,099 --> 00:47:15,299
我确实想通过邮寄方式提交。
I do want to submit via post.

927
00:47:15,300 --> 00:47:17,425
我将提交，尽管不再斜杠打招呼
I'm going to submit though no longer to slash greet

928
00:47:17,425 --> 00:47:19,610
但只是我的默认路线。
but just to my default route.

929
00:47:19,610 --> 00:47:23,730
如果我在这里做了所有事情，让我继续进行Flask run，
And if I did everything right here, let me go ahead and run Flask run,

930
00:47:23,730 --> 00:47:30,850
让我像以前一样打开我的URL，现在我处于斜线位置。
let me open up my URL as before, and I'm at my slash route.

931
00:47:30,849 --> 00:47:35,439
请注意，如果我查看自己的页面源代码，该操作也将以斜线表示，
Notice if I view my page source, the action is going to be slash also,

932
00:47:35,440 --> 00:47:39,430
所以我有点对两个不同的功能使用相同的路由。
so I'm sort of using the same route for two different pieces of functionality.

933
00:47:39,429 --> 00:47:43,719
让我输入我的名字，单击“提交”，瞧，效果很好。
Let me type in my name, click Submit, and voila, amazingly, it worked.

934
00:47:43,719 --> 00:47:46,539
您好，大卫，但我的路线没有改变。
Hello, David, but my route has not changed.

935
00:47:46,539 --> 00:47:48,679
现在，为什么这为什么有用呢？
Now, why is this why is this useful?

936
00:47:48,679 --> 00:47:49,587
可能会或可能不会。
It may or may not be.

937
00:47:49,588 --> 00:47:52,630
这就是您现在拥有的能力，因为如果您可以表达自己
It's just the capability you now have because if you can express yourself

938
00:47:52,630 --> 00:47:56,410
在Python中以编程方式可以区分两个动词
programmatically in Python, you can distinguish between the two verbs

939
00:47:56,409 --> 00:48:00,579
获取和发布传入的HTTP请求中的内容，如果有的话
get and post that are inside of your incoming HTTP request, and if anything

940
00:48:00,579 --> 00:48:04,569
这只是意味着您不需要一遍就通过多条路线
this just means you don't need twice as many routes just to have one thing pass

941
00:48:04,570 --> 00:48:06,550
到另一个，事实证明还有
to another, and it turns out there's also

942
00:48:06,550 --> 00:48:11,350
其他功能源自能够重用相同的路线。
other features that derive from just being able to reuse the same routes.

943
00:48:11,349 --> 00:48:13,629
但是在此之后还有更多。
But more on that down the road.

944
00:48:13,630 --> 00:48:19,310
好吧，关于打招呼，Flask或这些路线有什么疑问吗？
All right, any questions then on saying hello, Flask, or these routes?

945
00:48:19,309 --> 00:48:19,809
不？
No?

946
00:48:19,809 --> 00:48:20,359
好的。
All right.

947
00:48:20,360 --> 00:48:23,590
就像这里的预告片一样，这是一个屏幕截图
Well just as a teaser here, here is a screenshot

948
00:48:23,590 --> 00:48:26,860
几乎是我当时制作的第一个Web应用程序。
of pretty much the very first web application I made back in the day.

949
00:48:26,860 --> 00:48:29,860
当我是一名本科生时，我参与了壁内运动，
When I was an undergraduate, I got involved in intramural sports,

950
00:48:29,860 --> 00:48:32,920
不是运动意义上的，而是计算机科学意义上的。
not in an athletic sense but in a computer science sense.

951
00:48:32,920 --> 00:48:36,790
我自愿为哈佛大学新生建立了第一个网站
I volunteered to actually build the very first website for Harvard's freshman

952
00:48:36,789 --> 00:48:39,699
壁内运动程序，也称为Frosh IM。
intramural sports program, otherwise known as Frosh IMs.

953
00:48:39,699 --> 00:48:43,749
当时我们用纸写下您的名字并通过电子邮件发送
At the time we were using paper to write your names down on and email

954
00:48:43,750 --> 00:48:45,910
解决您的运动选择，
addresses down on, your choices of sports,

955
00:48:45,909 --> 00:48:49,149
我们将走过哈佛中院（哈佛中部的草地），
we would walk across Harvard Yard, the grassy area in the middle of Harvard,

956
00:48:49,150 --> 00:48:52,210
将其滑动到检察官或驻地顾问之一的门下，
slide it under the door of one of the proctors or resident advisors,

957
00:48:52,210 --> 00:48:53,980
瞧，我们已经注册了体育比赛。
and voila, we were registered for sports.

958
00:48:53,980 --> 00:48:55,695
但是没有网站。
But there was no website.

959
00:48:55,695 --> 00:48:57,820
有一个互联网，但还没有网站。
There was an internet but there was no website yet.

960
00:48:57,820 --> 00:48:59,140
所以这是90年代后期。
So this was late 90s.

961
00:48:59,139 --> 00:49:01,509
所以我认为实施起来会很有趣
So I thought it would be fun to implement

962
00:49:01,510 --> 00:49:03,850
相同的想法，用于注册
that same idea of a piece of paper for registering

963
00:49:03,849 --> 00:49:05,749
在网络浏览器中进行体育运动。
for sports in a web browser.

964
00:49:05,750 --> 00:49:10,690
现在，不幸的是，我当时只了解C，也许还了解一些C ++。
And now unfortunately I only knew C and maybe some C++ at the time and a couple

965
00:49:10,690 --> 00:49:12,400
来自其他CS课程的其他语言。
of other languages from other CS courses.

966
00:49:12,400 --> 00:49:14,050
我对网络编程一无所知。
I knew nothing about web programming.

967
00:49:14,050 --> 00:49:16,840
所以我自学了如何在很多程序的帮助下进行网络编程
So I taught myself how to web program with the help of lots

968
00:49:16,840 --> 00:49:18,490
来自朋友的问题和答案。
of questions and answers from friends.

969
00:49:18,489 --> 00:49:22,149
我碰巧使用了一种叫做Perl的语言，最后结果
I happened to use a language called Perl, and the result at the end

970
00:49:22,150 --> 00:49:26,200
这个令人恐惧的设计是这里有很多菜单选项
was this frightening design here with lots of menu options

971
00:49:26,199 --> 00:49:28,929
在这里使用JavaScript和一些图片的顶部
up top that use JavaScript and some images here

972
00:49:28,929 --> 00:49:32,169
和一些CSV文件，这些文件基本上在后端
and some CSV files essentially on the backend that

973
00:49:32,170 --> 00:49:33,850
存储了所有注册数据。
stored all of the registration data.

974
00:49:33,849 --> 00:49:36,229
我当时对数据库一无所知。
I knew nothing about databases at the time.

975
00:49:36,230 --> 00:49:38,738
但这是我第一次涉足网络编程。
But it was my first foray into web programming.

976
00:49:38,737 --> 00:49:40,779
我们第一次休息后会做些什么
And what we thought we'd do after our first break

977
00:49:40,780 --> 00:49:47,170
这是使用HTML，CSS，
here is reimplement the idea of a registration system using HTML, CSS,

978
00:49:47,170 --> 00:49:51,883
和Python以及最终的SQL重新实现相同的想法，
and Python and ultimately SQL to reimplement the same idea,

979
00:49:51,882 --> 00:49:53,799
今天对美学的担心就更少了。
worrying even less today about the aesthetics.

980
00:49:53,800 --> 00:49:56,342
但是，让我们继续前进，在这里休息我们的前五分钟。
But let's go ahead and take our first five minute break here.

981
00:49:56,342 --> 00:49:57,860
当我们回到Frosh IM时。
And when we come back Frosh IMs.

982
00:49:57,860 --> 00:49:59,380
好吧，我们回来了。
All right, we are back.

983
00:49:59,380 --> 00:50:02,200
因此，当前的目标是实现最原始的功能
So the goal at hand is to implement the most primitive of features

984
00:50:02,199 --> 00:50:04,689
是我首先通过此Frosh IM实施的
that I first implemented via this Frosh IMs

985
00:50:04,690 --> 00:50:08,110
几年前的网站，允许学生注册体育比赛。
website years ago, that of allowing students to register for sports.

986
00:50:08,110 --> 00:50:11,290
并注册一项运动，让我们收集每个人的名字，也许
And to register for a sport, let's collect everyone's name and maybe

987
00:50:11,289 --> 00:50:13,427
他们想要注册的运动。
the sport for which they want to register.

988
00:50:13,427 --> 00:50:14,719
那么我们该怎么做呢？
So how are we going to do this?

989
00:50:14,719 --> 00:50:19,119
好吧，让我继续进行操作，仅复制我们之前的示例中的布局
Well, let me go ahead and copy just the layout from our previous hello examples

990
00:50:19,119 --> 00:50:20,919
只是因为它是非常好的样板。
just because it's pretty good boilerplate.

991
00:50:20,920 --> 00:50:22,670
而且我实际上将进行一种更改。
And I'm actually going to make one change.

992
00:50:22,670 --> 00:50:27,340
事实证明，使您的网站非常适合移动设备非常容易
It turns out that it's very easy to make your website pretty mobile friendly

993
00:50:27,340 --> 00:50:29,290
只需添加几行代码即可。
just by adding a couple of lines of code.

994
00:50:29,289 --> 00:50:32,889
特别是在这里，我将继续添加一个名为meta的标签。
In particular in my head here I'm going to go ahead and add a tag called meta.

995
00:50:32,889 --> 00:50:34,689
它会有一个视口的名称。
It's going to have a name of viewport.

996
00:50:34,690 --> 00:50:36,910
视口是指矩形区域
Viewport refers to the rectangular region

997
00:50:36,909 --> 00:50:40,059
定义了大多数Web浏览器的用户界面。
that defines most of your web browsers' user interface.

998
00:50:40,059 --> 00:50:43,839
此meta标签的内容将是初始比例
The content of this meta tag is going to be initial scale

999
00:50:43,840 --> 00:50:47,830
等于1，宽度等于设备宽度。
equals 1 and width equals device width.

1000
00:50:47,829 --> 00:50:50,379
最后一个关键字有点神奇。
And this last keyword is kind of the magic.

1001
00:50:50,380 --> 00:50:53,200
这个咒语在本质上告诉浏览器
This incantation here essentially tells the browser

1002
00:50:53,199 --> 00:50:57,324
无论用户是什么，用户设备的宽度如何
whatever the user's, whatever the width of the user's device

1003
00:50:57,324 --> 00:51:00,489
是，假设那是我网页的最大宽度，
is, assume that that's the maximum width for my web page,

1004
00:51:00,489 --> 00:51:02,919
它会自动缩放我的字体大小
and it's going to scale my font sizes automatically

1005
00:51:02,920 --> 00:51:06,790
根据您使用的是笔记本电脑，台式机还是iPhone，向上或向下
up or down based on whether you're using a laptop or desktop or iPhone

1006
00:51:06,789 --> 00:51:09,104
或Android手机或其他设备。
or Android phone or something else altogether.

1007
00:51:09,105 --> 00:51:11,980
您还需要做其他事情来使您的网站具有响应能力，
There's other things you need to do to make your websites responsive,

1008
00:51:11,980 --> 00:51:15,200
可以这么说，为此使用Bootstrap之类的库会很有帮助，
so to speak, and it's helpful to use libraries like Bootstrap for that,

1009
00:51:15,199 --> 00:51:18,309
但这至少可以帮助解决至少字体大小的问题。
But this minimally helps at least address issues of font size.

1010
00:51:18,309 --> 00:51:20,719
因此，我也将在这里开始进行介绍。
So I'll start including that here as well.

1011
00:51:20,719 --> 00:51:24,879
现在让我进入我的应用程序点py，不幸的是对于Frosh IM来说
Now let me go into my application dot py, which unfortunately for Frosh IMs

1012
00:51:24,880 --> 00:51:25,540
是空的。
is empty.

1013
00:51:25,539 --> 00:51:29,769
实际上，很明显，在我创建的中断中，应用程序点py为空，
And indeed to be clear, over the break I created, application dot py is empty,

1014
00:51:29,769 --> 00:51:32,409
模板目录，在我的模板目录中
a templates directory, and inside my templates directory

1015
00:51:32,409 --> 00:51:34,089
只是那个布局点HTML。
is just that layout dot HTML.

1016
00:51:34,090 --> 00:51:36,380
因此，我们需要在此处共同完成一些工作。
So we've got a little bit of work to do here together.

1017
00:51:36,380 --> 00:51:39,370
因此，让我们开始构建此应用程序。
So let's go ahead and start building out this application.

1018
00:51:39,369 --> 00:51:44,769
让我继续从Flask导入Flask函数本身
Let me go ahead and import from Flask the Flask function itself

1019
00:51:44,769 --> 00:51:47,029
加上我敢打赌我们需要的渲染模板，
plus render template which I bet we're going to need,

1020
00:51:47,030 --> 00:51:49,738
然后还要求我们可能也需要它。
and then also request which we're probably going to need as well.

1021
00:51:49,737 --> 00:51:54,069
让我使用以下Flask函数初始化应用程序
Let me initialize the application with this Flask function using

1022
00:51:54,070 --> 00:51:55,370
下划线下划线名称。
underscore underscore name.

1023
00:51:55,369 --> 00:51:57,469
再说一遍，这实际上就是我们更早开始的方式。
So again, that's literally how we began earlier.

1024
00:51:57,469 --> 00:51:59,927
让我们继续，开始定义我们的第一个路线。
And let's just go ahead and start defining our first route.

1025
00:51:59,927 --> 00:52:02,116
应用程式点路径，引用反引号斜线。
App dot route, quote unquote slash.

1026
00:52:02,117 --> 00:52:05,200
让我定义一个叫做index的函数，但是我可以再次调用它，
Let me define a function called index, but again I could call it anything,

1027
00:52:05,199 --> 00:52:06,991
但这是一个很好的约定，只是为了
but that's good convention, and just to get

1028
00:52:06,992 --> 00:52:12,880
我开始我真的可以很快地做到这一点，并说返回“要做的事”，
me started I could really do this quickly and say return "to do,"

1029
00:52:12,880 --> 00:52:15,220
但是我现在对自己的能力很有信心
but I'm kind of confident now in my ability

1030
00:52:15,219 --> 00:52:18,619
至少使用渲染模板。
to at least use render template.

1031
00:52:18,619 --> 00:52:21,309
因此，至少让我们渲染一个称为索引点HTML的模板
So let's at least render a template called index dot HTML

1032
00:52:21,309 --> 00:52:23,929
显然还不存在。
that admittedly does not yet exist.

1033
00:52:23,929 --> 00:52:25,059
因此，让它存在。
So let's make it exist.

1034
00:52:25,059 --> 00:52:29,836
让我继续创建一个名为索引点HTML的新文件。
Let me go ahead and create a new file called index dot HTML.

1035
00:52:29,836 --> 00:52:31,669
再说一次，我可以随便叫这个
And again I could call this whatever I want,

1036
00:52:31,670 --> 00:52:33,560
但是如果这是我的默认路线，
but if this is going to be my default route,

1037
00:52:33,559 --> 00:52:36,319
我不妨将我的默认页面称为最常见的默认页面
I might as well call my default page the most common default

1038
00:52:36,320 --> 00:52:38,360
名称，即索引点HTML。
name, which is index dot HTML.

1039
00:52:38,360 --> 00:52:41,750
让我将其存储在Frosh IMs文件夹和模板文件夹中
Let me store it in my Frosh IMs folder and my templates folder

1040
00:52:41,750 --> 00:52:43,879
以便将其放置在正确的位置。
so that it's in the proper place.

1041
00:52:43,880 --> 00:52:49,730
在这里，让我继续说，这扩展了我的布局点HTML。
In here, let me go ahead and say that this extends my layout dot HTML.

1042
00:52:49,730 --> 00:52:54,020
然后，在这里，我说我的身体将是这里的任何东西，
And then down here let me say my body block will be whatever's in here,

1043
00:52:54,019 --> 00:52:56,779
然后我的端块将其关闭。
and then my end block will close that.

1044
00:52:56,780 --> 00:52:58,800
在这里，我现在有点不舒服
In here, now I'm feeling a little uncomfortable

1045
00:52:58,800 --> 00:53:01,550
我已经写了多少代码，所以让我们在那里做一个“要做的事情”，
with how much code I've written so let's just put a "to do" there,

1046
00:53:01,550 --> 00:53:03,342
并确保整个过程都能正常进行。
and let's make sure this whole thing works.

1047
00:53:03,342 --> 00:53:08,400
因此，让我返回目录，进行Flask运行，然后输入。
So let me go back into my directory, do Flask run, enter.

1048
00:53:08,400 --> 00:53:12,170
好吧，继续并打开此浏览器选项卡，它只是说“要做”。
All right, go ahead and open up this browser tab, and it just says, "to do."

1049
00:53:12,170 --> 00:53:13,920
所以我认为我处在一个好地方，确实
So I think I'm in a good place, and indeed

1050
00:53:13,920 --> 00:53:16,570
如果我查看页面源代码，则会看到完整的网页，
if I view page source I see a full fledged web page,

1051
00:53:16,570 --> 00:53:19,718
包括我们刚刚添加的meta标签，但是在这里要做的事情很多。
including that meta tag we just added, but with just a big to do here.

1052
00:53:19,717 --> 00:53:20,759
现在我想做什么？
Now what do I want to do?

1053
00:53:20,760 --> 00:53:22,510
我想做的最大的事就是
The biggest thing I want to do is actually

1054
00:53:22,510 --> 00:53:24,900
让学生能够注册一项运动。
have students be able to register for a sport.

1055
00:53:24,900 --> 00:53:28,810
因此，让我们继续前进，并为自己定义一个HTML表单来执行此操作。
So let's go ahead and define ourselves an HTML form via which to do this.

1056
00:53:28,809 --> 00:53:33,819
因此，在索引点HTML模板的主体块内部。
So inside of my body block in my index dot HTML template.

1057
00:53:33,820 --> 00:53:37,770
让我们继续，首先将其称为带有H1标签的注册页面，
Let's go ahead and first just call this the registration page with an H1 tag,

1058
00:53:37,769 --> 00:53:39,839
然后让我继续，给自己一个表格。
and then let me go ahead and give myself a form.

1059
00:53:39,840 --> 00:53:43,530
我的意思是，行动就是极限，让我们保持简单
The action will be, I mean, the sky's the limit, let's keep it simple

1060
00:53:43,530 --> 00:53:46,200
只做斜线注册而不是使事情复杂化
and just do slash register rather than complicate things

1061
00:53:46,199 --> 00:53:48,279
再次使用相同的路线。
by using the same route again.

1062
00:53:48,280 --> 00:53:52,260
让我们将事情保密一些，让我们来发布一种方法
Let's keep things a little private, so let's do a method of post

1063
00:53:52,260 --> 00:53:55,290
这样我的室友不知道我正在注册什么运动
so that my roommates don't know what sports I'm registering for or not

1064
00:53:55,289 --> 00:53:56,332
正在注册。
registering for.

1065
00:53:56,333 --> 00:53:59,000
然后在这里让我们继续询问用户的姓名。
And then in here let's go ahead and ask the user for their name.

1066
00:53:59,000 --> 00:54:02,729
因此，让我们继续进行输入，名称等于名称，
So let's go ahead and do an input, name equals name,

1067
00:54:02,730 --> 00:54:07,830
此输入的名称将是人为的名称。
where the name of this input is going to be name in the human sense.

1068
00:54:07,829 --> 00:54:12,399
该框的类型将是文本，让我们添加一些幻想
The type of that box will be text, and let's add some of the fanciness

1069
00:54:12,400 --> 00:54:12,930
像之前一样。
as before.

1070
00:54:12,929 --> 00:54:16,469
自动完成功能等于关闭或关闭。
Autocomplete equals off, or oof.

1071
00:54:16,469 --> 00:54:22,469
自动对焦，喊声，自动对焦，然后在此处放置一个占位符
Autofocus, whoops, autofocus, and then over here a placeholder

1072
00:54:22,469 --> 00:54:25,099
这样它就是名字的自我描述。
so that it's self-describing of name.

1073
00:54:25,099 --> 00:54:25,599
好的。
All right.

1074
00:54:25,599 --> 00:54:28,979
然后让我继续，给自己一个提交按钮，
And then let me go ahead and give myself a submit button,

1075
00:54:28,980 --> 00:54:34,290
输入类型等于Submit，然后添加一个register值，
input type equals submit, and let's add a value of register,

1076
00:54:34,289 --> 00:54:37,199
只是为了使网站更加人性化。
just to make the website a little more user friendly.

1077
00:54:37,199 --> 00:54:39,309
让我继续并停止我的服务器并重新启动它
Let me go ahead and stop my server and restart it

1078
00:54:39,309 --> 00:54:41,729
所以我可以重新加载所有这些更改，然后让
so I can reload all of these changes, and let

1079
00:54:41,730 --> 00:54:45,840
我再转到该URL，瞧，我们有了表格的开头。
me go over to this URL again, and voila, we have the beginnings of a form.

1080
00:54:45,840 --> 00:54:48,520
它只是在问名字，所以它不存在。
It's only asking for name, so it's not quite there.

1081
00:54:48,519 --> 00:54:50,439
因此，我还需要参加一些运动。
So I need to ask for some sports as well.

1082
00:54:50,440 --> 00:54:51,940
现在有很多方法可以做到这一点，
Now there's a bunch of ways we can do this,

1083
00:54:51,940 --> 00:54:54,482
即使您可能还没有在CS50中看到它们，
and even though you might not have seen them all yet in CS50,

1084
00:54:54,481 --> 00:54:57,989
您访问网站时肯定在实际的互联网上使用了它们。
you've certainly used them on the actual internet when you visiting websites.

1085
00:54:57,989 --> 00:54:59,699
因此，首先让我们做一个下拉菜单。
So let's do a drop down menu initially.

1086
00:54:59,699 --> 00:55:03,329
让我执行所谓的“选择”菜单，因为您选择了一个选项，即名称
Let me do what's called the select menu because you select an option, the name

1087
00:55:03,329 --> 00:55:05,159
其中将是“运动”。
of which is going to be "sport."

1088
00:55:05,159 --> 00:55:07,276
如果您阅读了文档，请选择菜单
Select menus if you read the documentation

1089
00:55:07,277 --> 00:55:09,360
或按照在线教程进行操作，您会发现他们
or follow an online tutorial, you'll see that they

1090
00:55:09,360 --> 00:55:11,580
必须有被称为期权的孩子。
must have children called options.

1091
00:55:11,579 --> 00:55:15,069
孩子们必须有价值观。
And children must have values.

1092
00:55:15,070 --> 00:55:17,610
例如，让我们使用
So for instance, let's use a value of how

1093
00:55:17,610 --> 00:55:20,940
关于“躲避球”，这是一种常见的壁内运动。
about "dodgeball," which is a common intramural sport.

1094
00:55:20,940 --> 00:55:24,150
然后在选项标签中，您实际上
And then inside of the option tag, you actually

1095
00:55:24,150 --> 00:55:27,610
必须说，就像链接一样，人类应该看到的东西。
have to say, much like a link, what the human should see.

1096
00:55:27,610 --> 00:55:30,495
所以我也要在这里多余地说躲避球。
So I'm just going to redundantly say dodgeball here too.

1097
00:55:30,494 --> 00:55:33,119
让我继续前进，让我的生活更轻松一些。
And let me go ahead and make that my life a little easier here.

1098
00:55:33,119 --> 00:55:37,499
让我“做”，“做”，只是为了加快工作速度。
Let me, "to do," "to do," just to speed things up.

1099
00:55:37,500 --> 00:55:39,850
让我在这里做一些复制粘贴。
Let me do a little bit of copy paste here.

1100
00:55:39,849 --> 00:55:46,919
然后我们将其更改为旗标足球，旗标足球。
And how about we change this one to flag football, flag football.

1101
00:55:46,920 --> 00:55:50,412
在这里，让我们做足球。
Over here let's do, say, soccer and soccer.

1102
00:55:50,411 --> 00:55:53,369
同样，就像链接一样，可能存在这种双重性，相同的价值，
And again just like links there might be this duality, the same values,

1103
00:55:53,369 --> 00:55:55,222
但它们不必相同。
but they don't have to be the same.

1104
00:55:55,222 --> 00:55:56,639
但就目前而言，我们将使其保持简单。
But for now, we'll keep it simple.

1105
00:55:56,639 --> 00:55:58,169
这就是计算机将看到的内容。
This is what the computer will see.

1106
00:55:58,170 --> 00:56:00,450
这就是人类会看到的。
This is what the human will see.

1107
00:56:00,449 --> 00:56:04,649
然后在这里，我们将其称为终极飞盘，在这里
And then down here we'll call this ultimate Frisbee and here

1108
00:56:04,650 --> 00:56:07,980
同样的东西，终极飞盘。
the same thing, ultimate Frisbee.

1109
00:56:07,980 --> 00:56:10,990
好的，现在我有了一个正常工作的下拉菜单。
OK, so now I have a working drop down menu.

1110
00:56:10,989 --> 00:56:15,299
因此，让我继续并通过重新启动服务器来证明一切，
So let me go ahead and prove as much by restarting my server,

1111
00:56:15,300 --> 00:56:18,000
访问我的相同网址，瞧。
visiting my same URL, and voila.

1112
00:56:18,000 --> 00:56:21,779
用户界面有点丑陋，绝对是极简主义，
The user interface is kind of ugly, definitely very minimalist,

1113
00:56:21,780 --> 00:56:25,275
但是如果我现在输入我的名字David，请注意默认情况下躲避球
but if I now type in my name David, notice that by default dodgeball

1114
00:56:25,275 --> 00:56:28,965
之所以选择，是因为应该选择其中一个选项，但我实际上可以解决该问题。
is selected because one of those options should be, but I can actually fix that.

1115
00:56:28,965 --> 00:56:30,840
让我，我不喜欢我强迫所有人的方式
Let me, I don't like how I'm forcing everyone

1116
00:56:30,840 --> 00:56:32,298
认为他们必须做躲避球。
to think they have to do dodgeball.

1117
00:56:32,297 --> 00:56:35,769
让我在这里做一个选择，例如使用一个空值。
Let me do an option here with an empty value for instance.

1118
00:56:35,769 --> 00:56:38,159
我什至可以在这里说些什么
And I can even say something up here, for instance,

1119
00:56:38,159 --> 00:56:42,649
就像我们只是说它是什么，体育，所以没有价值。
like let's just say what it is, sports, so, with no value.

1120
00:56:42,650 --> 00:56:45,030
因此，这不是实际有效的选择。
So it's not an actual valid option.

1121
00:56:45,030 --> 00:56:46,920
让我继续，现在打开我的URL。
Let me go ahead and open my URL now.

1122
00:56:46,920 --> 00:56:49,360
好的，现在我在下拉菜单中也看到了运动。
OK, so now I see sport in the dropdown too.

1123
00:56:49,360 --> 00:56:54,570
David，运动，好吧，您可以注册运动有点奇怪。
So David, sport, OK, it's a little weird that you can register for sports.

1124
00:56:54,570 --> 00:56:55,770
那不是真的。
That's not really a thing.

1125
00:56:55,769 --> 00:56:57,369
因此，让我修复该问题。
So let me fix that.

1126
00:56:57,369 --> 00:57:00,239
事实证明，如果您阅读了有关选择菜单的文档，
And it turns out if you read the documentation for a select menu,

1127
00:57:00,239 --> 00:57:07,779
您实际上可以禁用该选项，也可以默认选择它。
you can actually disable the option and also, let's say, select it by default.

1128
00:57:07,780 --> 00:57:09,780
这些只是您的其他属性
So these are just additional attributes that you

1129
00:57:09,780 --> 00:57:12,840
会在文档中发现选项标签
would discover in the documentation for the option tag that

1130
00:57:12,840 --> 00:57:16,500
现在让我使用户界面更加健壮，以便用户
now let me make the user interface a little more robust just so that users

1131
00:57:16,500 --> 00:57:18,509
没有注册“体育”。
aren't registering for "sport."

1132
00:57:18,510 --> 00:57:22,320
让我继续做David，现在注意，默认情况下，运动是选中的，
Let me go ahead and do David, and now notice, sport is selected by default,

1133
00:57:22,320 --> 00:57:23,160
但它变灰了。
but it's grayed out.

1134
00:57:23,159 --> 00:57:24,929
它不再是有效值。
It's not a valid value anymore.

1135
00:57:24,929 --> 00:57:26,939
因此，对用户界面进行了较小的改进。
So minor user interface improvement.

1136
00:57:26,940 --> 00:57:28,373
躲避球听起来很棒。
Dodgeball sounds amazing.

1137
00:57:28,373 --> 00:57:31,540
那不是我今天的壁上运动，但显然是这些天。
That was not an intramural sport in my day, but it apparently is these days.

1138
00:57:31,539 --> 00:57:33,359
因此，让我继续进行注册。
So let me go ahead and register for this.

1139
00:57:33,360 --> 00:57:35,160
可以，但是当然找不到。
OK, but, of course, not found.

1140
00:57:35,159 --> 00:57:36,239
那为什么呢？
Well why is that?

1141
00:57:36,239 --> 00:57:38,249
好吧，如果我们看一下我刚到达的网址，
Well if we look at the URL I just ended up at,

1142
00:57:38,250 --> 00:57:41,069
我还没有实现我的斜线寄存器路由。
I've not implemented my slash register route yet.

1143
00:57:41,070 --> 00:57:42,270
好吧，让我们开始吧。
All right, so let's do that.

1144
00:57:42,269 --> 00:57:46,349
为此，我需要返回到应用程序点py，让我们继续
To do that, I need to go back into application dot py, and let's go ahead

1145
00:57:46,349 --> 00:57:47,789
并做一些注册骗术。
and do some registration trickery.

1146
00:57:47,789 --> 00:57:51,239
App点路由斜杠寄存器，我要定义
App dot routes slash register, I'm going to define

1147
00:57:51,239 --> 00:57:53,249
我不妨调用寄存器的功能，
a function that I might as well call register,

1148
00:57:53,250 --> 00:57:55,379
但我可以再次将其命名为我想要的任何东西。
but I could, again, call it anything I want.

1149
00:57:55,380 --> 00:57:57,660
在此功能中，让我们一开始保持简单。
And in this function let's keep it simple initially.

1150
00:57:57,659 --> 00:58:01,889
让我们继续并返回一个名为成功的模板
Let's just go ahead and return a template called success

1151
00:58:01,889 --> 00:58:04,829
并假设注册成功。
and just presume that the registration was successful.

1152
00:58:04,829 --> 00:58:10,189
实际上，让我继续创建一个名为
And in fact, let me go ahead and create a new file called

1153
00:58:10,190 --> 00:58:15,140
Frosh IMs模板目录中的成功点HTML，
success dot HTML in the Frosh IMs templates directory,

1154
00:58:15,139 --> 00:58:19,639
让我确保它也扩展了布局点HTML，
and let me make sure that also extends layout dot HTML,

1155
00:58:19,639 --> 00:58:24,589
并且它具有块体，并且在良好的情况下，还具有端块。
and that it has a block body, and, for good measure, end block.

1156
00:58:24,590 --> 00:58:27,410
然后在这里，我现在将其保持如此简单。
And then down here, I'm going to keep this so simple for now.

1157
00:58:27,409 --> 00:58:29,787
您已注册，感叹号。
You are registered, exclamation point.

1158
00:58:29,788 --> 00:58:31,580
没有真正为任何人注册任何东西，
Not really registering anyone for anything,

1159
00:58:31,579 --> 00:58:33,389
但我要宣称他们是。
but I'm going to claim that they were.

1160
00:58:33,389 --> 00:58:39,849
现在，如果我重新运行应用程序，然后回到此处的表单，
So now if I rerun my application, and I go back to my form here,

1161
00:58:39,849 --> 00:58:46,029
现在我重新注册David进行dodgeball，然后单击“注册”，呵呵。
and I now re-register David for dodgeball and click Register, huh.

1162
00:58:46,030 --> 00:58:47,650
现在是一个错误。
Now it's a bug.

1163
00:58:47,650 --> 00:58:51,520
让我在这里暂停一下，只是看看各部分是否装配在一起。
And let me pause here just to see if the pieces are fitting together.

1164
00:58:51,519 --> 00:58:55,959
即使我在斜线寄存器中，方法也不允许。
Method not allowed, even though I'm at slash register.

1165
00:58:55,960 --> 00:58:57,730
有关如何解决此问题的任何想法？
Any thoughts on how to fix this?

1166
00:58:57,730 --> 00:58:59,590
方法不被允许？
Method not allowed?

1167
00:58:59,590 --> 00:59:01,930
注意，您甚至可以在我的终端窗口中看到
And notice, you can even see in my terminal window

1168
00:59:01,929 --> 00:59:09,079
以红色显示错误消息，状态码405，表示不允许使用方法，
in red an error message, status code 405 which means method not allowed,

1169
00:59:09,079 --> 00:59:12,129
这是罕见的，但我确实搞砸了。
which is a rare one but I indeed screwed up.

1170
00:59:12,130 --> 00:59:14,890
是的，去圣地亚哥吗？
Yeah, over to Santiago?

1171
00:59:14,889 --> 00:59:16,839
圣地亚哥：是的，我认为当您定义
SANTIAGO: Yeah, I think that when you defined

1172
00:59:16,840 --> 00:59:21,210
用于读取或注册的应用程序点路由，[音频不清晰]
the app dot route for read, or register, [INAUDIBLE]

1173
00:59:21,210 --> 00:59:24,252
您未指定发布方法。
you didn't specify a methods is post.

1174
00:59:24,251 --> 00:59:26,709
DAVID J. MALAN：是的，因此默认情况下，我的方法都是get，
DAVID J. MALAN: Yeah, so by default my methods are all get,

1175
00:59:26,710 --> 00:59:28,870
但是如果出于隐私考虑，我想使用帖子，
but if I want to use post for privacy's sake,

1176
00:59:28,869 --> 00:59:32,109
回想一下，我只需要告诉Flask我要您支持的方法
recall that I just have to tell Flask that the methods I want you to support

1177
00:59:32,110 --> 00:59:36,100
这条路线是动词或方法的列表，
for this route are this list of verbs or methods,

1178
00:59:36,099 --> 00:59:39,206
并且该列表的大小为1，其中仅包含关键字post。
and that list is going to be of size one with just the keyword post in it.

1179
00:59:39,206 --> 00:59:42,039
再说一遍，当您遇到这些问题时，您绝对会
So again, when you encounter these issues, which you absolutely will

1180
00:59:42,039 --> 00:59:43,689
第一次进行所有这些操作时，
when doing all of this for the first time,

1181
00:59:43,690 --> 00:59:46,720
不必过多担心错误消息的细节，而只需担心想法。
don't worry so much about the specifics of the error message, but the ideas.

1182
00:59:46,719 --> 00:59:47,499
好像出了什么问题？
Like what's gone wrong?

1183
00:59:47,500 --> 00:59:48,000
方法。
Method.

1184
00:59:48,000 --> 00:59:48,969
不允许的方法。
Method not allowed.

1185
00:59:48,969 --> 00:59:49,869
那是什么意思呢？
What could that mean?

1186
00:59:49,869 --> 00:59:52,569
我们谈论的唯一方法是获取和发布，
The only methods we've talked about are get and post,

1187
00:59:52,570 --> 00:59:54,220
所以也许那里有一些相关的东西。
so maybe it's something related there.

1188
00:59:54,219 --> 00:59:56,499
好吧，有问题的路线是斜线寄存器，
Well the route in question was slash register,

1189
00:59:56,500 --> 00:59:59,229
所以也许这与我的报名途径有关，
so maybe it's something related to my register route,

1190
00:59:59,230 --> 01:00:03,430
看看这些线索是否可以引导您找到像圣地亚哥这样的解决方案
and see if those kinds of clues can lead you to a solution like Santiago

1191
01:00:03,429 --> 01:00:04,299
刚刚提出。
just proposed.

1192
01:00:04,300 --> 01:00:07,030
让我继续并重新启动服务器。
Let me go ahead and restart my server.

1193
01:00:07,030 --> 01:00:10,390
让我继续并重新加载表格，再次输入David，
Let me go ahead and reload my form, type in David again,

1194
01:00:10,389 --> 01:00:14,569
我要选择躲避球，注册，瞧，您已注册。
I'm going to select dodgeball, register, voila, you are registered.

1195
01:00:14,570 --> 01:00:15,070
好的。
All right.

1196
01:00:15,070 --> 01:00:16,778
我实际上没有注册任何东西，
I'm not actually registered for anything,

1197
01:00:16,777 --> 01:00:20,799
但是我觉得现在仍然有错检查错误的机会。
but I feel like there's still a missed opportunity for error checking now.

1198
01:00:20,800 --> 01:00:23,800
实际上，让我回到表格上，而不是键入David
In fact, let me go back to my form, not type David

1199
01:00:23,800 --> 01:00:26,080
而不选择dodgeball，然后单击注册。
and not select dodgeball and click Register.

1200
01:00:26,079 --> 01:00:27,339
好吧，这有点愚蠢。
Well this is kind of stupid.

1201
01:00:27,340 --> 01:00:30,580
就像它的主张一样，它说我已经注册，即使我只键入自己的名字，
Like its claim, it's saying I'm registered even if I only type my name,

1202
01:00:30,579 --> 01:00:32,357
没有运动，您已经注册。
no sport, you are registered.

1203
01:00:32,358 --> 01:00:34,900
因此，这里错过了一些进行错误检查的机会。
So there's a missed opportunity here for some error checking.

1204
01:00:34,900 --> 01:00:36,760
因此，至少让我们添加一下。
So let's at least go in and add this.

1205
01:00:36,760 --> 01:00:38,650
让我们继续做这样的事情。
Let's go ahead and do something like this.

1206
01:00:38,650 --> 01:00:42,550
如果不要求点形式点得到怎么办
How about if not request dot form dot get

1207
01:00:42,550 --> 01:00:51,640
名称或要求点形式点获得运动，否则，
name or request dot form dot get sports, or not that,

1208
01:00:51,639 --> 01:00:56,859
然后让我继续并返回渲染模板失败点HTML，
then let me go ahead and return render template failure dot HTML,

1209
01:00:56,860 --> 01:00:59,592
否则，我将返回成功点HTML。
otherwise I'll return success dot HTML.

1210
01:00:59,592 --> 01:01:00,550
所以，现在让我尝试一下。
So let me try this now.

1211
01:01:00,550 --> 01:01:02,560
让我重新运行服务器，Flask运行。
Let me rerun the server, Flask run.

1212
01:01:02,559 --> 01:01:05,109
让我继续并重新加载表格，不对表格进行任何更改，
Let me go ahead and reload my form, no changes to the form,

1213
01:01:05,110 --> 01:01:07,660
但是现在，如果我不合作，然后单击“注册”，
but now if I don't cooperate and I click Register,

1214
01:01:07,659 --> 01:01:09,859
好的，现在真的发生了不好的事情。
OK, now really bad things are happening.

1215
01:01:09,860 --> 01:01:11,290
这是这500个错误之一。
This is one of those 500 errors.

1216
01:01:11,289 --> 01:01:12,579
让我们看看我搞砸了。
Let's see where I screwed up.

1217
01:01:12,579 --> 01:01:16,449
内部服务器错误和后续段落的描述性不是很高。
Internal server error and the subsequent paragraph are not very descriptive.

1218
01:01:16,449 --> 01:01:20,559
但是，如果我进入终端窗口，这是我的例外
But if I go to my terminal window, here's my exception

1219
01:01:20,559 --> 01:01:23,739
Jinja 2例外，这是模板语言，
a Jinja 2 exception, that's the templating language,

1220
01:01:23,739 --> 01:01:26,159
找不到故障点HTML。
failure dot HTML is not found.

1221
01:01:26,159 --> 01:01:28,659
好吧，那只是因为我犯了一个愚蠢的错误，
All right, well that's just because I made a stupid mistake,

1222
01:01:28,659 --> 01:01:30,129
让我停止服务器。
so let me stop the server.

1223
01:01:30,130 --> 01:01:33,160
让我继续，现在就复制成功点HTML。
Let me go ahead and copy success dot HTML for now.

1224
01:01:33,159 --> 01:01:35,239
让我继续并将其粘贴到此处。
Let me go ahead and paste it in here.

1225
01:01:35,239 --> 01:01:37,389
我可能可以将其排除在外，但是我们
And I could probably factor this out, but we're

1226
01:01:37,389 --> 01:01:40,869
现在将其简化，并将此故障点称为HTML，
going to keep it simple for now and call this failure dot HTML,

1227
01:01:40,869 --> 01:01:44,589
将其放在Frosh IM模板中，保存。
put it in Frosh IMs templates, save it.

1228
01:01:44,590 --> 01:01:47,050
现在，让我重新运行服务器。
Now let me rerun my server.

1229
01:01:47,050 --> 01:01:48,550
现在让我回去。
Now let me go back.

1230
01:01:48,550 --> 01:01:53,020
让我尝试不输入任何内容，然后直接注册，好的，瞧。
Let me try not typing in anything and just registering, OK, voila.

1231
01:01:53,019 --> 01:01:54,639
现在，它实际上正在检查。
Now it's actually checking.

1232
01:01:54,639 --> 01:01:58,539
如果我回到这里，好吧，我不会输入一项运动，
And if I go back here, name, OK, I'll not type in a sport,

1233
01:01:58,539 --> 01:02:00,159
它仍然没有检查。
it's still not checking.

1234
01:02:00,159 --> 01:02:02,452
但是这里仍然存在这种黑客行为。
But there's still this kind of hack here.

1235
01:02:02,452 --> 01:02:05,619
您知道，您从上周回想起，如果您右键单击或控制点击
You know, you recall from last week that if you right click or control click

1236
01:02:05,619 --> 01:02:08,529
在任何网页上的任何内容上，您都可以对其进行检查
on anything in any web page, you can inspect it

1237
01:02:08,530 --> 01:02:10,840
在Chrome或您喜欢的浏览器中，
in Chrome or your preferred browser, and that

1238
01:02:10,840 --> 01:02:13,300
让您开始浏览HTML。
lets you start poking around the HTML.

1239
01:02:13,300 --> 01:02:16,000
看着这个，也许我有点不高兴
And watch this, maybe I'm a little bit upset

1240
01:02:16,000 --> 01:02:19,208
比方说，没有网球。
that there's no, let's say, tennis.

1241
01:02:19,208 --> 01:02:22,000
壁内运动项目不提供网球，但可以
Tennis is not offered by the intramural sports program, but darn it

1242
01:02:22,000 --> 01:02:23,530
我想注册这样的。
I want to register for such.

1243
01:02:23,530 --> 01:02:28,560
好吧，再次使用浏览器，没有什么可以阻止我前进，例如，
Well, again, using a browser, there's nothing stopping me from, for instance,

1244
01:02:28,559 --> 01:02:32,469
我不知道该怎么做，让我们将极限飞盘换成网球，
I don't know how to do this, let's change ultimate Frisbee to tennis,

1245
01:02:32,469 --> 01:02:36,669
并从字面上更改页面上的HTML，将其缩小，
and literally change the HTML on the page, zoom back out,

1246
01:02:36,670 --> 01:02:41,110
关闭检查员，哈哈，现在网球是哈佛的一项运动。
close the inspector, ha, ha, now tennis is a sport at Harvard.

1247
01:02:41,110 --> 01:02:42,640
所以，现在看我能做什么。
So now watch what I can do.

1248
01:02:42,639 --> 01:02:46,529
注册网球，输入我的名字David，voila，注册网球。
Register for tennis, type in my name David, voila, registered for tennis.

1249
01:02:46,530 --> 01:02:47,030
正确的？
Right?

1250
01:02:47,030 --> 01:02:48,985
我已经入侵了该网站。
I've hacked the website.

1251
01:02:48,985 --> 01:02:50,860
好吧，从某种意义上讲，我有点
All right, so in some sense I kind of sort of

1252
01:02:50,860 --> 01:02:52,433
这次已经入侵了该网站。
have hacked the website this time.

1253
01:02:52,432 --> 01:02:54,849
现在显然我对这些信息不做任何事情
Now obviously I'm not doing anything with this information

1254
01:02:54,849 --> 01:02:56,019
目前在服务器上。
on the server at the moment.

1255
01:02:56,019 --> 01:02:58,719
我只是盲目地说已注册或未注册。
I'm just blindly saying registered or not registered.

1256
01:02:58,719 --> 01:03:00,589
但是请注意我刚刚做了什么。
But notice what I've just done.

1257
01:03:00,590 --> 01:03:02,560
实际上，让我们真正注意到我做了什么。
In fact, let's really notice what I've done.

1258
01:03:02,559 --> 01:03:06,819
让我继续并再次检查页面，让我进入“网络”标签，
Let me go ahead and inspect the page again, let me go to my network tab,

1259
01:03:06,820 --> 01:03:11,020
让我重新提交此表格，然后看看这里发生了什么。
and let me resubmit this form, and watch what happens here.

1260
01:03:11,019 --> 01:03:16,781
让我回到这里，让我输入David，让我再次进行此快速修改，
Let me go back here, let me type in David, let me do this quick hack again,

1261
01:03:16,782 --> 01:03:18,490
让我继续前进，右键单击“体育”，
let me go ahead and right click on sport,

1262
01:03:18,489 --> 01:03:22,209
检查，让我摆脱极限飞盘并将其更改为网球
inspect, let me get rid of ultimate Frisbee and change this to tennis

1263
01:03:22,210 --> 01:03:25,930
再次，让我再次将其更改为网球，然后输入。
again, and let me change this to tennis again, enter.

1264
01:03:25,929 --> 01:03:30,249
现在，让我进入“网络”标签，从下拉菜单中选择“网球”，
Now let me go to my network tab, select tennis from the dropdown,

1265
01:03:30,250 --> 01:03:37,360
然后在这里，让我继续此处，然后单击“注册”。
and then down here, let me go ahead here and click Register.

1266
01:03:37,360 --> 01:03:39,130
注意这里发生了什么。
Notice what's going on down here.

1267
01:03:39,130 --> 01:03:42,800
与上周一样，您可以看到所有HTTP请求的列表。
Just like last week, you can see a list of all of the HTTP requests.

1268
01:03:42,800 --> 01:03:44,380
因此，让我们看一下斜杠寄存器。
So let's look at slash register.

1269
01:03:44,380 --> 01:03:52,240
现在让我放大所有这些内容并向下滚动到表单数据
Let me now zoom in on all of this and scroll down to the form data

1270
01:03:52,239 --> 01:03:55,179
上周我们没有看到，但是有职位要求。
which we didn't see last week but is there for post requests.

1271
01:03:55,179 --> 01:04:00,669
我已经从浏览器David和Tennis合法地发送到服务器。
I have legitimately sent from my browser David and tennis to the server.

1272
01:04:00,670 --> 01:04:03,688
程序员现在有责任确保自己
The onus is now on you, the programmer, to make sure

1273
01:04:03,688 --> 01:04:06,730
如果不是这样的话，您实际上不会让我注册网球
that you're not actually going to let me register for tennis if it is not

1274
01:04:06,730 --> 01:04:07,930
受支持的运动。
a supported sport.

1275
01:04:07,929 --> 01:04:10,119
因此，现在需要进行更多的错误检查。
So now there's more error checking necessary.

1276
01:04:10,119 --> 01:04:14,416
仅仅相信用户输入了姓名和运动是不够的。
It's not sufficient to just trust that the user typed in a name and a sport.

1277
01:04:14,416 --> 01:04:16,749
您不能只检查其中两个都不存在。
You can't just check for the absence of either of those.

1278
01:04:16,750 --> 01:04:18,667
现在，我们应该变得更加聪明，并确保
Now, we should really be smarter and make sure

1279
01:04:18,666 --> 01:04:23,259
人类浏览器发送的任何运动实际上都存在于哈佛。
that whatever sport the human's browser sent actually exists at Harvard.

1280
01:04:23,260 --> 01:04:25,635
您可以想象这很快就会出错，
And you could imagine this going very wrong very quickly,

1281
01:04:25,635 --> 01:04:28,427
如果是银行帐户，例如您要存多少钱？
if it's a bank account, like how much money do you want to deposit?

1282
01:04:28,427 --> 01:04:31,090
好吧，我只是修改HTML并更改金额
Well I'll just hack the HTML and change the amount of money

1283
01:04:31,090 --> 01:04:33,070
我正在存款或提款，对不对？
I'm depositing or withdrawing, right?

1284
01:04:33,070 --> 01:04:37,120
您应该无法更改服务器的数据
You should not be able to change a server's data

1285
01:04:37,119 --> 01:04:40,239
或数据库，只需更改一些HTML。
or database by just changing some HTML.

1286
01:04:40,239 --> 01:04:45,254
在这种情况下，您永远不应该信任您的用户或我自己。
You should never, ever trust your users, or myself in this case.

1287
01:04:45,255 --> 01:04:46,630
那么我们如何防御呢？
So how do we defend against this?

1288
01:04:46,630 --> 01:04:49,213
好了，这个问题有一个解决方案，实际上给了我们
Well there's a solution to this problem that actually gives us

1289
01:04:49,213 --> 01:04:50,630
还有其他一些功能。
some other features as well.

1290
01:04:50,630 --> 01:04:54,220
让我继续摆脱这种愚蠢
Let me go ahead and get rid of this silliness

1291
01:04:54,219 --> 01:04:56,799
我从字面上对所有这些运动进行了硬编码
where I've literally hardcoded all of these sports

1292
01:04:56,800 --> 01:05:00,040
在HTML中，从字面上看，我诉诸于复制和粘贴。
in the HTML, which literally I resorted to copying and pasting.

1293
01:05:00,039 --> 01:05:03,339
那应该是我们可能会做得更好的第一个线索。
That should have been the first clue that we can probably do better.

1294
01:05:03,340 --> 01:05:07,150
让我改为进入应用程序点py，然后让我进入此处，
Let me instead go into application dot py, and let me go up here,

1295
01:05:07,150 --> 01:05:09,880
然后让我定义一个名为Sports的全局变量。
and let me just define a global variable called Sports.

1296
01:05:09,880 --> 01:05:13,930
定义常量时，按照惯例将其大写。
I'll capitalize it as is the convention when defining constants.

1297
01:05:13,929 --> 01:05:18,031
让我继续说，运动将成为此Python列表。
And let me go ahead and say, the sports are going to be this Python list.

1298
01:05:18,032 --> 01:05:20,740
所以我要保持它的美观，并使用
So I'm going to keep it pretty and put it on multiple lines using

1299
01:05:20,739 --> 01:05:22,429
方括号，因为它是一个列表。
square brackets because it's a list.

1300
01:05:22,429 --> 01:05:25,689
在这里我要说躲避球是一项运动，
Here's where I'm going to say dodgeball as one sport,

1301
01:05:25,690 --> 01:05:33,160
旗帜足球是我们的下一个，逗号，足球是我们的第三，排球是第四，
flag football was our next, comma, soccer is our third, volleyball fourth,

1302
01:05:33,159 --> 01:05:37,609
最后，我们将合法的终极飞盘保留下来。
and then lastly we'll leave in ultimate Frisbee as legitimate.

1303
01:05:37,610 --> 01:05:39,310
这些就是我的运动。
So those are my sports.

1304
01:05:39,309 --> 01:05:42,189
现在如何使用该运动列表？
How do I now use that list of sports?

1305
01:05:42,190 --> 01:05:44,530
好吧，我可以将它们传递到我的模板中。
Well, I can just pass them into my template.

1306
01:05:44,530 --> 01:05:48,670
我可以这样说：体育，或其他任何x或y，
I can say something like this: Sports, or anything, x, or y,

1307
01:05:48,670 --> 01:05:52,140
或z，但运动更具描述性，等于运动。
or z, but sports is more descriptive, equals sports.

1308
01:05:52,139 --> 01:05:54,569
这就是说，我要在模板中创建
So this is to say, I'm going to create in my template

1309
01:05:54,570 --> 01:05:56,790
一个称为运动的变量，其值
a variable called sports, the value of which

1310
01:05:56,789 --> 01:05:59,849
将是相同的全局变量。
is going to be that same global variable.

1311
01:05:59,849 --> 01:06:03,149
需要明确的是，Flask要求您选择一个名称。
And to be clear, Flask requires that you choose a name.

1312
01:06:03,150 --> 01:06:06,090
您不能只参加体育运动，因为Flask只是
You can't just pass in sports because Flask just

1313
01:06:06,090 --> 01:06:09,000
不会知道如何处理这样的单个参数。
won't know what to do with a single argument like that.

1314
01:06:09,000 --> 01:06:10,860
您必须给这些东西起个名字。
You have to give these things names.

1315
01:06:10,860 --> 01:06:13,080
再次，它倾向于导致这种冗余
And again, it tends to lead to this redundancy

1316
01:06:13,079 --> 01:06:16,529
在您重复使用相同单词的地方，但右边是您的变量，
where you're reusing the same words, but one is your variable on the right,

1317
01:06:16,530 --> 01:06:19,870
另一个是您在左侧模板中使用的名称。
the other is the name you're using in your template on the left.

1318
01:06:19,869 --> 01:06:22,559
因此，现在让我们在索引点HTML中进行此操作。
So now let's do this in index dot HTML.

1319
01:06:22,559 --> 01:06:24,749
这是模板变得更强大的地方。
Here's where templating gets more powerful.

1320
01:06:24,750 --> 01:06:28,589
在Jinja这样的模板中，您不仅左右没有花括号，
In templates like Jinja, you don't just have curly braces left and right,

1321
01:06:28,590 --> 01:06:32,400
而且您不仅拥有带有花括号和百分号的块，
and you don't just have the blocks with the curly braces and percent signs,

1322
01:06:32,400 --> 01:06:36,090
您甚至有一些简单的编程结构。
you even have some simple programming constructs.

1323
01:06:36,090 --> 01:06:39,490
我实际上可以做这样的事情。
I can actually do something like this.

1324
01:06:39,489 --> 01:06:44,249
事实证明，我实际上可以做这样的事情。
It turns out I can actually do something like this.

1325
01:06:44,250 --> 01:06:49,642
对于运动中的运动而言，这是愚蠢的，
For sport in sports, end for, so it's a little stupid,

1326
01:06:49,641 --> 01:06:51,599
您从字面上说结束的语法，然后
the syntax, that you literally say end and then

1327
01:06:51,599 --> 01:06:54,669
刚才介词的名字，
the name of whatever the preposition was a moment ago,

1328
01:06:54,670 --> 01:06:57,360
但现在让我继续，生成一个价值为
but now let me go ahead and generate an option whose value is

1329
01:06:57,360 --> 01:07:01,530
取消引用当前运动，将其关闭，然后在此处
quote unquote the current sport, close, that and then in here

1330
01:07:01,530 --> 01:07:03,450
让我再说一遍运动。
let me say sport again.

1331
01:07:03,449 --> 01:07:04,559
完毕。
Done.

1332
01:07:04,559 --> 01:07:09,749
现在，我在模板中使用了for循环，其语法
Now I have used a for loop in my template, the syntax for which

1333
01:07:09,750 --> 01:07:13,200
看起来与Python几乎相同，这是有意为之的，Jinja的作者
looks almost identical to Python, that's deliberate, the authors of Jinja

1334
01:07:13,199 --> 01:07:17,999
本质上是借用了Python自己的语法，因此没有太多新信息
essentially borrowed Python's own syntax so it's not too much new information

1335
01:07:18,000 --> 01:07:18,989
超载。
overload.

1336
01:07:18,989 --> 01:07:20,429
并注意我在做什么。
And notice what I'm doing.

1337
01:07:20,429 --> 01:07:25,739
我正在使用这种Jinja语法来迭代Sports变量。
I'm using this Jinja syntax to iterate over that Sports variable.

1338
01:07:25,739 --> 01:07:28,724
这是一个for循环，所以我说的是迭代设置运动
It's a for loop, so I'm saying iteratively set sport

1339
01:07:28,724 --> 01:07:31,349
等于第一项运动，然后是第二项，然后是第三项，然后
equal to the first sport, then the second, then the third, then

1340
01:07:31,349 --> 01:07:32,474
第四，然后是第五。
the fourth, then the fifth.

1341
01:07:32,474 --> 01:07:36,089
然后在此块的内部，此for循环，
And then inside of this block here, this for loop,

1342
01:07:36,090 --> 01:07:39,480
我在用双花括号将运动插入其中，
I'm using the double curly braces to just plug in the sport there,

1343
01:07:39,480 --> 01:07:41,010
在那里插入运动。
plug in the sport there.

1344
01:07:41,010 --> 01:07:44,400
Flask的这一功能有什么令人惊奇的地方
And what's amazing about this feature of Flask

1345
01:07:44,400 --> 01:07:47,010
反过来，Web框架通常是现在
and in turn web frameworks in general is that now when

1346
01:07:47,010 --> 01:07:53,250
我运行Flask run，打开我的URL并转到此表单，瞧，它在那里。
I run Flask run, and I open up my URL and go to this form, voila, it's there.

1347
01:07:53,250 --> 01:07:54,929
它是为我动态生成的。
It's dynamically generated for me.

1348
01:07:54,929 --> 01:07:57,179
如果我在浏览器中查看页面的来源，
And if I look at my page's source in my browser,

1349
01:07:57,179 --> 01:08:00,609
请注意，所有这些选项的确存在。
notice that all of those options are indeed there.

1350
01:08:00,610 --> 01:08:02,490
但是我不必手动键入它们。
But I didn't have to type them out manually.

1351
01:08:02,489 --> 01:08:07,019
现在，我将其放在一个数组中，并且正在动态生成更多HTML。
I now have it in an array and I'm dynamically generating even more HTML.

1352
01:08:07,019 --> 01:08:08,999
节省的钱更强大的是什么
And what's more powerful about that savings

1353
01:08:09,000 --> 01:08:12,209
现在我可以进入我的应用程序点py了，让我们
is that now I can go into my application dot py, and let's

1354
01:08:12,210 --> 01:08:14,230
不只是检查此值。
not just check for this value.

1355
01:08:14,230 --> 01:08:19,649
因此，如果不要求以点名形式获取点名称，即表示如果没有名称，
So if not request dot form dot get name, that was saying if there is no name,

1356
01:08:19,649 --> 01:08:23,220
然后这部分是说如果没有运动，
and then this part here was saying if there is no sport,

1357
01:08:23,220 --> 01:08:26,850
我为什么不更具体地说，或者运动
why don't I more specifically say, or the sport

1358
01:08:26,850 --> 01:08:30,930
用户输入表单不参加体育运动。
that the user input into the form is not in sports.

1359
01:08:30,930 --> 01:08:33,359
因此，这是Python变得非常优雅的地方。
So here's where Python gets pretty elegant.

1360
01:08:33,359 --> 01:08:36,210
现在，我正在检查两个布尔表达式。
Now I'm checking two Boolean expressions.

1361
01:08:36,210 --> 01:08:40,350
是否没有请求点格式点获取名称的情况，
Is it the case that there is not a request dot form dot get name,

1362
01:08:40,350 --> 01:08:44,880
还是以用户形式进行的运动
or is it the case that the sport that was in the user's form

1363
01:08:44,880 --> 01:08:49,510
不是在全局变量中，运动，那么应该是失败的。
is not in the global variable, sports, then it should be failure.

1364
01:08:49,510 --> 01:08:51,840
这样你就可以给我发网球，可以给我发水球，
So you can send me tennis, you can send me water polo,

1365
01:08:51,840 --> 01:08:53,819
您可以将任何您想要的运动发送给我。
you can send me any sport you want.

1366
01:08:53,819 --> 01:08:58,170
我现在要拒绝它，因为我正在验证您的提交
I am now going to reject it because I am validating your submission

1367
01:08:58,170 --> 01:09:00,310
针对服务器端数据。
against server side data.

1368
01:09:00,310 --> 01:09:01,620
再说一次，这是主题。
And again, this is thematic.

1369
01:09:01,619 --> 01:09:05,398
不幸的是，您永远无法相信用户的输入。
Unfortunately you can never, ever trust user input.

1370
01:09:05,399 --> 01:09:08,729
您应该始终假设有些烦人
You should always assume that some annoying

1371
01:09:08,729 --> 01:09:11,850
黑客在那里或朋友或兄弟姐妹要去
hacker out there or friend or sibling is going

1372
01:09:11,850 --> 01:09:15,540
试图侵入您的程序或使其崩溃。
to be trying to hack into or crash your programs.

1373
01:09:15,539 --> 01:09:19,199
但是您可以通过以这种方式进行防御性编程来防御这种情况。
But you can defend against that by programming defensively in this way.

1374
01:09:19,199 --> 01:09:24,818
因此，现在举个例子，如果我继续，大卫，躲避球，注册，那行得通。
So case in point now, if I go ahead and David, dodgeball, register, that works.

1375
01:09:24,819 --> 01:09:28,500
但是，如果我在进入HTML的位置再次进行这种小技巧，
But if I do this little hack again where I go into my HTML,

1376
01:09:28,500 --> 01:09:32,310
我去了这里，例如，我改变了极限飞盘，
I go down here, I change ultimate Frisbee, for instance,

1377
01:09:32,310 --> 01:09:36,060
网球，也将其更改为网球，
to tennis, and also change it here to tennis,

1378
01:09:36,060 --> 01:09:41,760
缩小，将其关闭，选择网球，输入我的名字，大卫，瞧。
zoom out, close that, choose tennis, type in my name, David, voila.

1379
01:09:41,760 --> 01:09:42,600
等一下。
Wait a minute.

1380
01:09:42,600 --> 01:09:44,130
该死的。
Damn it.

1381
01:09:44,130 --> 01:09:46,069
为什么行得通？
Why did that work?

1382
01:09:46,069 --> 01:09:47,939
等一下。
Oh, wait.

1383
01:09:47,939 --> 01:09:48,470
好的。
OK.

1384
01:09:48,470 --> 01:09:49,790
我没有重新启动服务器。
I didn't restart the server.

1385
01:09:49,789 --> 01:09:51,679
它仍然在运行旧代码。
It was still running the old code.

1386
01:09:51,680 --> 01:09:52,642
现在我打开它。
Now I open it up.

1387
01:09:52,641 --> 01:09:53,849
现在，我们必须再次执行此操作。
Now we have to do this again.

1388
01:09:53,850 --> 01:09:54,170
好的。
OK.

1389
01:09:54,170 --> 01:09:55,880
现在，我将继续攻击该网站。
Now I'm going to go ahead and hack the site.

1390
01:09:55,880 --> 01:09:58,760
让我继续进行检查，扩大运动范围，让我们继续前进
Let me go ahead and inspect this, expand the sports, let's go ahead

1391
01:09:58,760 --> 01:10:00,770
并将终极飞盘改为网球。
and change ultimate Frisbee to tennis.

1392
01:10:00,770 --> 01:10:02,990
让我们继续将其更改为网球。
Let's go ahead and change that to tennis.

1393
01:10:02,989 --> 01:10:07,759
关闭窗口，将下拉菜单更改为网球，现在就可以开始了。
Close the window, change the dropdown to tennis, and now, there we go.

1394
01:10:07,760 --> 01:10:08,340
好的。
OK.

1395
01:10:08,340 --> 01:10:08,840
好的。
All right.

1396
01:10:08,840 --> 01:10:11,210
我感到困惑了片刻，但是再次，只是重新启动服务器，
I was confused for a moment, but again, just restart the server,

1397
01:10:11,210 --> 01:10:13,400
它将重新加载我们实际进行的更改。
and it will reload the changes we actually made.

1398
01:10:13,399 --> 01:10:15,941
非常感谢Brian，潜水到这里救了我。
And thank you so much, Brian, for diving in there to save me.

1399
01:10:15,942 --> 01:10:17,190
我想到了。
I figured it out.

1400
01:10:17,189 --> 01:10:21,349
好吧，我现在对自己的问题有任何疑问或困惑。
All right, any questions or confusion beyond my own now on what it is we've

1401
01:10:21,350 --> 01:10:27,380
只需完成一项操作，即可动态生成用户选择菜单选项的列表
just done by one, dynamically generating a list of user select menu options

1402
01:10:27,380 --> 01:10:32,970
并根据相同的数据列表在服务器上进行验证？
and also validating on the server against that same list of data?

1403
01:10:32,970 --> 01:10:33,840
任何问题？
Any questions?

1404
01:10:33,840 --> 01:10:35,370
还是Brian身上有什么？
Or anything on your end Brian?

1405
01:10:35,369 --> 01:10:36,449
布莱恩：什么都没有。
BRIAN: Nothing here.

1406
01:10:36,449 --> 01:10:37,532
DAVID J. MALAN：好的。
DAVID J. MALAN: All right.

1407
01:10:37,533 --> 01:10:41,040
因此，让我快速真实地演示这些不同的用户界面
So let me just demonstrate real quickly these just different user interface

1408
01:10:41,039 --> 01:10:41,669
机制。
mechanisms.

1409
01:10:41,670 --> 01:10:43,740
可以说，我们并不太专注
And suffice it to say, we're not too focused

1410
01:10:43,739 --> 01:10:46,859
用于我们在用户界面设计上的目的。
for our purpose on user interface design.

1411
01:10:46,859 --> 01:10:50,399
使用类似Bootstrap的库，您可以使这些表单看起来更漂亮吗？
Using a library like Bootstrap can you make these forms look much prettier

1412
01:10:50,399 --> 01:10:55,679
只需添加更多HTML标记和CSS类，
just by adding a few more HTML tags and a few more CSS classes,

1413
01:10:55,680 --> 01:10:58,260
但让我继续进行一下调整
but let me go ahead and make one tweak here

1414
01:10:58,260 --> 01:11:00,990
因此我们可以从选择菜单更改UI
whereby we can change the UI from being the select menu

1415
01:11:00,989 --> 01:11:02,459
一堆不同的东西。
to a bunch of different things.

1416
01:11:02,460 --> 01:11:07,380
我为点HTML编制了索引，可以继续在for循环中定义，
I index dot HTML I can go ahead and define, inside of my for loop,

1417
01:11:07,380 --> 01:11:12,240
而不是使用“选择”菜单输入，名称等于运动，
instead of using the Select menu an input, name equals sport,

1418
01:11:12,239 --> 01:11:15,269
type等于单选按钮的单选，即
type equals radio for radio button, which

1419
01:11:15,270 --> 01:11:19,770
是您可能会在框上，网站上打勾的互斥圈子，
are the mutually exclusive circles that you might tick on a box, on a website,

1420
01:11:19,770 --> 01:11:22,710
然后，这项运动的价值便是这项特殊运动。
and then the value of this will be this particular sport.

1421
01:11:22,710 --> 01:11:25,890
然后在这里，让我继续进行单选按钮之外的操作
And then over here, let me go ahead outside of the radio button

1422
01:11:25,890 --> 01:11:28,680
并向人们实际显示该运动名称。
and actually display to the human that sport name.

1423
01:11:28,680 --> 01:11:30,060
让我重新启动服务器。
Let me restart the server.

1424
01:11:30,060 --> 01:11:33,510
让我重新加载我的页面，瞧，我们不再有选择菜单，
Let me reload my page, and voila, we no longer have a select menu,

1425
01:11:33,510 --> 01:11:36,330
但是我们有单选按钮，可以达到相同的效果，
but we have radio buttons, which achieve the same result,

1426
01:11:36,329 --> 01:11:38,856
但它们只是以稍微不同的方式布置。
but they're just laid out in a slightly different way.

1427
01:11:38,856 --> 01:11:41,189
而且它们确实像旧学校一样相互排斥
And they're indeed mutually exclusive like an old school

1428
01:11:41,189 --> 01:11:44,879
汽车上的收音机，您一次只能选择其中一个，
radio in a car where you can only select one of them at a time,

1429
01:11:44,880 --> 01:11:47,360
但是否则该网站的工作原理完全相同。
but otherwise the site works completely the same.

1430
01:11:47,359 --> 01:11:48,149
那么该使用哪个呢？
So which to use?

1431
01:11:48,149 --> 01:11:48,839
这取决于。
It depends.

1432
01:11:48,840 --> 01:11:50,910
如果您有100种不同的运动，那么您可能
If you've got 100 different sports you probably

1433
01:11:50,909 --> 01:11:53,009
如果只想要100个不同的单选按钮
don't want 100 different radio buttons if only

1434
01:11:53,010 --> 01:11:54,630
因为它们占用了太多空间。
because they take up so much space.

1435
01:11:54,630 --> 01:11:58,675
但是，如果相反，您可能想使用下拉菜单。
But if instead you might want to use a drop down menu instead.

1436
01:11:58,675 --> 01:12:01,050
好吧，那么我们仍然没有做的关键是什么？
All right, so what's the key thing we're still not doing?

1437
01:12:01,050 --> 01:12:03,180
我们有一个非常动态的用户界面，
We've got a pretty dynamic user interface,

1438
01:12:03,180 --> 01:12:05,110
但我只是丢掉信息
but I'm just throwing away the information

1439
01:12:05,109 --> 01:12:06,849
一旦用户单击注册。
once the user clicks Register.

1440
01:12:06,850 --> 01:12:10,020
因此，让我们开始回忆起来，就像我回去一样
So let's actually start remembering, just as I did back

1441
01:12:10,020 --> 01:12:13,800
在那天，谁实际注册，以便我们实际拥有
in the day, who has actually registered so that we actually have

1442
01:12:13,800 --> 01:12:16,750
适当的工作登记制度。
a proper working registration system.

1443
01:12:16,750 --> 01:12:18,669
那么我们如何去做呢？
So how can we go about doing this?

1444
01:12:18,670 --> 01:12:21,810
好吧，我们过去看过Python时就已经看到了
Well we've seen in our look at Python in the past

1445
01:12:21,810 --> 01:12:26,670
我们可以使用列表将数据存储在Python程序中，
that we can store data inside of a Python program using a list,

1446
01:12:26,670 --> 01:12:28,680
使用字典，使用一组。
using a dictionary, using a set.

1447
01:12:28,680 --> 01:12:30,930
Python提供了很多数据结构。
There's a lot of data structures that Python gives us.

1448
01:12:30,930 --> 01:12:32,025
因此，让我们开始简单。
So let's start simple.

1449
01:12:32,024 --> 01:12:33,149
让我们真正地做到这一点。
And let's actually do that.

1450
01:12:33,149 --> 01:12:36,479
让我们继续，将我们的注册人存储在字典中。
Let's go ahead and store our registrants maybe in a dictionary.

1451
01:12:36,479 --> 01:12:40,769
因此，在应用程序点py中，到目前为止，该点尚未更改，
So in application dot py, which is thus far now unchanged,

1452
01:12:40,770 --> 01:12:43,590
让我给自己一个全局变量，注册者，
let me give myself one other global variable, registrants,

1453
01:12:43,590 --> 01:12:45,992
让我将其初始化为一个空字典。
and let me initialize it to an empty dictionary.

1454
01:12:45,992 --> 01:12:48,450
回想一下，我们这样做是为了实施电话簿，其中
And recall that we did this to implement a phone book where

1455
01:12:48,449 --> 01:12:51,479
我添加了我的姓名和电话号码以及Brian的姓名和电话号码
I added my name and phone number and Brian's name and phone number

1456
01:12:51,479 --> 01:12:52,619
几个星期前。
a couple of weeks ago.

1457
01:12:52,619 --> 01:12:57,539
我们使用Python字典来存储这些键值对，名称和电话
We used a Python dictionary to store those key value pairs, name and phone

1458
01:12:57,539 --> 01:12:58,079
数字。
number.

1459
01:12:58,079 --> 01:12:59,579
在这里，让我们做类似的事情。
Here let's do something similar.

1460
01:12:59,579 --> 01:13:01,646
让我们存储用户名和运动
Let's store the user's name and the sport

1461
01:13:01,646 --> 01:13:03,479
为他们注册，以便我们然后
for which they're registered so that we then

1462
01:13:03,479 --> 01:13:08,139
在计算机内存中包含所有有效注册的列表。
have in the computer's memory a list of all of the valid registrations.

1463
01:13:08,140 --> 01:13:10,590
那么我们将如何做到这一点以及需要改变什么呢？
So how are we going to do this and what needs to change?

1464
01:13:10,590 --> 01:13:14,040
好吧，让我继续并将其更改回“选择”菜单
Well let me go ahead and change this back to the Select menu

1465
01:13:14,039 --> 01:13:17,549
只是因为它适合屏幕而不是收音机更好
just because it fits on the screen a little better instead of the radio

1466
01:13:17,550 --> 01:13:18,990
纽扣。
buttons.

1467
01:13:18,989 --> 01:13:24,399
从这里开始，我们将再次获得之前看到的用户界面。
And from here we will have again, the user interface that we saw earlier.

1468
01:13:24,399 --> 01:13:28,199
因此，让我继续进行Flask运行，让我继续进行
So let me go ahead and do Flask run, let me go ahead

1469
01:13:28,199 --> 01:13:31,034
并打开它，瞧，我们有相同的界面
and open this up, and voila, we have that same interface

1470
01:13:31,034 --> 01:13:33,959
和以前一样，现在的目标是当我单击“注册”时，
as before, the goal of which now is when I click Register,

1471
01:13:33,960 --> 01:13:37,470
我不想天真地看到您已经注册，或者您还没有注册，
I don't want to just naively see you are registered or you are not register,

1472
01:13:37,470 --> 01:13:39,827
我想实际注册用户。
I want to actually register the user.

1473
01:13:39,827 --> 01:13:41,910
所以我认为我们需要做一些工作
So I think we're going to need to do a bit of work

1474
01:13:41,909 --> 01:13:44,729
在应用程序点py中，实际上是
in application dot py, the file that's actually

1475
01:13:44,729 --> 01:13:47,399
处理用户的注册。
processing the user's registration.

1476
01:13:47,399 --> 01:13:50,069
因此，不只是通过检查来验证表单
So instead of just validating the form by checking

1477
01:13:50,069 --> 01:13:53,159
如果他们有一个名字或一项体育运动，
if they had a name or a sport that was in sports,

1478
01:13:53,159 --> 01:13:54,759
让我们做些不同的事情。
let's do something a little different.

1479
01:13:54,760 --> 01:13:57,060
所以，让我继续，从这里重新开始，
So let me go ahead and sort of start anew here,

1480
01:13:57,060 --> 01:14:01,140
让我做这样的事情：name等于request dot form dot get name，
and let me do something like this: name equals request dot form dot get name,

1481
01:14:01,140 --> 01:14:03,930
只是为了让它包含在变量中，它会更易于使用。
just so I have it in a variable, it'll be a little easier to use.

1482
01:14:03,930 --> 01:14:08,250
然后，让我们只说如果不是名字，那么让我们继续并返回渲染
And then let's just say if not name, then let's go ahead and return render

1483
01:14:08,250 --> 01:14:12,772
模板故障点HTML。
template failure dot HTML.

1484
01:14:12,773 --> 01:14:14,190
好吧，让我们检查一下运动。
All right, let's then check sport.

1485
01:14:14,189 --> 01:14:18,659
运动等于请求点形式从点开始运动，并将其存储在变量中
Sport equals request dot form dot get sport, storing it in a variable

1486
01:14:18,659 --> 01:14:21,029
只是这样我可以做得更干净一点。
just so I can do this a little more cleanly.

1487
01:14:21,029 --> 01:14:27,599
然后，如果不运动，请继续并返回渲染模板，模板，
And then if not sport, go ahead and return render template, template,

1488
01:14:27,600 --> 01:14:29,730
失效点HTML。
failure dot HTML.

1489
01:14:29,729 --> 01:14:31,649
然后再进行一次检查，但我只是
And then let's do one more check, but I'm just

1490
01:14:31,649 --> 01:14:33,389
这次要多一些学究。
being a little more pedantic this time.

1491
01:14:33,390 --> 01:14:38,340
如果运动不在运动中，那就继续吧
If sport not in sports, then let's go ahead

1492
01:14:38,340 --> 01:14:42,165
并返回渲染模板故障点HTML。
and return render template failure dot HTML.

1493
01:14:42,164 --> 01:14:44,039
但是你知道吗，这似乎有点愚蠢。
But you know what, this seems a little silly.

1494
01:14:44,039 --> 01:14:47,729
如果我正在做所有事情，如果我以程序员的身份知道错误是什么，
If all I'm doing, if I know as the programmer what the error is,

1495
01:14:47,729 --> 01:14:50,219
但我只是告诉用户您尚未注册，
but I'm just telling the user you are not registered,

1496
01:14:50,220 --> 01:14:51,720
那不是特别好的设计。
that's not particularly good design.

1497
01:14:51,720 --> 01:14:56,200
我没有告诉用户有关他们做错了什么的任何信息。
I'm not telling the user any information about what they did wrong.

1498
01:14:56,199 --> 01:14:57,629
因此，让我们这样做。
So let's do this instead.

1499
01:14:57,630 --> 01:15:01,380
让我继续创建另一个文件，而不是失败点HTML。
Instead of failure dot HTML, let me go ahead and create a different file

1500
01:15:01,380 --> 01:15:03,930
称为错误点HTML。
called error dot HTML.

1501
01:15:03,930 --> 01:15:07,620
这将在我的Frosh IMs目录中称为错误点HTML。
And this will be called error dot HTML in my Frosh IMs directory

1502
01:15:07,619 --> 01:15:11,849
在我的模板目录中，在这里，让我们继续
in my templates directory, and in here, let's go ahead

1503
01:15:11,850 --> 01:15:18,660
并实际上发出了一条错误消息，例如类似此消息的消息。
and actually put an error message, for instance, something like this message.

1504
01:15:18,659 --> 01:15:22,979
因此，除了占位符之外，实际上没有其他任何内容，
So there's nothing really there other than a placeholder for message,

1505
01:15:22,979 --> 01:15:24,719
但让我们看看这将为我们带来什么。
but let's see what this will do for us.

1506
01:15:24,720 --> 01:15:26,760
现在让我们回到应用程序点py。
Let's now go back to application dot py.

1507
01:15:26,760 --> 01:15:29,880
让我们更具体一点，而不是错误点HTML
And instead of error dot HTML, let's be a little more specific

1508
01:15:29,880 --> 01:15:32,800
并传递一条错误消息，例如缺少名称。
and pass in an error message like missing name.

1509
01:15:32,800 --> 01:15:35,490
在这里，让我们将其更改为错误点HTML
And down here, let's change this to error dot HTML

1510
01:15:35,489 --> 01:15:38,129
并说说缺少运动的信息。
and say a message of missing sport.

1511
01:15:38,130 --> 01:15:40,370
在这里，让我们将其更改为错误
And down here, let's change this to errors

1512
01:15:40,369 --> 01:15:46,209
点HTML，糟糕，错误，错误中的错误，无效运动的消息。
dot HTML, whoops, error, error in the error, message of invalid sport.

1513
01:15:46,210 --> 01:15:49,740
因此，这里有一项运动，但它不在有效运动列表中，
So there's a sport there, but it's just not in the list of valid sports,

1514
01:15:49,739 --> 01:15:51,819
因此我们应该相应地告诉用户。
so we should tell the user accordingly.

1515
01:15:51,819 --> 01:15:55,169
因此，现在让我们快速尝试一下。
So now let's just try this real quick.

1516
01:15:55,170 --> 01:15:59,500
让我们快速尝试一下并正确输入此数据，以便我们看到它们。
Let's try this real quick and input this data in correctly so we can see these.

1517
01:15:59,500 --> 01:16:03,000
让我重新运行服务器，重新加载表单，让我们什么都不打
Let me rerun the server, reload the form, let's type in nothing

1518
01:16:03,000 --> 01:16:04,360
然后尝试注册。
and just try to register.

1519
01:16:04,359 --> 01:16:04,889
好的。
OK.

1520
01:16:04,890 --> 01:16:05,640
姓名缺失。
Missing name.

1521
01:16:05,640 --> 01:16:07,890
它比仅“您尚未注册”更有用。
It's more useful than just "you are not registered."

1522
01:16:07,890 --> 01:16:09,960
好吧，好，让我给你我的名字，大卫。
All right, fine, let me give you my name, David.

1523
01:16:09,960 --> 01:16:11,040
登记。
Register.

1524
01:16:11,039 --> 01:16:11,859
缺少运动。
Missing sport.

1525
01:16:11,859 --> 01:16:12,359
好的。
OK.

1526
01:16:12,359 --> 01:16:13,859
现在，让我继续前进，给您一项运动。
Now let me go ahead and give you a sport.

1527
01:16:13,859 --> 01:16:16,409
现在，如果我注册了，我可能会遇到其他错误
And now if I registered, I'd probably get some other error

1528
01:16:16,409 --> 01:16:18,989
因为我还没有处理成功的结果。
because I haven't handled the successful outcome yet.

1529
01:16:18,989 --> 01:16:20,429
因此，让我们结束这一步。
So let's finish this up.

1530
01:16:20,430 --> 01:16:26,640
让我们回到我的注册路线中的应用程序点py
Let's go back to my application dot py in my register route

1531
01:16:26,640 --> 01:16:29,880
然后问自己，注册用户意味着什么？
and then ask ourselves, well what does it mean to register the user?

1532
01:16:29,880 --> 01:16:33,300
我想记住该用户已注册给定的
I want to remember that the user is registered for a given

1533
01:16:33,300 --> 01:16:35,560
在计算机的内存中运动。
sport in the computer's memory.

1534
01:16:35,560 --> 01:16:38,250
还有计算机的内存，回想一下，我正在使用
And the computer's memory, recall, I'm using

1535
01:16:38,250 --> 01:16:40,851
通过称为“注册人”的全局变量。
by way of this global variable called registrants.

1536
01:16:40,851 --> 01:16:43,559
所有的上限只是为了明确说明这是一个全局变量，
And it's all caps just to make clear that it's a global variable,

1537
01:16:43,560 --> 01:16:44,790
但这不是必需的。
but that's not required.

1538
01:16:44,789 --> 01:16:50,379
然后在这里，为什么我不这样做，注册人，名字等于体育。
And then down here, why don't I do this, registrants, name equals sport.

1539
01:16:50,380 --> 01:16:55,410
因此，这与我们对姓名和电话号码，键所做的操作非常相似
So this is very similar to what we did with names and phone numbers, keys

1540
01:16:55,409 --> 01:17:00,179
和值，其中我使用名称来索引到Python字典中，
and values, where I'm using name to index into the Python dictionary,

1541
01:17:00,180 --> 01:17:02,610
并且我将值设置为等于这项运动。
and I'm setting the value equal to the sport.

1542
01:17:02,609 --> 01:17:08,159
然后，让我们继续说说“回报”，“渲染模板”，“哎呀”
And then let's go ahead for now and say return, render template, whoops,

1543
01:17:08,159 --> 01:17:11,939
渲染模板，成功点HTML。
render template, success dot HTML.

1544
01:17:11,939 --> 01:17:13,329
因此，让我们对此进行测试。
So let's test this out.

1545
01:17:13,329 --> 01:17:16,709
让我们来看Frosh IM，哎呀，让我们从我的错误中学习。
Let's go over to Frosh IMs, whoops, let's learn from my mistakes.

1546
01:17:16,710 --> 01:17:19,380
停止服务器并重新加载。
Stop the server and reload.

1547
01:17:19,380 --> 01:17:20,940
让我回到浏览器。
Let me go back to the browser.

1548
01:17:20,939 --> 01:17:25,349
让我继续输入大卫，他将注册躲避球，然后注册。
Let me go ahead and type in David, who will register for dodgeball, register.

1549
01:17:25,350 --> 01:17:26,640
声称已注册。
Claims it's registered.

1550
01:17:26,640 --> 01:17:29,310
让我去做，布莱恩将报名参加旗杆足球比赛。
Let me do Brian will register for flag football.

1551
01:17:29,310 --> 01:17:30,150
挂号的。
Registered.

1552
01:17:30,149 --> 01:17:31,619
他已注册。
He is registered.

1553
01:17:31,619 --> 01:17:35,129
但是我不知道谁在注册。
But I don't know who's registered or not.

1554
01:17:35,130 --> 01:17:35,800
我不知道。
I don't know.

1555
01:17:35,800 --> 01:17:38,092
但是您知道吗，让我们在这里进行一些理智检查。
But you know what, let's do a little sanity check here.

1556
01:17:38,091 --> 01:17:39,809
让我只打印出注册人，对吗？
Let me just print out registrants, right?

1557
01:17:39,810 --> 01:17:42,210
如有疑问，请打印或打印f为您的朋友。
When in doubt, print or print f is your friend.

1558
01:17:42,210 --> 01:17:46,050
因此，让我们在这里做些戳记，然后再次运行Flask run。
So let's just do a little poking around here and run Flask run again.

1559
01:17:46,050 --> 01:17:51,000
这次让我们回到表格上，注册David，运动，躲避球，
This time let's go back to the form and register David, sport, dodgeball,

1560
01:17:51,000 --> 01:17:52,719
注册，行为相同。
register, same behavior.

1561
01:17:52,720 --> 01:17:54,960
但是在这里，请注意我们有这个。
But down here, notice we have this.

1562
01:17:54,960 --> 01:17:58,480
我看到你们中的几个也在注册。
And I see a couple of you are registering as well.

1563
01:17:58,479 --> 01:18:03,659
所以我看到卢卡斯也注册了躲避球，
So I see Lucas has registered for dodgeball as well,

1564
01:18:03,659 --> 01:18:05,609
Brian Y.已注册排球。
Brian Y. has registered for volleyball.

1565
01:18:05,609 --> 01:18:08,424
好吧，现在Harsh已经注册了排球。
So OK, now Harsh has registered for volleyball.

1566
01:18:08,425 --> 01:18:11,550
因此，当我们进行这些现场演示时，这就是互联网的问题，
So this is the problem with having an internet when we do these live demos,

1567
01:18:11,550 --> 01:18:13,510
但显然它确实有效。
but apparently it does in fact work.

1568
01:18:13,510 --> 01:18:15,510
所以，让我们继续做，使它更清洁一点
So let's go ahead and make this a little cleaner

1569
01:18:15,510 --> 01:18:18,870
在这里，让我们继续前进，而不仅仅是打印注册人
here, and instead of just printing registrants, let's go ahead

1570
01:18:18,869 --> 01:18:20,049
并做这样的事情。
and do something like this.

1571
01:18:20,050 --> 01:18:23,620
我为什么不继续前进，你知道吗，让我们这样做。
Why don't I go ahead, and you know what, let's do this.

1572
01:18:23,619 --> 01:18:30,119
让我们继续渲染一个称为注册人点HTML的模板。
Let's go ahead and render a template called registrants dot HTML.

1573
01:18:30,119 --> 01:18:33,089
我认为要实现这一目标，我需要另一条路线，
And I think to make this happen, I'm going to need another route,

1574
01:18:33,090 --> 01:18:36,360
但是这一点会很有趣，因为我们从来没有
but this one will be kind of interesting in that we've never

1575
01:18:36,359 --> 01:18:40,434
动态生成这种成功消息。
dynamically generated quite this kind of success message.

1576
01:18:40,435 --> 01:18:42,810
所以，让我继续前进，在这里快速地提出一些建议。
So let me go ahead and whip something up real quick here.

1577
01:18:42,810 --> 01:18:48,930
让我转到一个新文件，注册人点HTML，Frosh IM，模板，
Let me go to a new file, registrants dot HTML, Frosh IMs, templates,

1578
01:18:48,930 --> 01:18:53,040
然后在该文件夹，模板中，在这里我们要做
and then in that folder, templates, and in here we're going to do

1579
01:18:53,039 --> 01:19:01,229
将布局点HTML扩展到此处，块主体，结束块，
extends layout dot HTML, down here, block body, end block,

1580
01:19:01,229 --> 01:19:04,229
然后在这里，在这里，我要去做，这要带我
and then down here, in here, I'm going to do, this going to take me

1581
01:19:04,229 --> 01:19:06,629
请稍等，H1，注册人。
a moment here, H1, registrants.

1582
01:19:06,630 --> 01:19:09,090
然后在下面，我将给自己一个HTML表。
Then below that I'm going to give myself an HTML table.

1583
01:19:09,090 --> 01:19:10,590
在表格内部，我将定义什么
Inside of the table, I'm going to define what's

1584
01:19:10,590 --> 01:19:12,780
称为桌头，并非严格要求
called a table head, which is not strictly required

1585
01:19:12,779 --> 01:19:16,019
但是它有助于从可选的页脚中区分出头部和身体。
but it helps distinguish the head from the body from the optional footer.

1586
01:19:16,020 --> 01:19:18,088
在这里，我将创建一个表格行。
Inside of here I'm going to create a table row.

1587
01:19:18,087 --> 01:19:20,129
在这里，我将创建三列，
Inside of here I'm going to create three columns,

1588
01:19:20,130 --> 01:19:22,920
使用TH，表标题，您可能以前没有看到过。
using TH, table heading, which you might not have seen before.

1589
01:19:22,920 --> 01:19:26,250
通常情况下，默认情况下使内容为粗体以明确其标题。
Typically makes things bold by default to make clear it's the heading.

1590
01:19:26,250 --> 01:19:30,029
我要输入该人的姓名，然后再输入其运动的另一个标题
And I'm going to put the person's name and then another heading of their sport

1591
01:19:30,029 --> 01:19:31,109
在这里。
down here.

1592
01:19:31,109 --> 01:19:35,651
然后在桌头下面，我要做tbody，这是桌体，
And then below the table head I'm going to do tbody, which is the table body,

1593
01:19:35,652 --> 01:19:38,610
您可能以前从未见过的另一个标签，实际上只是代表
another tag you might not have seen before but just represents, indeed,

1594
01:19:38,609 --> 01:19:39,399
身体。
the body.

1595
01:19:39,399 --> 01:19:41,999
我将动态生成一堆TR。
And I'm going to generate dynamically a whole bunch of TRs.

1596
01:19:42,000 --> 01:19:45,819
因此，对于注册人的名字，让我们继续吧
So for name in registrants, let's go ahead

1597
01:19:45,819 --> 01:19:51,359
在我的模板的Jinja for循环中，并动态输出表行。
in this Jinja for loop in my template and output dynamically a table row.

1598
01:19:51,359 --> 01:19:55,979
在该表格行的内部，有一些表格数据，特别是该人的名字，
Inside of that table row, some table data, specifically the person's name,

1599
01:19:55,979 --> 01:19:58,199
然后在另一列中
and then specifically in the other column

1600
01:19:58,199 --> 01:20:04,169
我可以访问的人的运动，如我们将通过变量看到的那样
the person's sport, which I can access, as we'll see by way of a variable

1601
01:20:04,170 --> 01:20:07,957
通过名称将其编入索引，从而称为注册人。
called registrants by indexing into it via the name.

1602
01:20:07,957 --> 01:20:10,290
因此，注册人很快就会成为一本字典
So registrants, in a moment, is going to be a dictionary

1603
01:20:10,289 --> 01:20:12,029
我将其传递到模板中
that I pass into my template.

1604
01:20:12,029 --> 01:20:12,807
我想就是这样。
I think that's it.

1605
01:20:12,807 --> 01:20:14,349
键入它有点繁琐。
It's a little tedious to type it out.

1606
01:20:14,350 --> 01:20:15,840
但是请注意，没有数据。
But notice there's no data.

1607
01:20:15,840 --> 01:20:17,970
这只是HTML和模板。
It's only HTML and templating.

1608
01:20:17,970 --> 01:20:23,250
如果我现在回到这里，让注册人等于注册人，
If I go back here now and pass in registrants equals registrants,

1609
01:20:23,250 --> 01:20:28,290
就像运动变量一样，我提供了注册人模板
just like with the sports variable I'm providing my registrants template

1610
01:20:28,289 --> 01:20:32,749
使用一个称为“注册人”的变量，但是我又可以将其命名为x或y或z，
with a variable called registrants, but again I could call it x or y or z,

1611
01:20:32,750 --> 01:20:34,830
但是注册人觉得合适一点，
but registrants feels a little more appropriate,

1612
01:20:34,829 --> 01:20:37,079
将其设置为等于该全局变量的值，
setting it equal to the value of that global variable,

1613
01:20:37,079 --> 01:20:40,529
从而使我的模板可以访问该词典。
thereby giving my template access to that dictionary.

1614
01:20:40,529 --> 01:20:46,529
如果我现在保存文件，请重新运行Flask，请回到此处，
If I now save the file, rerun Flask, go ahead back here,

1615
01:20:46,529 --> 01:20:48,809
哦，让我继续，再做一次。
whoops, let me go ahead and do this once more.

1616
01:20:48,810 --> 01:20:50,760
让我继续并重新运行Flask。
Let me go ahead and rerun Flask.

1617
01:20:50,760 --> 01:20:53,220
让我继续并选择我的URL。
Let me go ahead and select my URL.

1618
01:20:53,220 --> 01:20:57,300
让我继续进行操作，为David注册躲避球，然后单击“注册”。
Let me go ahead and register David for dodgeball and click Register.

1619
01:20:57,300 --> 01:20:58,320
瞧。
Voila.

1620
01:20:58,319 --> 01:20:59,369
严厉，你击败了我。
Harsh, you beat me to it.

1621
01:20:59,369 --> 01:21:01,709
因此，Harsh注册了旗帜足球。
So Harsh is registered for flag football.

1622
01:21:01,710 --> 01:21:03,540
大卫已经注册了躲避球。
David has registered for dodgeball.

1623
01:21:03,539 --> 01:21:08,639
它不是最漂亮的用户界面，但是如果我查看页面源代码，
It's not the prettiest user interface, but if I view the page source,

1624
01:21:08,640 --> 01:21:13,060
您会看到我们确实有桌子头，然后是桌子主体，
you'll see that we indeed have the table head, followed by the table body,

1625
01:21:13,060 --> 01:21:15,810
其次是哈什（Harsh）进行国旗足球比赛，接着是戴维（David）
followed by Harsh for flag football, followed by David

1626
01:21:15,810 --> 01:21:19,020
躲避球，然后再注册
for dodgeball, and then after that any subsequent registrants

1627
01:21:19,020 --> 01:21:21,430
谁同时注册。
who are registering at the same time.

1628
01:21:21,430 --> 01:21:23,850
我敢说，这很酷，因为现在我们
So this is pretty cool, I dare say, in that now we

1629
01:21:23,850 --> 01:21:28,980
能够将所有这些注册人保存到全局变量中。
have the ability to save all of these registrants to a global variable.

1630
01:21:28,979 --> 01:21:30,989
但是这里有什么缺点呢？
But what's a downside here?

1631
01:21:30,989 --> 01:21:33,229
我们已经取得了进展。
We've made progress.

1632
01:21:33,229 --> 01:21:36,199
我现在向您展示已注册的用户，
I'm now showing you users who have registered,

1633
01:21:36,199 --> 01:21:39,199
因此，这是指负责这项运动的RA或监禁人
so that means the RA or proctor who's running the sport

1634
01:21:39,199 --> 01:21:40,639
知道谁注册了。
knows who's registered.

1635
01:21:40,640 --> 01:21:42,320
但是有一个陷阱。
But there's a catch.

1636
01:21:42,319 --> 01:21:45,249
这里可能出什么毛病？
What could go wrong here?

1637
01:21:45,250 --> 01:21:47,950
使用字典有什么不好？
What's bad about using a dictionary?

1638
01:21:47,949 --> 01:21:48,791
索菲亚？
Sophia?

1639
01:21:48,792 --> 01:21:50,750
SOPHIA：我假设每次您重新加载
SOPHIA: I'm assuming that every time you reload

1640
01:21:50,750 --> 01:21:54,450
您将要重置的服务器，并且您不打算保存数据？
the server you're just going to reset, and you're not going save the data?

1641
01:21:54,449 --> 01:21:55,449
戴维·J·马兰（David J. MALAN）：好的。
DAVID J. MALAN: Exactly.

1642
01:21:55,449 --> 01:21:57,199
如果我只是使用全局变量，它将
If I'm just using a global variable, it'll

1643
01:21:57,199 --> 01:22:01,149
只要服务器永远运行并且IDE保持在线状态，它就可以永远工作
work forever so long as the server runs forever and the IDE stays online

1644
01:22:01,149 --> 01:22:03,499
并且我们不会失去权力或任何其他原因。
and we don't lose power or any other number of reasons.

1645
01:22:03,500 --> 01:22:06,947
但是，请问我，Web服务器一经停止，停止或关闭
But as soon as the web server, excuse me, stops or is turned off

1646
01:22:06,947 --> 01:22:09,530
或出现问题，我们将丢失所有这些数据。
or something goes wrong, we're going to lose all of that data.

1647
01:22:09,529 --> 01:22:11,769
这就是为什么几周前使用Python的原因
So this is why a couple of weeks ago with Python

1648
01:22:11,770 --> 01:22:16,270
我们实际上使用了CSV文件，或者最终使用了SQLite数据库。
we actually used CSV files or ultimately a SQLite database.

1649
01:22:16,270 --> 01:22:17,750
但是，我也要进行一次更改。
But let me make one change too.

1650
01:22:17,750 --> 01:22:20,589
因为我现在不喜欢的是那一刻
Because what I don't like right now is that at the moment

1651
01:22:20,590 --> 01:22:23,892
查看我的注册人的唯一方法是实际注册自己。
the only way to view my registrants is to actually register yourself.

1652
01:22:23,891 --> 01:22:27,099
如果您想要求人们先注册，那么这可能就是一个功能
And maybe that's a feature if you want to require people register before they

1653
01:22:27,100 --> 01:22:30,580
看看还有谁注册了，但是有不同的路线感觉很好，
see who else is registered, but it feels nice to have a different route,

1654
01:22:30,579 --> 01:22:33,939
可能大幅削减注册人，任何人都可以访问
maybe slash registrants, that anyone can visit

1655
01:22:33,939 --> 01:22:36,609
查看实际的注册者列表。
to see the actual list of registrants.

1656
01:22:36,609 --> 01:22:38,869
因此，让我继续进行一下调整。
So let me go ahead and make one tweak here.

1657
01:22:38,869 --> 01:22:44,169
让我继续在这里定义另一条路线，应用程序点路线，斜线，
Let me go ahead down here and define another route, app dot route, slash,

1658
01:22:44,170 --> 01:22:46,720
哎呀，注册者。
whoops, registrants.

1659
01:22:46,720 --> 01:22:48,940
然后定义注册人为我的职能
And then define registrants as my function

1660
01:22:48,939 --> 01:22:50,439
但我可以随便叫它。
but I could call it anything I want.

1661
01:22:50,439 --> 01:22:54,384
让我实际上将模板的呈现移到此处。
And let me actually move this rendering of template here.

1662
01:22:54,385 --> 01:22:56,260
你知道吗，让我变得聪明一点。
And you know what, let me be a little clever.

1663
01:22:56,260 --> 01:23:00,850
让我实际将用户重定向到斜线注册者。
Let me actually redirect the user to slash registrants.

1664
01:23:00,850 --> 01:23:03,640
因此，让我继续在这里导入另外一个功能，
So let me go ahead and import one more function up here,

1665
01:23:03,640 --> 01:23:06,740
从Flask库重定向。
redirect, from the Flask library.

1666
01:23:06,739 --> 01:23:10,779
这是一个实际上将执行这些HTTP 301之一的功能
And this is a function that will literally do one of those HTTP 301s

1667
01:23:10,779 --> 01:23:14,479
或一些其他状态代码，这些代码会将位置发送到浏览器，其中说：
or some other status code that will send a location to the browser that says,

1668
01:23:14,479 --> 01:23:16,249
嗯，改为去这里。
uh-uh, go here instead.

1669
01:23:16,250 --> 01:23:18,850
原因是现在很好
And the reason for this is that it's just nice now

1670
01:23:18,850 --> 01:23:22,330
在我的注册路线内，一旦您注册，
that inside of my register route, once you're registered,

1671
01:23:22,329 --> 01:23:26,289
我不需要从字面上复制并粘贴此行在两个不同的地方
I don't need to literally copy and paste this line in two different places

1672
01:23:26,289 --> 01:23:28,659
并实际上有多余的代码。
and actually have redundant code.

1673
01:23:28,659 --> 01:23:31,419
我可以说，将用户重定向到斜线注册人
I can just say, redirect the user to slash registrants

1674
01:23:31,420 --> 01:23:34,600
现在已经存在，以便他们可以看到自己
which already exists now so that they can see themselves

1675
01:23:34,600 --> 01:23:36,120
以及还有谁注册了。
and who else has registered.

1676
01:23:36,119 --> 01:23:38,329
因此，如果我再次执行此操作，请让我重新启动服务器。
So if I do this again, let me restart the server.

1677
01:23:38,329 --> 01:23:43,609
让我回到表格，输入David进行躲避球比赛，注册。
Let me go back to the form, type in David for dodgeball, register.

1678
01:23:43,609 --> 01:23:47,739
好吧，Harsh，这次您没有晋级，但是我们看到Break
OK, so Harsh, you didn't make the cut this year, this time, but we see Break

1679
01:23:47,739 --> 01:23:51,219
莫阿什（Moash）和大卫（David）现在在那瞬间注册了，
and Moash and David now registered in that split second,

1680
01:23:51,220 --> 01:23:52,840
令人惊讶的是，对于这些运动。
amazingly, for these sports.

1681
01:23:52,840 --> 01:23:55,210
但是请注意URL，这是关键。
But notice the URL, which is the key point.

1682
01:23:55,210 --> 01:23:56,890
现在我们是斜线注册者。
Now we're at slash registrants.

1683
01:23:56,890 --> 01:24:01,132
而且，如果我继续加载，此后我将继续看到所有更改。
And if I keep reloading I'll keep seeing all of the changes since then.

1684
01:24:01,131 --> 01:24:04,089
好的，但是Sophia提出了一个很好的观点，那就是数据已经足够了
All right, but Sophia makes a really good point in that the data is all

1685
01:24:04,090 --> 01:24:04,880
会迷路的。
going to be lost.

1686
01:24:04,880 --> 01:24:08,780
因此，我认为我们应该对此进行清理，也许在这里做一个最终版本，
So I think we should clean this up and maybe do one final version here,

1687
01:24:08,779 --> 01:24:14,799
我们实际将数据保存在例如SQLite数据库中的位置
where we actually save the data in, for instance, a SQLite database

1688
01:24:14,800 --> 01:24:18,570
甚至通过电子邮件将其发送出去，以便我们也有备份副本。
or maybe even email it out so that we have a backup copy as well.

1689
01:24:18,569 --> 01:24:21,019
因此，让我继续提出这一建议。
So let me go ahead and propose this.

1690
01:24:21,020 --> 01:24:27,580
让我继续，建议我们在这里进行一些更改，一些更改，
Let me go ahead and propose that we make a few changes here, a few changes,

1691
01:24:27,579 --> 01:24:31,299
从我们对SQL和Python的研究中汲取了一些灵感。
borrowing some inspiration from our look at both SQL and Python.

1692
01:24:31,300 --> 01:24:33,730
因此，我现在暂时不讨论其中的大部分内容。
So I'm going to leave most of this alone for now.

1693
01:24:33,729 --> 01:24:36,369
我要去掉这个变量。
I'm going to go ahead and get rid of this variable.

1694
01:24:36,369 --> 01:24:38,109
我们必须将数据存储在其他位置。
We'll have to store the data elsewhere.

1695
01:24:38,109 --> 01:24:42,699
相反，让我们继续使用数据库，即SQLite数据库。
And instead, let's go ahead and use a database, a SQLite database.

1696
01:24:42,699 --> 01:24:47,739
因此，让我继续将数据库声明为SQL。
So let me go ahead and declare a database as SQL.

1697
01:24:47,739 --> 01:24:51,759
SQLite，冒号斜杠，斜杠，Frosh IMs点db。
SQLite, colon slash slash slash, Frosh IMs dot db.

1698
01:24:51,760 --> 01:24:53,260
让我继续导入。
Let me go ahead and import this.

1699
01:24:53,260 --> 01:24:56,440
回想一下，这是从CS50的库（该SQL库）中获取的。
This, recall, is from CS50's library, this SQL library.

1700
01:24:56,439 --> 01:24:58,689
让我在窗前继续一会儿
And let me go ahead in my window for just a moment

1701
01:24:58,689 --> 01:25:02,199
在这里，并从我带来的示例中复制数据库
here and copy the database from an example I brought with me just so

1702
01:25:02,199 --> 01:25:04,249
我们也不必创建数据库
that we don't have to create the database as well

1703
01:25:04,250 --> 01:25:08,020
并重新整理了本周有关SQL的内容。
and sort of rehash things from our week on SQL.

1704
01:25:08,020 --> 01:25:11,620
让我继续在这里获取数据库，实际上，瞧，
Let me go ahead and grab the database here, and indeed, voila,

1705
01:25:11,619 --> 01:25:13,989
数据库已出炉。
the database is out of the oven.

1706
01:25:13,989 --> 01:25:18,609
现在，我的目录中有一个本地文件，称为Frosh IMs dot db。
And we now have a local file in my directory called Frosh IMs dot db.

1707
01:25:18,609 --> 01:25:24,489
因此，让我们继续来看一下Frosh IMs dot db的SQLite数据库
So let's go ahead and first look at this database, SQLite of Frosh IMs dot db

1708
01:25:24,489 --> 01:25:26,439
点模式，输入。
dot schema, enter.

1709
01:25:26,439 --> 01:25:29,739
这是我预先创建的数据库表，因此我们
Here is the database table that I created in advance just so we

1710
01:25:29,739 --> 01:25:31,239
无需重新发明轮子。
wouldn't have to reinvent the wheel.

1711
01:25:31,239 --> 01:25:36,159
我正在创建一个名为ID列，名称列的名为registrants的表，
I'm creating a table called registrants with an ID column, with a name column,

1712
01:25:36,159 --> 01:25:37,719
和体育专栏。
and a sport column.

1713
01:25:37,720 --> 01:25:40,270
主键将是该ID。
The primary key is going to be that ID.

1714
01:25:40,270 --> 01:25:43,390
文本字段不应为null，运动项不应为null。
The textfield should not be null and the sport should not be null.

1715
01:25:43,390 --> 01:25:46,780
但是实际上在过去的几周中，我们已经看到了所有这些语法。
But we've seen all of this syntax actually in past weeks.

1716
01:25:46,779 --> 01:25:51,069
因此，这只是一个简单的表格，可为我提供每个注册人的ID，姓名，
So it's just a simple table to give me an ID for every registrant, a name,

1717
01:25:51,069 --> 01:25:51,999
和一项运动。
and a sport.

1718
01:25:52,000 --> 01:25:53,949
但是我现在将在Python中执行此操作。
But I'm going to do this in Python now.

1719
01:25:53,949 --> 01:26:00,629
所以让我继续前进，回到我的身边，让我回到我的应用程序点
So let me go ahead and go back into my, let me go back into my application dot

1720
01:26:00,630 --> 01:26:04,180
py，让我们继续执行此操作。
py, and let's go ahead and do this.

1721
01:26:04,180 --> 01:26:07,130
当我想实际注册用户时，
When I want to actually register the user,

1722
01:26:07,130 --> 01:26:10,060
让我们像以前一样验证它们，确保
let's validate them as before, making sure

1723
01:26:10,060 --> 01:26:12,340
他们给了我们他们的名字和运动，
that they've given us their name and their sport,

1724
01:26:12,340 --> 01:26:14,020
现在我们只使用一些SQL。
and now let's just use a little SQL.

1725
01:26:14,020 --> 01:26:16,510
与其将其保存到全局变量中，不如让它
Instead of saving it into what was a global variable let's

1726
01:26:16,510 --> 01:26:22,570
执行db dot并在注册人中插入名称和一项运动，
do db dot execute, insert into registrants a name and a sport,

1727
01:26:22,569 --> 01:26:24,729
我不需要ID，它会自动为我递增
I don't need the ID, it will auto increment for me

1728
01:26:24,729 --> 01:26:29,139
作为主键，还有两个值，问号和问号。
as the primary key, and two values, question mark and question mark.

1729
01:26:29,140 --> 01:26:34,570
再次提防SQL注入攻击，让我来谈谈名字和运动。
Again, beware SQL injection attacks, and let me pass in name and sport.

1730
01:26:34,569 --> 01:26:36,459
我认为这就是我所需要的。
And I think that's all I need.

1731
01:26:36,460 --> 01:26:39,460
我现在要在Python中使用一点SQL
I'm now going to use a little bit of SQL in my Python

1732
01:26:39,460 --> 01:26:42,590
为了将这个名字和体育项目插入数据库，
in order to insert that name and sport into the database,

1733
01:26:42,590 --> 01:26:44,270
之后，我认为我很好。
and after that, I think I'm fine.

1734
01:26:44,270 --> 01:26:47,660
但是我确实需要更改注册人，因为这里的变量没有
But I do need to change registrants because this variable down here no

1735
01:26:47,659 --> 01:26:48,439
不再存在。
longer exists.

1736
01:26:48,439 --> 01:26:51,949
但这没关系，因为回想起Python中的SQL，
But that's OK, because recall from our look at SQL in Python,

1737
01:26:51,949 --> 01:26:55,759
我可以做这样的事情：注册人等于db dot
I can do something like this: registrants equals db dot

1738
01:26:55,760 --> 01:26:59,930
执行，从注册人中选择星号。
execute, select star from registrants.

1739
01:26:59,930 --> 01:27:02,570
确实，简单的查询似乎可以让我访问
Indeed that simple query would seem to give me access

1740
01:27:02,569 --> 01:27:05,959
到目前为止的所有注册人，现在我可以这样通过。
to all of the registrants thus far, and now I can just pass that in like that.

1741
01:27:05,960 --> 01:27:09,980
再次，您的模板中变量的名称看起来有点奇怪
Again, it looks a little weird that the name of your variable in your template

1742
01:27:09,979 --> 01:27:12,309
与此变量的名称相同。
is the same as the name of this variable.

1743
01:27:12,310 --> 01:27:15,230
但这又是因为右边是变量，左边是
But again, that's because on the right is the variable, on the left

1744
01:27:15,229 --> 01:27:17,359
是您要在模板中使用的名称，
is the name you want to use in your template,

1745
01:27:17,359 --> 01:27:19,099
但您可以随便叫它。
but you could call it anything you want.

1746
01:27:19,100 --> 01:27:21,350
好吧，像往常一样，在这里，让我用手指交叉。
All right, here, as always, let me cross my fingers.

1747
01:27:21,350 --> 01:27:25,730
烧瓶运行起来，好的，让我继续打开我的URL。
Flask run, all right, let me go ahead and open up my URL.

1748
01:27:25,729 --> 01:27:31,549
让我继续输入大卫，躲避球，注册，好吧，有趣。
Let me go ahead and type in David, dodgeball, register, OK, interesting.

1749
01:27:31,550 --> 01:27:33,830
因此，Harsh和Naveen很快就进入了那里，
So Harsh and Naveen got in there real fast,

1750
01:27:33,829 --> 01:27:36,539
同样，您只是在等待“提交”按钮。
again, you're just kind of waiting with the Submit button.

1751
01:27:36,539 --> 01:27:37,339
但这是一团糟。
But this is a mess.

1752
01:27:37,340 --> 01:27:41,210
现在出现了明显的错误，我看到的是奇怪的字典语法。
Something is clearly wrong now, I'm seeing like weird dictionary syntax.

1753
01:27:41,210 --> 01:27:43,890
但这是因为我尚未调整模板。
But that's because I haven't adjusted my template.

1754
01:27:43,890 --> 01:27:48,110
因此，让我进入注册人点HTML并回想一下
So let me go into registrants dot HTML and recall

1755
01:27:48,109 --> 01:27:53,119
当我从注册人中选择星号进行选择时，
that when I select with select star from registrants,

1756
01:27:53,119 --> 01:27:54,829
这就像返回行。
this is like getting back rows.

1757
01:27:54,829 --> 01:27:58,129
我只是将其重命名为注册人，但实际上我正在找回排行。
I just renamed it to registrants, but I'm really getting back rows.

1758
01:27:58,130 --> 01:28:05,150
行只是字典，每一行都是字典
And rows are just dictionary, each row is a dictionary

1759
01:28:05,149 --> 01:28:07,919
列及其所在的值。
of columns and the values they're in.

1760
01:28:07,920 --> 01:28:11,480
所以我认为我的语法只需要对我的注册人进行一些更改
So I think my syntax just needs to change a little bit in my registrants

1761
01:28:11,479 --> 01:28:12,559
点HTML。
dot HTML.

1762
01:28:12,560 --> 01:28:15,920
我真的应该把这当作注册人中的注册人，
I should really think of this as for registrant in registrants,

1763
01:28:15,920 --> 01:28:19,110
然后让我继续输出注册人的姓名。
and let me go ahead and output the registrant's name.

1764
01:28:19,109 --> 01:28:23,569
下面让我输出注册人的运动。
And down here let me output the registrant's sport.

1765
01:28:23,569 --> 01:28:27,829
再一次，这与我们花在SQL和Python上的时间更相似
So again, this is more similar to the time we spent on SQL and Python

1766
01:28:27,829 --> 01:28:30,349
比现在的HTML和CSS要多。
than it is to HTML and CSS right now.

1767
01:28:30,350 --> 01:28:32,820
现在，我要遍历所有行。
Now I'm iterating over all of the rows.

1768
01:28:32,819 --> 01:28:35,419
而且，如果您愿意，我们甚至可以更改语义。
And if you prefer, let's change even the semantics.

1769
01:28:35,420 --> 01:28:36,535
让我们回到这里。
Let's go back over here.

1770
01:28:36,534 --> 01:28:38,659
就像几周前一样，让我们来做。
Let's do it just like we did a couple of weeks ago.

1771
01:28:38,659 --> 01:28:43,039
让我们返回一堆行，将这些行传递到我的模板中，
Let's just get back a bunch of rows, pass in those rows to my template,

1772
01:28:43,039 --> 01:28:45,239
现在遍历这些行。
and now iterate over those rows.

1773
01:28:45,239 --> 01:28:49,189
每行都有一个名称字段，每行都有一个运动字段。
And each row has a name field, and each row has a sport field.

1774
01:28:49,189 --> 01:28:51,029
因此，这也将是等效的。
So that too would be equivalent.

1775
01:28:51,029 --> 01:28:53,059
但是，一旦您了解了差异，就让我们
But once you understand the difference, let's

1776
01:28:53,060 --> 01:28:56,170
称其为真实名称，而不是更通用的行，
call it what they really are instead of this more generic row,

1777
01:28:56,170 --> 01:28:57,440
所以让我还原一下。
so let me revert that.

1778
01:28:57,439 --> 01:29:00,629
现在，让我继续并重新运行代码。
Now let me go ahead and rerun the code.

1779
01:29:00,630 --> 01:29:03,950
让我试着击败其他所有人，输入David进行躲避球，
Let me try to beat everyone else to the punch, type in David for dodgeball,

1780
01:29:03,949 --> 01:29:07,014
还有，哦，天哪，好多人。
and, Oh my god, OK, lot of people.

1781
01:29:07,015 --> 01:29:09,890
好，新的更好的苛刻，好吧，所以您的工作真的很快
OK, new and better Harsh, all right, so you're working really quickly

1782
01:29:09,890 --> 01:29:10,850
它应该看起来。
it should seem.

1783
01:29:10,850 --> 01:29:12,840
所以现在我们看到了所有相同的结果。
So now we see all of the same results.

1784
01:29:12,840 --> 01:29:14,540
现在数据库真的跳了。
The database is really hopping now.

1785
01:29:14,539 --> 01:29:16,587
我对进一步滚动感到有些紧张，
I'm a little nervous about scrolling any further,

1786
01:29:16,587 --> 01:29:17,879
所以我要把它留在那里。
so I'm going to leave it there.

1787
01:29:17,880 --> 01:29:20,450
但是老实说，我们现在有一个完整的Web应用程序
But we now have a full fledged web application honestly

1788
01:29:20,449 --> 01:29:23,599
现在，它更能代表现实世界的网站。
that is now much more representative of real world websites.

1789
01:29:23,600 --> 01:29:27,350
我们使用SQL拥有自己的数据库，我们动态地拥有自己的模板
We have our own database using SQL, we have our own templates dynamically

1790
01:29:27,350 --> 01:29:29,790
生成这张表，即使目前很丑陋，
generating this table even though it's ugly at the moment,

1791
01:29:29,789 --> 01:29:32,497
但我当然可以通过一些CSS或一些Bootstrap来美化它
but I could certainly beautify it with some CSS or some Bootstrap

1792
01:29:32,497 --> 01:29:33,389
特别是。
in particular.

1793
01:29:33,390 --> 01:29:36,830
但是，我们现在拥有一个功能全面的网站。
But we now have a fully functioning website.

1794
01:29:36,829 --> 01:29:38,376
蛋糕上的糖霜是什么？
What would be the icing on the cake?

1795
01:29:38,377 --> 01:29:38,960
你知道吗？
You know what?

1796
01:29:38,960 --> 01:29:41,360
即使我们认为是理所当然的，它也很酷
It's pretty cool, even though we take it for granted

1797
01:29:41,359 --> 01:29:43,519
网站通过电子邮件向您发送确认消息时。
when a website emails you a confirmation.

1798
01:29:43,520 --> 01:29:47,420
如果像我几年前一样添加一项最终功能该怎么办
What if we add one final feature just like I actually did years ago

1799
01:29:47,420 --> 01:29:52,970
您通过电子邮件向注册人或您自己报告
whereby you email the registrant or yourself to report

1800
01:29:52,970 --> 01:29:54,710
有人实际注册过吗？
that someone has actually registered?

1801
01:29:54,710 --> 01:29:56,370
那么我们如何去做呢？
So how can we go about doing this?

1802
01:29:56,369 --> 01:29:58,529
好吧，让我在这里回到我的代码中。
Well, let me go back into my code here.

1803
01:29:58,529 --> 01:30:00,559
最后，让我补充一句。
And let me add one final flourish.

1804
01:30:00,560 --> 01:30:02,600
我要滚动到此处的顶部，然后
I'm going to scroll up to the top here, and I'm

1805
01:30:02,600 --> 01:30:04,370
要导入另一个库。
going to import another library.

1806
01:30:04,369 --> 01:30:07,684
从Flask邮件导入邮件和消息。
From Flask mail import mail and message.

1807
01:30:07,685 --> 01:30:10,310
再说一次，您只会从课堂上知道要做这些事情，
And again, you would only know to do these things from a class,

1808
01:30:10,310 --> 01:30:12,560
从文档，从教程等。
from the documentation, from a tutorial or the like.

1809
01:30:12,560 --> 01:30:14,850
我提前查了一下，看看该怎么做。
I looked it up in advance to see how to do this.

1810
01:30:14,850 --> 01:30:17,160
然后，根据文档，我必须
And then I have to, according to the documentation,

1811
01:30:17,159 --> 01:30:19,159
需要一堆初始化步骤
there's a bunch of initialization steps required

1812
01:30:19,159 --> 01:30:22,939
当您想编写Python代码以编程方式生成电子邮件时。
when you want to write Python code to generate emails programmatically.

1813
01:30:22,939 --> 01:30:24,999
您必须知道您的用户名，密码，
You've got to know your username, your password,

1814
01:30:25,000 --> 01:30:26,250
以及许多其他设置。
and a bunch of other settings.

1815
01:30:26,250 --> 01:30:28,310
因此，让我继续进行配置。
So let me go ahead and configure those now.

1816
01:30:28,310 --> 01:30:35,480
应用程序点配置，引用不加引号，邮件默认发件人为1。
App dot config, quote unquote, mail default sender is one.

1817
01:30:35,479 --> 01:30:37,849
我将继续将其设置为os
And I'm going to go ahead and set that equal to os

1818
01:30:37,850 --> 01:30:42,140
点获取邮件默认发件人的环境。
dot get env of mail default sender.

1819
01:30:42,140 --> 01:30:44,687
因此，默认发件人是指默认电子邮件地址。
So default sender refers to a default email address.

1820
01:30:44,686 --> 01:30:47,269
例如，如果我希望所有这些电子邮件都来自我，
So for instance, if I wanted all these emails to come from me,

1821
01:30:47,270 --> 01:30:48,510
我可以做这样的事情。
I could do something like that.

1822
01:30:48,510 --> 01:30:51,350
但是相反，我将它们存储在其他位置的变量中，因为我
But instead I'm going to store them in variables elsewhere because I

1823
01:30:51,350 --> 01:30:54,290
预先预先配置了我的ID，因此没有人可以看到我的用户名
pre-configured my ID in advance so that no one could see my username

1824
01:30:54,289 --> 01:30:55,139
和密码。
and password.

1825
01:30:55,140 --> 01:30:59,400
因此，我将从所谓的环境中获取其中一些价值。
So I'm just going to grab some of those values from the so-called environment.

1826
01:30:59,399 --> 01:31:01,484
您不会经常使用此功能，但我们会
You won't use this feature too often but we'll

1827
01:31:01,484 --> 01:31:03,109
在下一个问题集中向您展示。
show it to you in the next problem set.

1828
01:31:03,109 --> 01:31:05,419
这是一种访问变量的方式
It's a way of getting access to a variable that's

1829
01:31:05,420 --> 01:31:09,710
在您的IDE或Linux系统中的其他地方定义
been defined elsewhere in your IDE or in your Linux system

1830
01:31:09,710 --> 01:31:11,460
或Mac或PC。
or Mac or PC more generally.

1831
01:31:11,460 --> 01:31:13,460
好吧，我需要再定义其中一些。
All right, I need to define a few more of these.

1832
01:31:13,460 --> 01:31:15,500
让我继续，做一些样板，
Let me go ahead and just do some boilerplate,

1833
01:31:15,500 --> 01:31:19,652
即使这看起来像是一个小复制粘贴，
even though this looks like a little copy paste, which it is,

1834
01:31:19,653 --> 01:31:22,820
实际上这是必要的，因为邮件服务器有很多设置。
it is in fact necessary because there's a lot of settings for a mail server.

1835
01:31:22,819 --> 01:31:24,409
所以让我一次做一个。
So let me do them one at a time.

1836
01:31:24,409 --> 01:31:27,559
邮件密码，我也不希望您看到该密码，
Mail password, I don't want you to see that either,

1837
01:31:27,560 --> 01:31:33,590
因此，我将继续从我的环境中获取该密码，即邮件密码。
so I'm going to go ahead and grab that from my environment, mail password.

1838
01:31:33,590 --> 01:31:38,570
让我们看一下，我需要一个邮件端口，邮件端口，所以将是587。
Let's see, I need a mail port, mail port, so that's going to be 587.

1839
01:31:38,569 --> 01:31:40,789
原来我要使用Gmail和Gmail
It turns out I'm going to use Gmail, and Gmail

1840
01:31:40,789 --> 01:31:46,169
使您可以在TCP端口587上发送电子邮件，因此我在文档中进行了查询
lets you send email on TCP port 587, so I looked that up in the documentation

1841
01:31:46,170 --> 01:31:46,830
也。
too.

1842
01:31:46,829 --> 01:31:49,859
邮件服务器实际上将是SMTP点gmail.com。
Mail server in fact will be SMTP dot gmail.com.

1843
01:31:49,859 --> 01:31:53,309
我在Google的文档中发现了这一点。
I found that on Google's documentation.

1844
01:31:53,310 --> 01:31:57,630
邮件使用TLS（一种加密类型），
Mail use TLS, which is a type of encryption,

1845
01:31:57,630 --> 01:31:59,790
让我继续并将其实现为真实。
let me go ahead and enable that as true.

1846
01:31:59,789 --> 01:32:02,549
然后最后发送用户名，我不要
And then lastly mail username, I don't want

1847
01:32:02,550 --> 01:32:04,470
您知道我正在使用什么用户名，但是我在
you to know what username I'm using, but I'm

1848
01:32:04,470 --> 01:32:07,997
将继续从我的环境（用户名）中获取该信息。
going to go ahead and grab this from my environment, username.

1849
01:32:07,997 --> 01:32:09,330
这实际上是故意的。
And this is actually deliberate.

1850
01:32:09,329 --> 01:32:11,204
虽然我说的是脸颊上的舌头，
Though I'm sort of saying it tongue in cheek,

1851
01:32:11,204 --> 01:32:15,929
输入用户名，密码或其他任何东西都是不好的做法
it is bad, bad practice to type in usernames, passwords, or anything

1852
01:32:15,930 --> 01:32:19,380
远程私有或保护到您的代码中。
remotely private or secure into your code.

1853
01:32:19,380 --> 01:32:22,320
因为想像您是否键入了自己的Gmail用户名或密码
Because imagine if you did type your own Gmail username or password

1854
01:32:22,319 --> 01:32:24,479
进入该程序只是为了从字面上尝试
into this program just to try it out literally

1855
01:32:24,479 --> 01:32:28,349
现在在家，然后您可以提交50或支票50，您猜怎么着？
right now at home and then you can submit50 or check50, guess what?

1856
01:32:28,350 --> 01:32:31,680
您是将用户名和密码发送给我们，工作人员，
You're sending your username and password to us, the staff,

1857
01:32:31,680 --> 01:32:33,720
更不用说GitHub和整个互联网了，
not to mention GitHub and the whole internet,

1858
01:32:33,720 --> 01:32:35,700
通过将其包含在您的源代码中。
by including it in your source code.

1859
01:32:35,699 --> 01:32:38,669
因此，虽然我在这里做的事情很有趣，
So while I'm sort of making fun at what I'm doing here,

1860
01:32:38,670 --> 01:32:42,840
这些环境变量中的私有信息存储
this storing of private information in these environment variables

1861
01:32:42,840 --> 01:32:45,870
实际上是最佳做法，因为这意味着它不在我的代码中，
is actually best practice because it means it's not in my code,

1862
01:32:45,869 --> 01:32:49,464
我不会无意间将其复制并粘贴到其他位置。
I'm not going to accidentally copy and paste it elsewhere.

1863
01:32:49,465 --> 01:32:52,590
好吧，我需要导入另一件事，这将解释所有这些
All right, I need to import one other thing which will explain all of these

1864
01:32:52,590 --> 01:32:53,760
红色的X。
red X's.

1865
01:32:53,760 --> 01:32:56,430
我还需要导入操作系统。
I need to also import OS.

1866
01:32:56,430 --> 01:32:59,670
因此，导入整个操作系统有点大胆的主张，
So it's kind of a bold claim to import a whole operating system,

1867
01:32:59,670 --> 01:33:02,520
但确实有Python随附的程式库
but there's indeed a library that comes with Python

1868
01:33:02,520 --> 01:33:06,150
称为OS，可让您访问这些环境变量之类的内容
called OS which gives you access to things like these environment variables

1869
01:33:06,149 --> 01:33:08,019
和别的。
and others.

1870
01:33:08,020 --> 01:33:08,520
喔。
Whoo.

1871
01:33:08,520 --> 01:33:08,910
好的。
OK.

1872
01:33:08,909 --> 01:33:10,979
太多了，我需要最后一行代码，
That was a lot, and I need one last line of code,

1873
01:33:10,979 --> 01:33:14,009
一个等于通过我的烧瓶的邮件变量
a mail variable equal to passing my Flask

1874
01:33:14,010 --> 01:33:17,830
应用程序称为邮件的功能。
application to a function called mail.

1875
01:33:17,829 --> 01:33:18,329
好的。
All right.

1876
01:33:18,329 --> 01:33:20,909
我认为所有这些错误很快就会消失，
I think all of those errors will soon go away,

1877
01:33:20,909 --> 01:33:22,829
我觉得这对我来说有点慢。
I think it's just being a little slow on me.

1878
01:33:22,829 --> 01:33:25,409
现在开始实际发送邮件。
Let's go ahead now and actually send mail.

1879
01:33:25,409 --> 01:33:27,119
确实，红色错误已消失。
Indeed the red errors are gone.

1880
01:33:27,119 --> 01:33:31,979
让我向下滚动，然后再将用户重定向到斜杠注册者
Let me scroll down, and before I redirect the user to slash registrants

1881
01:33:31,979 --> 01:33:34,499
但是在注册他们之后，让我继续执行此操作。
but after registering them, let me go ahead and do this.

1882
01:33:34,500 --> 01:33:37,979
让我定义一个等于大写消息的消息变量，它
Let me define a message variable equal to capital message, which

1883
01:33:37,979 --> 01:33:41,009
是我从该库导入的功能，
is the feature I imported from that library,

1884
01:33:41,010 --> 01:33:44,580
让我创建您已注册的主题行！
and let me create a subject line of You are registered!

1885
01:33:44,579 --> 01:33:46,559
让我继续吧。
And let me go ahead and, huh.

1886
01:33:46,560 --> 01:33:49,230
哦，我实际上不知道将其发送给谁，所以可以。
Oh, I don't actually know who to send this to, so that's OK.

1887
01:33:49,229 --> 01:33:51,009
让我们继续并在此处进行更改。
Let's go ahead and change something here.

1888
01:33:51,010 --> 01:33:54,840
让我们继续，让用户不要问他们的名字，
Let's go ahead and have the user ask not for their name,

1889
01:33:54,840 --> 01:33:57,600
让我们现在向用户询问他们的电子邮件。
let's ask the user for their email now.

1890
01:33:57,600 --> 01:34:02,730
因此，我将更改我的实际表格，以要求他们发送电子邮件。
So I'm going to change my actual form to ask for their email instead.

1891
01:34:02,729 --> 01:34:07,619
现在让我回到这里，让我回到这里
And now let me go back over here, and let me go back in here

1892
01:34:07,619 --> 01:34:14,409
并设置收件人的第二个参数等于电子邮件。
and set a second argument of recipients equals email.

1893
01:34:14,409 --> 01:34:15,789
让我在这里更改此设置。
And let me change this here.

1894
01:34:15,789 --> 01:34:18,819
让我继续，从表单中获取用户的电子邮件。
Let me go ahead and get the user's email from the form.

1895
01:34:18,819 --> 01:34:22,119
如果没有电子邮件，我们对他们大喊大叫并说出丢失的电子邮件。
If there is no email let's yell at them and say missing email.

1896
01:34:22,119 --> 01:34:23,739
运动保持不变。
Sport is unchanged.

1897
01:34:23,739 --> 01:34:26,354
让我们继续并插入注册人。
Let's go ahead and insert into registrants.

1898
01:34:26,354 --> 01:34:29,229
您知道什么，让我们不必费心地将其实际插入数据库中。
You know what, let's not bother inserting into the database actually.

1899
01:34:29,229 --> 01:34:30,649
让我们保持这个超级简单。
Let's keep this super simple.

1900
01:34:30,649 --> 01:34:32,209
让我们摆脱SQL的东西。
Let's get rid of the SQL stuff.

1901
01:34:32,210 --> 01:34:34,630
让我们发送确认电子邮件。
Let's just have it send a confirmation email.

1902
01:34:34,630 --> 01:34:35,560
因此，它甚至更简单。
So it's even simpler.

1903
01:34:35,560 --> 01:34:38,330
在这里，我们将重点完全放在电子邮件上。
We'll keep the focus entirely on email here.

1904
01:34:38,329 --> 01:34:41,319
因此，我创建了带有主题行和
So I've created the message with a subject line and the

1905
01:34:41,319 --> 01:34:44,139
可以说是通过接收者排队的。
to line, so to speak, via the recipients.

1906
01:34:44,140 --> 01:34:48,790
现在，我将继续发送邮件点发送消息。
Now I'm going to go ahead and send mail dot send message.

1907
01:34:48,789 --> 01:34:49,659
救。
Save.

1908
01:34:49,659 --> 01:34:51,999
这是我将一如既往地手指交叉的地方。
Here's where I'm going to cross my fingers as always.

1909
01:34:52,000 --> 01:34:54,490
我现在要继续运行该程序。
I'm going to go ahead now and run this program.

1910
01:34:54,489 --> 01:34:56,979
我要重新启动，在这里重新加载我的表格。
I'm going to restart, reload my form here.

1911
01:34:56,979 --> 01:34:58,689
确实是在要求我发送电子邮件。
It's indeed asking me for email.

1912
01:34:58,689 --> 01:35:03,519
让我继续输入，比如说约翰·哈佛在这里的地址。
Let me go ahead and type in, let's say John Harvard's address here.

1913
01:35:03,520 --> 01:35:06,370
像我一样，约翰·哈佛（John Harvard）将注册躲避球，
John Harvard, like me, will register for dodgeball,

1914
01:35:06,369 --> 01:35:08,619
让我走，然后单击注册。
and let me go and click Register.

1915
01:35:08,619 --> 01:35:14,049
现在该网站将要说内部服务器错误，这很令人惊讶
Now the website is about to say internal server error, which comes as a surprise

1916
01:35:14,050 --> 01:35:16,570
对我来说，但让我看看为什么。
to me, but let me see why.

1917
01:35:16,569 --> 01:35:19,599
哦，我不小心还在使用数据库。
Oh I accidentally am still using the database.

1918
01:35:19,600 --> 01:35:23,410
所以让我解决这个问题。
So let me fix this.

1919
01:35:23,409 --> 01:35:27,429
让我继续，由于我们不再使用数据库，
Let me go ahead and, since we're not using the database anymore,

1920
01:35:27,430 --> 01:35:31,360
让我继续并返回到我们更简单的return渲染模板
let me go ahead and revert to our simpler return render template

1921
01:35:31,359 --> 01:35:33,039
成功点HTML。
success dot HTML.

1922
01:35:33,039 --> 01:35:33,909
好的。
All right.

1923
01:35:33,909 --> 01:35:35,119
用户错误。
User error.

1924
01:35:35,119 --> 01:35:38,609
让我继续并重新启动服务器。
Let me go ahead and restart the server.

1925
01:35:38,609 --> 01:35:41,909
好的，网关不好，还有其他问题，我们开始吧。 jharvard @ cs50。
OK, bad gateway, whole other problem, here we go. jharvard@cs50.

1926
01:35:41,909 --> 01:35:45,299
现在让我继续注册躲避球。
Let me go ahead now and register for dodgeball.

1927
01:35:45,300 --> 01:35:46,320
登记。
Register.

1928
01:35:46,319 --> 01:35:47,889
交叉我的手指。
Crossing my fingers.

1929
01:35:47,890 --> 01:35:51,960
我已经注册，确实，让我们转到其他浏览器
I am registered, and indeed, let's go over to my other browser

1930
01:35:51,960 --> 01:35:54,300
在这里打开Gmail。
here where I have Gmail open.

1931
01:35:54,300 --> 01:35:58,450
我目前在这里假扮成John Harvard在Gmail中。
I am currently masquerading as John Harvard in Gmail here.

1932
01:35:58,449 --> 01:36:02,639
让我继续刷新收件箱，哦，我的天哪，CS50发出的消息
Let me go ahead and refresh my inbox, and oh my god, a message from the CS50

1933
01:36:02,640 --> 01:36:05,580
我确实已注册的Bot。
bot that I am indeed registered.

1934
01:36:05,579 --> 01:36:08,429
因此，现在我们有了一种发送电子邮件的程序化方式。
So now we have a programmatic way of sending emails.

1935
01:36:08,430 --> 01:36:10,830
我打了两次，所以这次我收到了两封电子邮件。
I hit it twice, so I got two emails this time.

1936
01:36:10,829 --> 01:36:17,189
但是确实，我现在也已经动态生成了电子邮件。
But indeed I've now dynamically generated emails as well.

1937
01:36:17,189 --> 01:36:18,179
很多。
A lot.

1938
01:36:18,180 --> 01:36:22,560
但是这些想法实际上只是基于模板
But the ideas really are just based on templates

1939
01:36:22,560 --> 01:36:25,920
以及将控制器逻辑和应用程序点py放入其中的想法
and the idea of sort of putting our controller logic and application dot py

1940
01:36:25,920 --> 01:36:28,800
以及所有用户的审美观和我们所谓的观点，
and all of the user aesthetics and our so-called views,

1941
01:36:28,800 --> 01:36:32,460
现在我们有了数据库或某种程度上的电子邮件后端，
and now that we've had a database or in some sense an email backend,

1942
01:36:32,460 --> 01:36:36,180
现在我们也有了一个模型的概念，在该模型中实际存储了数据
now we also have the notion of a model where the data is actually being stored

1943
01:36:36,180 --> 01:36:38,490
或在这种情况下，发送。
or in this case, sent.

1944
01:36:38,489 --> 01:36:41,399
任何疑问或困惑或澄清
Any questions or confusion or clarifications

1945
01:36:41,399 --> 01:36:50,169
有关使用SQLite或电子邮件或Frosh IM的任何功能的信息？
here on the use of SQLites or email or any of these Frosh IMs features?

1946
01:36:50,170 --> 01:36:50,810
好的。
All right.

1947
01:36:50,810 --> 01:36:54,302
那么，为什么在舞台上有一个装有饼干的购物车呢？
So why is there a shopping cart with cookies on the stage?

1948
01:36:54,301 --> 01:36:56,509
好吧，让我们休息最后的五分钟。
Well for that let's take our final five minute break.

1949
01:36:56,510 --> 01:36:58,060
我们会回来，谈论称为会议的事情，
We'll come back, talk about something called sessions,

1950
01:36:58,060 --> 01:37:00,520
并构建更复杂的Web应用程序。
and build even more sophisticated web apps.

1951
01:37:00,520 --> 01:37:01,390
回到五。
Back in five.

1952
01:37:01,390 --> 01:37:04,330
好吧，我们回来了，有一个我们还没有真正实现的功能
All right, we're back, and there's one feature that we haven't really

1953
01:37:04,329 --> 01:37:07,287
从根本上涉及网络编程，
fundamentally touched on at all when it comes to web programming,

1954
01:37:07,287 --> 01:37:09,579
这是你我每天都理所当然的事情，
and it's one that you and I take for granted every day,

1955
01:37:09,579 --> 01:37:13,779
每当我们登录某个网站，在线购买商品或进行互动时
any time we log into some website, buy something online, or generally interact

1956
01:37:13,779 --> 01:37:15,429
动态网站。
with dynamic websites.

1957
01:37:15,430 --> 01:37:18,890
这是通常称为会话的功能。
And that's a feature that's generally known as sessions.

1958
01:37:18,890 --> 01:37:22,630
Web应用程序内置了一种机制，无论它们是否
There is a mechanism built into web applications, whether they're

1959
01:37:22,630 --> 01:37:26,410
以Flask或其他框架或语言实施
implemented in Flask or in other frameworks or languages that

1960
01:37:26,409 --> 01:37:29,379
让网络服务器记住一些关于您的信息。
allow the web servers to remember a little something about you.

1961
01:37:29,380 --> 01:37:31,960
这对于当今的网络工作非常重要，
And this is super important to how the web today works,

1962
01:37:31,960 --> 01:37:35,770
因为没有它，您将无法登录Gmail或任何其他网站
because without it you wouldn't be able to log in to Gmail or to any other site

1963
01:37:35,770 --> 01:37:38,650
并让网站记住您已登录。
and have the website remember that you are logged in.

1964
01:37:38,649 --> 01:37:40,779
毕竟，考虑一下，当您登录Gmail时，
Consider, after all, when you log in to Gmail,

1965
01:37:40,779 --> 01:37:44,289
您输入您的用户名，密码，或者您的两因素身份验证
you type your username, your password, maybe your two-factor authentication

1966
01:37:44,289 --> 01:37:46,149
代码，然后您会看到您的收件箱。
code, and then you see your inbox.

1967
01:37:46,149 --> 01:37:49,899
从那里，下次打开时，系统不会提示您再次登录
And from there, you're not prompted to log in again the next time you open

1968
01:37:49,899 --> 01:37:52,119
一封电子邮件，然后下次您打开一封电子邮件时，
an email and then the next time you open an email,

1969
01:37:52,119 --> 01:37:55,869
您会保持登录状态数分钟或数小时，甚至几天
you stay logged in for some number of minutes or hours or even days

1970
01:37:55,869 --> 01:37:56,679
在你的电脑。
on your computer.

1971
01:37:56,680 --> 01:38:00,370
即使关闭浏览器标签，即使关闭计算机，
Even if you close the browser tab, even if you shut down your computer,

1972
01:38:00,369 --> 01:38:04,059
当您经常返回Gmail时，您仍处于登录状态，
when you come back to Gmail quite often, you're still logged in,

1973
01:38:04,060 --> 01:38:06,940
并从某种意义上记住您已经登录。
and it remembers in some sense that you have been logged in.

1974
01:38:06,939 --> 01:38:08,869
好吧，这实际上如何工作？
Well, how does this actually work?

1975
01:38:08,869 --> 01:38:11,629
在幕后，无论何时您访问gmail.com，
Well underneath the hood, anytime you visit gmail.com,

1976
01:38:11,630 --> 01:38:16,030
您的浏览器正在发送像这样的斜杠请求，默认
your browser is sending a request like this for slash, the default

1977
01:38:16,029 --> 01:38:19,752
gmail.com的路线，希望您可以看到自己的收件箱，
route of gmail.com, and hopefully you're going to either see your inbox,

1978
01:38:19,752 --> 01:38:22,669
或者，如果您尚未登录，则将看到该登录屏幕。
or if you're not yet logged in, you're going to see that login screen.

1979
01:38:22,670 --> 01:38:24,795
确实，反应可能会回来
Indeed, the response is probably going to come back

1980
01:38:24,795 --> 01:38:28,120
大约200 OK，文本HTML的内容类型，
along the lines of 200 OK, content type of text HTML,

1981
01:38:28,119 --> 01:38:30,969
这就是您看到登录表单或收件箱的时间。
and that's when you see the login form or your inbox.

1982
01:38:30,970 --> 01:38:33,580
但是回想一下上周还有其他HTTP标头
But recall from last week there's other HTTP headers

1983
01:38:33,579 --> 01:38:36,459
可以藏在那个虚拟信封里面
that can be tucked inside of that virtual envelope that

1984
01:38:36,460 --> 01:38:40,900
向浏览器和服务器提供有关它们应如何互操作的提示。
provide hints to the browser and server as to how they should interoperate.

1985
01:38:40,899 --> 01:38:42,829
确实，这就是HTTP的全部意义。
That's indeed what HTTP is all about.

1986
01:38:42,829 --> 01:38:46,389
这是一组协议的约定，用于控制浏览器和服务器的方式
It's a protocol set of conventions that govern how browsers and servers should

1987
01:38:46,390 --> 01:38:47,410
互操作。
interoperate.

1988
01:38:47,409 --> 01:38:52,329
事实证明，有时此服务器返回称为cookie的东西。
And it turns out that sometimes this server returns what are called cookies.

1989
01:38:52,329 --> 01:38:54,009
而且您听说过Cookie的可能性很高。
And odds are you've heard of cookies.

1990
01:38:54,010 --> 01:38:55,840
奇怪的是，您对Cookie有所了解
Odds are you have some sense that cookies

1991
01:38:55,840 --> 01:39:01,540
是有害或危险的，但也有必要，确实，所有这些都是正确的。
are bad or dangerous but also necessary, and indeed, all of that is true.

1992
01:39:01,539 --> 01:39:06,159
Cookies本质上是数据甚至文件
Cookies are essentially pieces of data or even files

1993
01:39:06,159 --> 01:39:08,829
安装在您的计算机或手机上的
that are planted on your computer or your phone

1994
01:39:08,829 --> 01:39:13,089
由帮助他们记住您曾经去过的服务器的服务器。
by a server that help them remember that you've been there before.

1995
01:39:13,090 --> 01:39:16,720
从某种意义上讲，它们可以帮助您记住自己，甚至是网站
In some sense, they help remember who you are, but even websites

1996
01:39:16,720 --> 01:39:20,400
您没有登录到手机上的情况很常见，
that you're not logging into very often put cookies onto your phone,

1997
01:39:20,399 --> 01:39:22,869
或您的笔记本电脑或台式机
or your laptop or desktop which essentially might

1998
01:39:22,869 --> 01:39:26,769
是一个只有您才能得到的大随机数，即使他们不知道
be a big random number that only you are given so that even if they don't know

1999
01:39:26,770 --> 01:39:30,550
是Maggie访问过该网站，Ryan，Nicole或其他人，
that it's Maggie who's visited the site, or Ryan, or Nicole, or someone else,

2000
01:39:30,550 --> 01:39:35,120
他们知道以前已经看到过唯一标识符。
they know that unique identifier has been seen before.

2001
01:39:35,119 --> 01:39:37,189
因此，他们可以跟踪您的行为。
And they can therefore track your behavior.

2002
01:39:37,189 --> 01:39:39,999
因此，如果您听说过跟踪Cookie一词，仅此而已。
So if you've heard the term tracking cookies, that's all it is.

2003
01:39:40,000 --> 01:39:43,180
这是一些数据，是一个很大的随机数
It's some piece of data, a big random number that's

2004
01:39:43,180 --> 01:39:47,710
已安装在您的浏览器上，然后您的浏览器便会记住它。
been installed on your browser that your browser then remembers.

2005
01:39:47,710 --> 01:39:51,010
机制很简单：HTTP标头之一
And the mechanism is as simple as this: one of the HTTP headers

2006
01:39:51,010 --> 01:39:53,530
从服务器到浏览器的字面意思
that comes from server to browser literally

2007
01:39:53,529 --> 01:39:58,299
设置为破折号cookie，冒号，然后是cookie的名称（例如会话），
is set dash cookie, colon, then the name of a cookie, for instance session,

2008
01:39:58,300 --> 01:40:01,870
然后是值，该值可能是那个大随机数。
and then value, and the value might be that big random number.

2009
01:40:01,869 --> 01:40:04,419
同样由于HTTP，这是一个协议
And because of HTTP, again, it's a protocol

2010
01:40:04,420 --> 01:40:06,610
浏览器和服务器一起说话，
that browsers and servers speak together,

2011
01:40:06,609 --> 01:40:12,369
浏览器旨在将Cookie发送回每个后续页面
the browsers are designed to send that cookie back to every subsequent page

2012
01:40:12,369 --> 01:40:15,129
您访问gmail.com或您所使用的任何服务器。
you visit on gmail.com or whatever server you're on.

2013
01:40:15,130 --> 01:40:18,760
换句话说，当您访问gmail.com之后的一个小时之后，
In other words, when you visit gmail.com then an hour from now,

2014
01:40:18,760 --> 01:40:22,090
甚至在关闭标签后，甚至在睡觉后的明天，
even after closing your tabs, or even tomorrow after going to sleep,

2015
01:40:22,090 --> 01:40:25,510
您的浏览器不仅会发送这些标头，如果您
your browser is not only sending these headers, if you

2016
01:40:25,510 --> 01:40:30,040
之前已从gmail.com获得cookie，那么您的浏览器会发送
have been given a cookie from gmail.com before, your browser sends

2017
01:40:30,039 --> 01:40:34,689
一个相似的标题，但没有设置单词，它表示cookie，冒号，
a similar header but without the word set, it says cookie, colon,

2018
01:40:34,689 --> 01:40:36,469
会话等于值。
session equals value.

2019
01:40:36,470 --> 01:40:41,080
令您不为所知的是，您的浏览器会不断提醒服务器
So unbeknownst to you, your browser is constantly reminding the server

2020
01:40:41,079 --> 01:40:42,549
你以前去过那里。
that you've been there before.

2021
01:40:42,550 --> 01:40:46,000
当您身处其中时，这类似于现实世界，
And this is similar to the real world when you're perhaps in,

2022
01:40:46,000 --> 01:40:49,250
当您进入俱乐部，酒吧或游乐园时
when you go into a club or a bar or an amusement park

2023
01:40:49,250 --> 01:40:51,189
然后你穿过大门，通常
and you go through the gates, you typically

2024
01:40:51,189 --> 01:40:53,956
可以盖上您的手以使其返回。
are allowed back in by having your hand stamped.

2025
01:40:53,957 --> 01:40:56,290
这样，他们不必再次检查您的票
And this way they don't have to check your tickets again

2026
01:40:56,289 --> 01:40:58,839
或您的身份证之类的东西，他们只是在盖您的手
or your ID or the like, they just stamp your hand

2027
01:40:58,840 --> 01:41:02,180
这有点提醒您您曾经去过那里。
which is a little reminder that you have been there before.

2028
01:41:02,180 --> 01:41:04,840
因此，实际上，在这里，我有一张小邮票。
And so in fact, here, I've got a little stamp here.

2029
01:41:04,840 --> 01:41:08,320
如果我访问一个网站，就好像我的手被盖在这里，
If I visit a website, it's like my hand is being stamped here,

2030
01:41:08,319 --> 01:41:12,099
和我的浏览器，通过HTTP的设计应该
and my browser, by design of HTTP is supposed

2031
01:41:12,100 --> 01:41:14,860
到，每次我访问另一个页面时，单击另一个链接，
to, every time I visit another page, click another link,

2032
01:41:14,859 --> 01:41:17,529
就像你要回去一样代表我的手
represent my hand just like you're going back

2033
01:41:17,529 --> 01:41:20,289
进入酒吧，俱乐部或游乐园
into the bar or the club or the amusement park

2034
01:41:20,289 --> 01:41:24,009
提醒门口的那个人，保镖，你以前去过那里
to remind the person at the door, the bouncer, that you've been there before

2035
01:41:24,010 --> 01:41:28,490
并让您通过而不是提示您重新登录。
and to let you through rather than prompting you to log in again.

2036
01:41:28,489 --> 01:41:29,649
这就是cookie。
So that's what a cookie is.

2037
01:41:29,649 --> 01:41:32,859
就像贴在计算机上的虚拟手戳一样，
It is like this virtual hand stamp that's put on your computer,

2038
01:41:32,859 --> 01:41:36,679
但是您的计算机被设计为一次又一次地显示它。
but your computer is designed to present it again and again.

2039
01:41:36,680 --> 01:41:39,940
因此，如果您曾经想过有时会在一个网站上购物的话
So if you've ever wondered how sometimes you go shopping on one website

2040
01:41:39,939 --> 01:41:42,939
然后突然，令人毛骨悚然的是，您正在使用Facebook或其他工具，
and then all of a sudden, creepily you're on Facebook or something else,

2041
01:41:42,939 --> 01:41:46,209
而且您看到的是您在其他网站上没有买到的东西的广告，
and you're seeing ads for the very thing you didn't buy on this other website,

2042
01:41:46,210 --> 01:41:47,800
所有这些都来自Cookie。
that all derives from cookies.

2043
01:41:47,800 --> 01:41:50,400
长话短说，有广告公司
Long story short, there's advertising companies

2044
01:41:50,399 --> 01:41:53,189
Facebook和Google以及其他合作伙伴
that Facebook and Google and others partner with that

2045
01:41:53,189 --> 01:41:58,349
在网站上放置少量图像或JavaScript文件或其他此类文件，
put little images on the website or JavaScript files or other such files,

2046
01:41:58,350 --> 01:42:02,400
并且由于这些广告位于不同的网站上，因此共享了Cookie
and because those ads are on different websites the cookies are shared

2047
01:42:02,399 --> 01:42:04,499
在某种意义上跨多个网站。
across multiple websites in some sense.

2048
01:42:04,500 --> 01:42:06,819
因此，就像您不断展示您的手一样
So it's like you are constantly presenting your hand

2049
01:42:06,819 --> 01:42:09,149
给所有这些不同的第三方公司盖章，
stamp to all these different third party companies,

2050
01:42:09,149 --> 01:42:14,099
这就是他们向您宣传甚至在最坏的情况下跟踪您的方式。
and this is how they're advertising to you or even tracking you at worst.

2051
01:42:14,100 --> 01:42:18,220
顺便说一句，当您在浏览器中使用隐身模式或私有模式时，
As an aside, when you use incognito mode or private mode on your browser,

2052
01:42:18,220 --> 01:42:20,400
您所有的Cookie都会被暂时丢弃。
all of your cookies are temporarily thrown away.

2053
01:42:20,399 --> 01:42:22,599
您会得到一个空的饼干罐，可以这么说，
You get an empty cookie jar, so to speak,

2054
01:42:22,600 --> 01:42:24,263
这样看来您确实已登出。
so that you do appear to be logged out.

2055
01:42:24,262 --> 01:42:26,429
实际上，即使在上课时，我也使用了隐身模式
And in fact, even in class, I've used incognito mode

2056
01:42:26,430 --> 01:42:28,560
几次，因为我想重新开始而不是
a few times because I want to start fresh and not

2057
01:42:28,560 --> 01:42:32,670
让我有任何先前的点击或我们的先前演示弄乱了未来的演示。
have any of my prior clicks or our prior demos messing up future demos.

2058
01:42:32,670 --> 01:42:35,460
但是我这样做的原因仅仅是为了摆脱所有cookie
But the reason I was doing that was just to get rid of all cookies

2059
01:42:35,460 --> 01:42:37,650
因此，所有州。
and therefore all states.

2060
01:42:37,649 --> 01:42:40,919
因此，一方面，Cookie是非常重要且功能强大的
So on the one hand, cookies are an incredibly important and powerful

2061
01:42:40,920 --> 01:42:44,520
机制，但就可以说了，而且在此过程中还有更多，
mechanism, but suffice it to say, and more on this down the road,

2062
01:42:44,520 --> 01:42:49,540
它们可能会被滥用，尤其是在涉及到个人隐私或安全性时。
they can be misused, certainly when it comes to one's privacy or security.

2063
01:42:49,539 --> 01:42:52,289
因此，让我们专注于cookie的主要部分
So with that said, let's focus on the good part of cookies

2064
01:42:52,289 --> 01:42:55,349
考虑典型的网站如何记住您的登录信息。
and consider how a typical website remembers that you're logged in.

2065
01:42:55,350 --> 01:42:58,020
让我们采取一个非常简单的想法，并弄清楚
Let's take that very simple idea and make it clear

2066
01:42:58,020 --> 01:43:00,920
现在，有了代码，一切都在您的能力范围内。
that it's all within your power now with code to do this.

2067
01:43:00,920 --> 01:43:02,160
因此，让我们开始如下。
So let's start as follows.

2068
01:43:02,159 --> 01:43:04,019
我创建了一个名为login的新目录。
I've created a new directory called login

2069
01:43:04,020 --> 01:43:06,870
只是为了演示一个可以使人们登录的程序。
just to demonstrate a program that logs people in.

2070
01:43:06,869 --> 01:43:09,899
我的布局与以前相同，并且还添加了一个标签。
I've got my same layout as before, and I've added one more tag.

2071
01:43:09,899 --> 01:43:13,049
最好的做法是告诉浏览器您
It tends to be best practice to tell the browser that you're

2072
01:43:13,050 --> 01:43:14,640
本质上使用Unicode。
using essentially Unicode.

2073
01:43:14,640 --> 01:43:17,640
这样，我可以在HTML中包含表情符号和其他字符。
This way I can have emojis and other characters in my HTML.

2074
01:43:17,640 --> 01:43:21,420
因此，我添加了这五行内容，您将在Bootstrap的文档中看到该行
So I've added this line five which you'll see on Bootstrap's documentation

2075
01:43:21,420 --> 01:43:24,960
和其他网站，所以现在我对该页面有了一个很好的起点。
and other sites, so now I have sort of a good starting point for this page.

2076
01:43:24,960 --> 01:43:27,930
但是实际上没有内容，这里只定义了一个块，
But there's really no content, there's just a block being defined here,

2077
01:43:27,930 --> 01:43:28,680
阻止身体。
block body.

2078
01:43:28,680 --> 01:43:30,928
所以那只是我和以前一样的布局。
So that's just my same layout as before.

2079
01:43:30,927 --> 01:43:32,969
确实，如果我输入ls，您将看到一个应用程序
And indeed if I type ls you'll see an application

2080
01:43:32,970 --> 01:43:34,980
点py和模板文件夹。
dot py and a templates folder.

2081
01:43:34,979 --> 01:43:39,269
现在，在该模板文件夹中仅是布局点HTML。
In that templates folder for now is just layout dot HTML.

2082
01:43:39,270 --> 01:43:43,140
因此，让我们继续前进，开始编写一个以生活为目的的快速应用程序
So let's go ahead and start writing a quick application whose purpose in life

2083
01:43:43,140 --> 01:43:46,450
只是向用户提供一个表单，他们可以通过该表单登录
is just to present the user with a form via which they can log in

2084
01:43:46,449 --> 01:43:48,879
然后记住他们已登录。
and then remember that they are logged in.

2085
01:43:48,880 --> 01:43:51,780
因此，让我从Flask导入Flask。
So from Flask let me import Flask.

2086
01:43:51,779 --> 01:43:55,829
我还要导入重定向功能，渲染模板功能，
Let me also import the redirect function, the render template function,

2087
01:43:55,829 --> 01:43:59,609
请求变量，现在是会话变量。
the request variable, and now a session variable.

2088
01:43:59,609 --> 01:44:00,899
这是新事物。
This is something new.

2089
01:44:00,899 --> 01:44:03,779
然后在Flask会议上，让我继续
And then from Flask session, let me go ahead

2090
01:44:03,779 --> 01:44:08,459
并导入会话，然后在这里让我做应用程序来获取Flask，
and import session, and then down here let me do app gets Flask,

2091
01:44:08,460 --> 01:44:10,800
下划线，下划线，名称。
underscore, underscore, name.

2092
01:44:10,800 --> 01:44:13,620
现在，我需要文档中的其他几行代码。
And now I need a few more lines of code from documentation.

2093
01:44:13,619 --> 01:44:21,249
应用程式点设定，右方括号，工作阶段永久性为false，
App dot config, open bracket, session permanent equals false,

2094
01:44:21,250 --> 01:44:25,620
再次，这仅特定于称为Flask会话的库
and again, this is specific only to the library called Flask session

2095
01:44:25,619 --> 01:44:27,779
我正在使用的那个图书馆正在
that I'm using, and that library is going

2096
01:44:27,779 --> 01:44:30,659
从本质上来说，可以为我的应用启用手印。
to enable hand stamps, essentially, for my application.

2097
01:44:30,659 --> 01:44:34,229
我将对其进行配置以使用字面上的文件系统，
And I'm going to configure it to use literally the file system,

2098
01:44:34,229 --> 01:44:38,009
因此会话类型等于文件系统和文件系统
so session type equals file system, and file system

2099
01:44:38,010 --> 01:44:41,310
只是想说一下硬盘驱动器或我自己的IDE帐户，
is just fancy speak for the hard drive or my own IDE account,

2100
01:44:41,310 --> 01:44:44,280
这是使用数据库之类的替代方法
and this is an alternative to using a database or something

2101
01:44:44,279 --> 01:44:46,379
像这样，然后是会话应用。
else like that, and then session app.

2102
01:44:46,380 --> 01:44:48,610
所以这只是样板，我从字面上复制了
So this is just boilerplate, I literally copied

2103
01:44:48,609 --> 01:44:52,079
该库文档中的这三行内容。
these three lines from the documentation for this library.

2104
01:44:52,079 --> 01:44:54,539
但是要使用这个库，这也是
But to use this library, and this was also

2105
01:44:54,539 --> 01:44:56,939
刚才的邮件库是真的，
true of the mail library a moment ago, there's

2106
01:44:56,939 --> 01:44:59,339
我应该指出的另一个文件。
another file I should point out.

2107
01:44:59,340 --> 01:45:05,820
所以当我在这里时，我应该再创建一个我前面提到的文件
So when I am here, I should create one other file that I mentioned earlier

2108
01:45:05,819 --> 01:45:09,809
但是我们还没有创建自己，这次称为需求点文本。
but we haven't created ourselves, this time called requirements dot text.

2109
01:45:09,810 --> 01:45:11,940
然后将其放入我的登录目录中，
And I'm going to put this into my login directory,

2110
01:45:11,939 --> 01:45:14,819
我将需要Flask用于此应用程序，
and I'm going to require Flask for this application,

2111
01:45:14,819 --> 01:45:19,119
而且我还将需要一个名为Flask session的库。
and I'm also going to require a library called Flask session.

2112
01:45:19,119 --> 01:45:21,589
再次重申，我之前在幻灯片上声称
So again, I claimed before on the slide that requirements

2113
01:45:21,590 --> 01:45:24,900
点文本只是需求的简单列表，您可以使用的库
dot text is just a simple list of the requirements, the libraries you

2114
01:45:24,899 --> 01:45:25,799
想要使用。
want to use.

2115
01:45:25,800 --> 01:45:28,800
还有一些您将在命令行中使用的命令
And there are commands you will use at the command line

2116
01:45:28,800 --> 01:45:30,390
安装这些要求。
to install those requirements.

2117
01:45:30,390 --> 01:45:32,160
对于问题集，您通常不需要这样做，
You won't typically need to do this for the problem set,

2118
01:45:32,159 --> 01:45:34,439
但是，如果您要安装，就这样您已经看过了
but just so you've seen it, if you want to install

2119
01:45:34,439 --> 01:45:37,139
Python应用程序的要求，
the requirements for a Python application,

2120
01:45:37,140 --> 01:45:39,000
您通常执行这样的命令。
you typically do a command like this.

2121
01:45:39,000 --> 01:45:42,983
点安装破折号r，要求点文本。
Pip install dash r, requirements dot text.

2122
01:45:42,983 --> 01:45:45,150
而且我不会这样做，因为我事先做了，
And I'm not going to do because I did it in advance,

2123
01:45:45,149 --> 01:45:49,499
但要知道，为了安装库，在Python中要容易得多
but just know that in order to install libraries, it's much easier in Python

2124
01:45:49,500 --> 01:45:51,839
比起C语言，他们倾向于
than it was, for instance, in C. They tend

2125
01:45:51,840 --> 01:45:55,260
通过称为“
to be more easily packageable via this technology called

2126
01:45:55,260 --> 01:45:56,257
点和类似的东西。
pip and things like it.

2127
01:45:56,256 --> 01:45:58,589
好吧，让我们继续，并创建一些路线。
All right, let's go ahead and create a couple of routes.

2128
01:45:58,590 --> 01:46:03,900
应用程式路线斜线def索引，因此就像以前一样，
App route slash def index, so just boilerplate as before,

2129
01:46:03,899 --> 01:46:08,369
让我们继续，简单地返回索引点的渲染模板
and let's just go ahead and simply return render template of index dot

2130
01:46:08,369 --> 01:46:15,269
默认情况下是HTML，然后让我们继续创建另一条路线，
HTML by default, and then let's go ahead and create one other route,

2131
01:46:15,270 --> 01:46:19,770
应用程序点路由斜杠登录，而在我的登录路由中，
app dot route slash login, and in my login route, which

2132
01:46:19,770 --> 01:46:22,410
将由登录功能控制，让我继续
will be governed by a login function, let me go ahead

2133
01:46:22,409 --> 01:46:25,979
并返回渲染模板登录。
and return render template login.

2134
01:46:25,979 --> 01:46:27,909
因此，让我们暂时保持简单。
So let's keep it simple for the moment.

2135
01:46:27,909 --> 01:46:30,039
现在让我继续实施此表格。
And now let me go ahead and implement this form.

2136
01:46:30,039 --> 01:46:31,949
因此，让我继续创建一个名为
So let me go ahead and create a file called

2137
01:46:31,949 --> 01:46:36,699
登录点HTML，其目的是拥有我的登录表单，
login dot HTML, whose purpose in life is just going to have my login form,

2138
01:46:36,699 --> 01:46:39,899
我在该登录表单中想要的只是用户名的空格。
and what I want in that login form is just a space for the user's name.

2139
01:46:39,899 --> 01:46:41,759
在现实世界中，我肯定会
In the real world, I would most certainly

2140
01:46:41,760 --> 01:46:45,048
进行用户名和密码之类的操作，
do something like a username and a password,

2141
01:46:45,047 --> 01:46:48,089
但是我们将保持简单，只关注思想的实质，
but we're going to keep it simple, focus only on the essence of the idea,

2142
01:46:48,090 --> 01:46:50,600
并执行类似用户名的操作。
and do something like just the user's name.

2143
01:46:50,600 --> 01:46:57,250
因此，在登录点HTML中，我将像以前一样扩展布局点HTML。
So, in login dot HTML, I'm going to extend layout dot HTML as before.

2144
01:46:57,250 --> 01:47:01,719
我将拥有我的积木，并且我将拥有我的结局标签，
I'm going to have my block body, and I'm going to have my end block tag,

2145
01:47:01,720 --> 01:47:05,110
然后在这里，我将有一个表单，该表单的动作
and then inside of here I'm going to have a form, the action for which

2146
01:47:05,109 --> 01:47:08,319
将是斜杠登录，将发布其方法。
will be slash login, the method for which will be post.

2147
01:47:08,319 --> 01:47:11,229
我将在此处执行最佳做法，我不希望我的用户名和密码
I'll do best practices here, I don't want my username and password

2148
01:47:11,229 --> 01:47:16,029
在现实世界中存储在人们的自动完成历史中。
in the real world being stored in people's autocomplete histories.

2149
01:47:16,029 --> 01:47:20,109
我来输入一下，自动填充等于正确测量，自动对焦
Let me do input, autocomplete equals off for good measure, autofocus

2150
01:47:20,109 --> 01:47:23,289
为了方便起见，名称等于用户的名称，
for convenience, name equals the user's name,

2151
01:47:23,289 --> 01:47:28,329
占位符，如前所述等于名称，然后键入等于文本。
placeholder as before equals name, and then type equals text.

2152
01:47:28,329 --> 01:47:30,969
然后在这里，输入类型等于提交。
And then down here, input type equals submit.

2153
01:47:30,970 --> 01:47:33,700
因此，这与我们以前的注册表格几乎相同
So this is almost the same to our previous forms for registering

2154
01:47:33,699 --> 01:47:36,889
等等，但是现在我将使用它进行登录。
and so forth, but now I'm going to use it for login purposes.

2155
01:47:36,890 --> 01:47:37,990
因此，让我们快速检查一下。
So let's do a quick check.

2156
01:47:37,989 --> 01:47:41,539
让我回到我的应用程序，运行Flask，
Let me go back to my application, do Flask run,

2157
01:47:41,539 --> 01:47:46,689
我将继续打开我的URL，首先看到的是错误，
I'm going to go ahead and open up my URL, and first error, let's see,

2158
01:47:46,689 --> 01:47:47,679
找不到模板。
template not found.

2159
01:47:47,680 --> 01:47:49,060
好的，这实际上是可以预期的。
OK, so that's actually expected.

2160
01:47:49,060 --> 01:47:51,700
我知道我没有创建索引点HTML，
I kind of knew I didn't create index dot HTML,

2161
01:47:51,699 --> 01:47:53,349
所以现在我可以确定该错误了。
so I'm OK with that error for now.

2162
01:47:53,350 --> 01:47:55,808
让我继续放大，因为我故意
Let me go ahead and zoom out though, because I deliberately

2163
01:47:55,807 --> 01:47:59,199
想去我的斜线登录路线，因为我想先测试一下。
wanted to go to my slash login route because I wanted to test that first.

2164
01:47:59,199 --> 01:48:00,549
那似乎行得通。
That seems to be working.

2165
01:48:00,550 --> 01:48:03,550
现在，让我们继续创建不存在的文件，
Now let's go ahead and create the file that doesn't exist,

2166
01:48:03,550 --> 01:48:08,950
索引点HTML，因此将索引点HTML放在模板的我的登录文件夹中，
index dot HTML, so index dot HTML, put this in my login folder in templates,

2167
01:48:08,949 --> 01:48:11,282
我将非常类似地执行此操作。
and I'm going to do this one pretty similarly.

2168
01:48:11,283 --> 01:48:14,200
我将继续复制粘贴内容只是为了节省一些击键，
I'm going to go ahead and copy paste just to save a bit of keystrokes,

2169
01:48:14,199 --> 01:48:17,169
但在这里我要说的是，您尚未登录，因为我确实
but here I'm going to say, you are not logged in because I literally

2170
01:48:17,170 --> 01:48:18,730
尚未实现该功能。
haven't implemented that feature yet.

2171
01:48:18,729 --> 01:48:20,179
这是很合理的。
So that's pretty reasonable.

2172
01:48:20,180 --> 01:48:22,360
让我继续并重新启动Flask。
Let me go ahead and restart Flask.

2173
01:48:22,359 --> 01:48:26,329
让我进入索引，我确实应该看到您尚未登录。
Let me go to my index, and I should see, indeed, you are not logged in.

2174
01:48:26,329 --> 01:48:29,424
但是，如果我要登录，则会看到我的登录表单。
But if I go to login, I see my login form.

2175
01:48:29,425 --> 01:48:31,300
因此，让它更具交互性。
So let's make this a little more interactive.

2176
01:48:31,300 --> 01:48:34,330
让我在这里进入索引点HTML并说：
Let me go into index dot HTML here and say,

2177
01:48:34,329 --> 01:48:40,569
您尚未登录，请使用href斜杠登录，登录和有效期。
you are not logged in, a href slash login, log in, period.

2178
01:48:40,569 --> 01:48:42,159
让我们创建一个更好的用户界面。
Let's create a better user interface.

2179
01:48:42,159 --> 01:48:47,569
因此，让我重新运行Flask，让我回到我的网页，点击reload，
So let me rerun Flask, let me go back to my web page, hit reload,

2180
01:48:47,569 --> 01:48:49,569
现在我有了用户界面的起点，
and now I have the beginnings of user interface,

2181
01:48:49,569 --> 01:48:51,609
超级简单，但是非常类似于网站
super simple, but very similar to a website

2182
01:48:51,609 --> 01:48:53,559
如果显示网页，则表明您未登录，
where if you're presented with the web page, you're not logged in,

2183
01:48:53,560 --> 01:48:55,900
系统会为您提供一个链接或一个按钮或用于登录的内容。
you're given a link or a button or something to log in.

2184
01:48:55,899 --> 01:48:58,239
如果我单击此按钮，这很简单
And if I click this, it's just a simple get

2185
01:48:58,239 --> 01:49:02,589
请求（这是链接的默认设置）以减少登录。
request, which is the default for links, to slash login.

2186
01:49:02,590 --> 01:49:04,030
所以我们快到了。
So we're almost there.

2187
01:49:04,029 --> 01:49:05,649
我们几乎有能力登录。
We almost have the ability to log in.

2188
01:49:05,649 --> 01:49:07,549
让我们对信息进行一些处理。
Let's do something with the information.

2189
01:49:07,550 --> 01:49:11,530
因此，让我回到应用程序点py，当用户登录时，
So let me go back to application dot py, and when the user logs in,

2190
01:49:11,529 --> 01:49:14,949
我到底想发生什么？
what is it I want to have happen exactly?

2191
01:49:14,949 --> 01:49:18,069
好吧，如果他们登录，首先，我想支持多个，
Well if they log in, first of all, I want to support multiple,

2192
01:49:18,069 --> 01:49:19,969
我想在这里支持帖子。
I want to support post here.

2193
01:49:19,970 --> 01:49:22,070
因此，为了隐私起见，请允许我这样做。
So let me do that for privacy's sake.

2194
01:49:22,069 --> 01:49:26,469
然后让我继续执行此操作。
And then let me go ahead and do this.

2195
01:49:26,470 --> 01:49:31,000
如果请求点方法等于发布，则与以前一样，
If request dot method equals post, as before,

2196
01:49:31,000 --> 01:49:36,349
让我们继续，并记住该用户已登录。
let's go ahead and remember that user logged in.

2197
01:49:36,350 --> 01:49:42,670
然后将用户重定向到斜线。
And then redirect user to slash.

2198
01:49:42,670 --> 01:49:44,900
否则，让我们继续呈现登录表单。
Else let's go ahead and render the login form.

2199
01:49:44,899 --> 01:49:46,329
所以我还没有完成。
So I'm not done yet.

2200
01:49:46,329 --> 01:49:48,099
但这是关键思想。
But this is the key idea.

2201
01:49:48,100 --> 01:49:50,630
我需要以某种方式记住该用户已登录。
I need to somehow remember that the user logged in.

2202
01:49:50,630 --> 01:49:51,980
那我该怎么做呢？
So how can I do this?

2203
01:49:51,979 --> 01:49:58,509
好吧，一个，我可以从请求点形式获取用户名。
Well, one, I can get the user's name from request dot form dot get name.

2204
01:49:58,510 --> 01:50:04,670
我应该假设是的，没关系，我们暂时不会对此进行验证。
And I should assume that, yeah, that's OK, we won't validate that for now.

2205
01:50:04,670 --> 01:50:07,070
我要如何处理用户名？
And what do I want to do with the user's name?

2206
01:50:07,069 --> 01:50:09,089
我想将其存储在会话中。
I want to store it in the session.

2207
01:50:09,090 --> 01:50:10,820
那么会话到底是什么？
So what exactly is the session?

2208
01:50:10,819 --> 01:50:17,071
事实证明，只要您拥有此手印，就像
Well it turns out that as soon as you have this hand stamp, it's like,

2209
01:50:17,072 --> 01:50:18,530
它也有点像大衣检查。
it's kind of like a coat check too.

2210
01:50:18,529 --> 01:50:20,149
我的意思不是在这里添加太多的隐喻，
I don't mean to add too many metaphors here,

2211
01:50:20,149 --> 01:50:22,699
但是在高档餐厅，如果您喜欢将外套递给某人，
but in a fancy restaurant if you like hand your coat to someone,

2212
01:50:22,699 --> 01:50:24,199
他们经常把它放在壁橱里，然后
they'll often put it in the closet and then

2213
01:50:24,199 --> 01:50:25,969
给你一个数字，从某种意义上讲
hand you back a number, which in some sense

2214
01:50:25,970 --> 01:50:27,942
有点像这样的线索，一点印章
is a little clue like this, a little hand stamp

2215
01:50:27,942 --> 01:50:29,150
这样他们就可以排队。
so that they can line you up.

2216
01:50:29,149 --> 01:50:31,489
它可能不应该只是一张笑脸，否则所有人
It probably shouldn't just be a smiley face because otherwise everyone

2217
01:50:31,489 --> 01:50:34,489
会得到相同的外套，但是它们给您某种标识符，
would get the same coat back, but they give you some kind of identifier,

2218
01:50:34,489 --> 01:50:39,889
他们把你的外套放在衣架，水桶或壁橱里的某个地方。
and they put your coat into some hanger, a bucket, or some space in that closet.

2219
01:50:39,890 --> 01:50:42,050
那么为什么这在这里有意义呢？
So why is this relevant here?

2220
01:50:42,050 --> 01:50:44,990
Web浏览器世界也发生了同样的情况。
Well the same is happening in the world of web browsers.

2221
01:50:44,989 --> 01:50:48,242
当您获得一个独特的cookie时，这将为您提供一个独特的衣架。
When you get a unique cookie, that's giving you a unique hanger.

2222
01:50:48,243 --> 01:50:50,660
我真的应该早就想到这个比喻了，
I really should have thought this metaphor through before,

2223
01:50:50,659 --> 01:50:54,019
但是您会得到一个独特的衣架，可以放所有物品，
but you're given a unique hanger where all of your stuff can go,

2224
01:50:54,020 --> 01:50:56,630
包括你的外套，但在这种情况下，包括任何变量
including your coat, but in this case, including any variables

2225
01:50:56,630 --> 01:50:57,980
你想记住。
you want to remember.

2226
01:50:57,979 --> 01:51:02,509
因此，感谢Flask，
So with that said, what I have access to thanks to Flask,

2227
01:51:02,510 --> 01:51:08,060
但实际上要感谢HTTP，这个特殊的变量称为session。
but really thanks to HTTP, is this special variable called session.

2228
01:51:08,060 --> 01:51:11,630
这是一个特殊的变量，一方面
That is a special variable in that it's at the one hand,

2229
01:51:11,630 --> 01:51:15,110
一方面是全球性的，这意味着我可以在任何地方使用它，
on the one hand global, which means I can use it everywhere,

2230
01:51:15,109 --> 01:51:18,799
但花哨的东西，它绑定到当前用户。
but fancy enough, it's tied to the current user.

2231
01:51:18,800 --> 01:51:22,370
因此，即使我们所有人现在都使用Zoom来访问我的网址，
So even if all of us on Zoom right now visit my URL,

2232
01:51:22,369 --> 01:51:24,889
无论如何，我们每个人
as is kind of happening anyway, each of us

2233
01:51:24,890 --> 01:51:28,190
正在获取我们自己的名为session的变量的副本。
is getting our own copy of a variable called session.

2234
01:51:28,189 --> 01:51:31,329
它是通过cookie机制在幕后实现的。
And it's implemented underneath the hood by way of this cookie mechanism.

2235
01:51:31,329 --> 01:51:34,579
当您访问我的应用程序时，我们每个人都会获得不同的Cookie值。
Each of us when you visit my application are getting a different cookie value.

2236
01:51:34,579 --> 01:51:38,039
该cookie值就像映射到壁橱中的另一个衣架一样
That cookie value is like mapping to a different hanger in the closet

2237
01:51:38,039 --> 01:51:41,329
这样我的数据就会放在这个挂架上，您的数据就会放在那个挂架上，
so that my data will go on this hanger, your data will go on that hanger,

2238
01:51:41,329 --> 01:51:42,089
等等。
and so forth.

2239
01:51:42,090 --> 01:51:45,173
现在，我为这个行之有效的隐喻感到自豪。
And now I'm actually kind of proud of this metaphor that's working out OK.

2240
01:51:45,172 --> 01:51:48,529
衣架将是存储我们所有个人数据的地方。
The hanger is going to be where all of our individual data is stored.

2241
01:51:48,529 --> 01:51:49,849
我们要存储什么？
What do we want to store?

2242
01:51:49,850 --> 01:51:53,000
这很简单，我们只存储用户名，
This is simple, let's just store the user's name,

2243
01:51:53,000 --> 01:51:55,879
从而记住我已经登录，或者Brian已登录，
thereby remembering that I've logged in, or Brian's logged in,

2244
01:51:55,880 --> 01:51:59,060
或Sophia已登录，或Ryan已登录，或其他任何人。
or Sophia's logged in, or Ryan's logged in, or anyone else.

2245
01:51:59,060 --> 01:52:02,390
但是我在这里的会话全局变量
But the session global variable here that I've

2246
01:52:02,390 --> 01:52:07,040
在第一行中突出显示的内容将由Flask为我们实施
highlighted in this very first line is going to be implemented by Flask for us

2247
01:52:07,039 --> 01:52:11,909
以使我们每个用户都获得自己的版本的方式。
in such a way that each of us as users get our own version thereof.

2248
01:52:11,909 --> 01:52:15,109
因此，我将非常简单地将其用作Python中的字典。
So I'm going to quite simply use this as a dictionary in Python.

2249
01:52:15,109 --> 01:52:22,532
我要继续并将用户名添加到此处的会话中。
I'm going to go ahead and add to the session here the user's name as name.

2250
01:52:22,533 --> 01:52:24,200
而且我现在甚至不需要此变量。
And I don't even need this variable now.

2251
01:52:24,199 --> 01:52:26,219
让我将其收紧一点。
Let me tighten this up just a little bit.

2252
01:52:26,220 --> 01:52:28,400
让我继续，然后将其存储在会话中
Let me go ahead and just store in the session, which

2253
01:52:28,399 --> 01:52:33,839
就像这样的衣架，名称的键和用户登录的值
is like this hanger, the key of name and the value of whatever the user logged

2254
01:52:33,840 --> 01:52:34,340
在作为。
in as.

2255
01:52:34,340 --> 01:52:35,960
并重定向我知道该怎么做。
And redirects I know how to do.

2256
01:52:35,960 --> 01:52:42,980
让我继续并返回重定向斜杠，让我摆脱我的伪代码，
Let me go ahead and return redirect slash, let me get rid of my pseudocode,

2257
01:52:42,979 --> 01:52:44,269
我想就是这样。
and I think that's it.

2258
01:52:44,270 --> 01:52:48,170
对不起，请记住用户已登录。
That is sufficient, excuse me, to remember that a user has logged in.

2259
01:52:48,170 --> 01:52:50,370
您在会议中加入了他们的名字，
You sort of put their name in the session,

2260
01:52:50,369 --> 01:52:53,999
但这是我们需要检查该值的理由。
but then it stands to reason that we need to check for this value.

2261
01:52:54,000 --> 01:52:56,810
现在，让我们改进索引点HTML，目前
So now let's improve index dot HTML, which at the moment

2262
01:52:56,810 --> 01:52:59,810
只是盲目地说总是，您尚未登录。
just blindly says always, you are not logged in.

2263
01:52:59,810 --> 01:53:02,850
好吧，让我们真正做出决定，而不仅仅是硬编码。
Well let's actually make that decision, not just hard code that.

2264
01:53:02,850 --> 01:53:03,920
因此，让我们这样做。
So let's do this.

2265
01:53:03,920 --> 01:53:09,470
如果不是会话点获取名称，这是语法
If not session dot get name, this is the syntax

2266
01:53:09,470 --> 01:53:12,110
说如果会话中没有名字，
for saying if there's no name in the session,

2267
01:53:12,109 --> 01:53:16,909
然后继续并返回重定向斜杠登录。
then go ahead and return redirect slash login.

2268
01:53:16,909 --> 01:53:18,771
因此，如果会话中没有名字，那
So if there's no name in the session, that

2269
01:53:18,771 --> 01:53:20,479
表示您还没有告诉我您的名字。
means you haven't given me your name yet.

2270
01:53:20,479 --> 01:53:23,209
让我通过发送斜线登录来强迫您使用。
Let me force you to by sending you to slash login.

2271
01:53:23,210 --> 01:53:26,720
否则，继续渲染模板。
Otherwise go ahead and render the template.

2272
01:53:26,720 --> 01:53:28,820
好吧，那么我现在还能做些什么？
All right, well what more might I do now?

2273
01:53:28,819 --> 01:53:31,039
好吧，让我在这里进入我的索引文件。
Well let me go into my index file here.

2274
01:53:31,039 --> 01:53:34,969
而且，不仅要天真地对其进行硬编码，还请注意我现在能做什么。
And instead of just naively hard coding this, watch what I can now do.

2275
01:53:34,970 --> 01:53:41,180
我可以在这里说，用Jinja语法，而不是花括号，而不是块语法，
I can in here say, in Jinja syntax, not the curly braces, not the block syntax,

2276
01:53:41,180 --> 01:53:44,090
不是for循环，也可以使用if条件。
not the for loop, you can also use if conditions.

2277
01:53:44,090 --> 01:53:48,260
如果会话点名称存在，那么我可以这样说：
If session dot name exists, then I can say something like,

2278
01:53:48,260 --> 01:53:53,510
您以会话点名称，句点登录。
you are logged in as session dot name, period.

2279
01:53:53,510 --> 01:53:56,960
然后，我可能会有类似href等于斜杠注销的内容。
Then I might have something like a href equals slash logout.

2280
01:53:56,960 --> 01:54:00,360
还不存在，但是我们可以返回到该位置，然后注销。
Doesn't exist yet, but we can come back to that, log out.

2281
01:54:00,359 --> 01:54:04,399
否则，如果没有会话名称，那么我们假设
Else if there is no session name, then let's assume

2282
01:54:04,399 --> 01:54:08,989
用户确实没有登录，然后说您尚未登录，
that the user is indeed not logged in and then say, you are not logged in,

2283
01:54:08,989 --> 01:54:10,259
登录。
log in.

2284
01:54:10,260 --> 01:54:13,470
因此，如果我做对了，让我继续并在此处停止服务器。
So if I did this right, let me go ahead and stop the server here.

2285
01:54:13,470 --> 01:54:16,250
让我继续并重新运行Flask run，重新加载我的表格，
Let me go ahead and rerun Flask run, reload my form,

2286
01:54:16,250 --> 01:54:19,910
我仍然看到，确定，错误的URL。
I still see, OK, wrong URL.

2287
01:54:19,909 --> 01:54:22,039
让我去索引。
Let me go to index.

2288
01:54:22,039 --> 01:54:23,419
哦，不，这是对的。
Oh no, this is right.

2289
01:54:23,420 --> 01:54:25,340
我使用斜线登录，方法不允许，
I'm on slash login, method's not allowed,

2290
01:54:25,340 --> 01:54:28,833
我认为圣地亚哥已经指出了我之前犯的错误，
I think Santiago already pointed out what mistake I made earlier,

2291
01:54:28,832 --> 01:54:29,749
我刚才重复了。
which I just repeated.

2292
01:54:29,750 --> 01:54:34,070
让我进入应用程序点py。
Let me go to application dot py.

2293
01:54:34,069 --> 01:54:36,529
我需要在这里支持多种方法。
I need to support multiple methods here.

2294
01:54:36,529 --> 01:54:41,129
我还想支持get，以便我可以根据需要实际渲染我的模板。
I also want to support get so that I can actually render my template as needed.

2295
01:54:41,130 --> 01:54:43,940
因此，让我继续并重新运行该服务器。
So let me go ahead and rerun this server.

2296
01:54:43,939 --> 01:54:45,249
在这里，我们使用斜杠登录。
Here we go it's slash login.

2297
01:54:45,250 --> 01:54:46,250
并注意会发生什么。
And notice what happens.

2298
01:54:46,250 --> 01:54:47,300
让我放大一下。
Let me zoom in on this.

2299
01:54:47,300 --> 01:54:50,150
让我摆脱登录名，直接去斜线，
Let me get rid of the login and just go to slash,

2300
01:54:50,149 --> 01:54:52,037
请注意，我立即被重定向。
notice that I'm immediately redirected.

2301
01:54:52,037 --> 01:54:53,329
让我们做我们上周所做的事情。
Let's do what we did last week.

2302
01:54:53,329 --> 01:54:54,979
让我们打开检查器。
Let's open up the inspector.

2303
01:54:54,979 --> 01:54:56,509
让我们转到“网络”选项卡。
Let's go to the Network tab.

2304
01:54:56,510 --> 01:55:00,860
让我们再次访问slash并按Enter，瞧，注意会发生什么。
Let's again visit slash and hit Enter, voila, notice what happens.

2305
01:55:00,859 --> 01:55:04,439
如果我访问该请求，请放大Chrome的“网络”标签，
If I visit that request, zoom in on Chrome's network tab,

2306
01:55:04,439 --> 01:55:08,679
向下滚动到响应标题，请注意，我们得到了302，
scroll down to response headers, notice that we get a 302, found,

2307
01:55:08,680 --> 01:55:12,540
这是一个类似301的重定向代码，而该位置实际上是
which is a redirect code like 301, and the location is actually,

2308
01:55:12,539 --> 01:55:14,759
如果您在这里查看，请使用斜线登录。
if you look over here, slash login.

2309
01:55:14,760 --> 01:55:18,240
因此，HTTP的所有机制都重新发挥了作用。
So all the mechanics of HTTP are coming back into play.

2310
01:55:18,239 --> 01:55:22,109
好的，让我继续并以David的身份登录，单击Submit，太棒了。
All right let me go ahead and log in as David, click Submit, amazing.

2311
01:55:22,109 --> 01:55:23,819
您以David身份登录。
You are logged in as David.

2312
01:55:23,819 --> 01:55:25,049
注意发生了什么。
Notice what's going on.

2313
01:55:25,050 --> 01:55:28,720
我现在在斜线。
I'm now at the slash route.

2314
01:55:28,720 --> 01:55:34,500
的确如此，因此这并不适用，因此我实际上看到的是索引点HTML。
This is true, so this does not apply, so I'm actually seeing index dot HTML.

2315
01:55:34,500 --> 01:55:37,959
并注意我不小心单击了注销，让我们对其进行修复。
And notice I accidentally clicked log out, let's fix that.

2316
01:55:37,960 --> 01:55:39,670
让我们给我们我们的登出路线。
Let's give us our logout route.

2317
01:55:39,670 --> 01:55:40,500
所以我们开始。
So here we go.

2318
01:55:40,500 --> 01:55:48,330
应用程序点路由斜线注销，def注销，然后在这里我
App dot route slash logout, def log out, and then in here I

2319
01:55:48,329 --> 01:55:50,576
只需要忘记用户已经登录即可。
need to just forget that the user has logged in.

2320
01:55:50,577 --> 01:55:52,410
有几种不同的方法可以做到这一点。
And there's a few different ways to do this.

2321
01:55:52,409 --> 01:55:53,826
现在让我做最简单的事情。
Let me do it the simplest for now.

2322
01:55:53,827 --> 01:55:56,430
会话名称不等于。
Session name equals none.

2323
01:55:56,430 --> 01:55:59,760
让我们将您的名字改成我的名字，或者改成我的名字，
Let's just change whatever your name is or my name is to none,

2324
01:55:59,760 --> 01:56:05,040
然后让我们将重定向返回到斜杠。
then let's return redirect back to slash.

2325
01:56:05,039 --> 01:56:06,539
因此，让我们看看现在会发生什么。
So let's see what happens now.

2326
01:56:06,539 --> 01:56:08,459
让我重新启动服务器。
Let me restart the server.

2327
01:56:08,460 --> 01:56:11,010
让我回到索引页面。
Let me go back to my index page.

2328
01:56:11,010 --> 01:56:15,300
因为我仍然在这里登录，所以我将继续注销。
Because I'm still logged in here, I'm going to go ahead and log out.

2329
01:56:15,300 --> 01:56:18,270
好的，让我继续并以Brian的身份登录，例如，提交。
OK, let me go ahead and log in as Brian, for instance, submit.

2330
01:56:18,270 --> 01:56:19,500
您以Brian身份登录。
You are logged in as Brian.

2331
01:56:19,500 --> 01:56:23,459
并注意我可以重新加载，可以关闭选项卡，也可以重新打开选项卡。
And notice I can reload, I can close the tab, I can reopen the tab.

2332
01:56:23,460 --> 01:56:27,660
多亏了我的浏览器代表cookie，所有这些都被记住了。
It's all being remembered thanks to my browser representing the cookie.

2333
01:56:27,659 --> 01:56:29,339
实际上，您可以看到。
And in fact, you can see that.

2334
01:56:29,340 --> 01:56:32,430
让我去检查，让我去网络标签，
Let me go to inspect, let me go to the Network tab,

2335
01:56:32,430 --> 01:56:34,410
然后让我重新加载同一页面。
and let me reload this same page.

2336
01:56:34,409 --> 01:56:35,519
重新加载。
Reload.

2337
01:56:35,520 --> 01:56:37,560
请在此处注意此响应。
Notice this response here.

2338
01:56:37,560 --> 01:56:43,320
在200中，请注意，如果我在此处向下滚动到请求标题，请注意
In 200, notice that if I scroll down here to the request headers, notice

2339
01:56:43,319 --> 01:56:46,289
我的浏览器正在请求，哎呀，对不起，
that my browser is requesting, oops, sorry,

2340
01:56:46,289 --> 01:56:50,669
请注意，我的浏览器正在请求斜杠，但请注意，如果我向下滚动，
notice that my browser is requesting slash, but notice if I scroll down,

2341
01:56:50,670 --> 01:56:55,335
下来，下来，没有，我们走了，下来，下来，下来，注意，我不知道
down, down, nope, there we go, down, down, down, notice, unbeknownst to me

2342
01:56:55,335 --> 01:56:57,210
也许一直以来你都不知道，
and unbeknownst to you perhaps all this time,

2343
01:56:57,210 --> 01:57:01,140
我的浏览器还显示了手戳并说出了我的cookie值
my browser is also presenting the hand stamp and saying my cookie value

2344
01:57:01,140 --> 01:57:04,581
会话等于35456点，点，点。
is session equals 35456 dot, dot, dot.

2345
01:57:04,581 --> 01:57:07,710
一般来说，告诉别人您的会话很不好，因为现在
Generally speaking it's bad to tell other people your sessions because now

2346
01:57:07,710 --> 01:57:10,002
你们都可以假装自己来劫持我的会话，
you could all hijack my session by pretending to be me,

2347
01:57:10,002 --> 01:57:12,127
但当然，此应用程序不会执行任何操作。
but of course this application doesn't do anything.

2348
01:57:12,127 --> 01:57:14,520
但是，请勿使用您关心的帐户执行此操作。
But don't do this with accounts that you care about.

2349
01:57:14,520 --> 01:57:17,170
没有人应该看到您的cookie值。
No one should be seeing your cookie values.

2350
01:57:17,170 --> 01:57:20,640
所以我们实际上在那里看到了cookie，它来自服务器
So we actually see the cookie there, and it came from the server

2351
01:57:20,640 --> 01:57:24,320
我第一次来。
the very first time I visited.

2352
01:57:24,319 --> 01:57:29,509
好吧，那里有什么问题吗？
All right, any questions on that there?

2353
01:57:29,510 --> 01:57:31,820
布莱恩：饼干是否永远存在，
BRIAN: Does the cookie just exist forever,

2354
01:57:31,819 --> 01:57:33,402
还是有一段时间消失？
or is there a time when it disappears?

2355
01:57:33,403 --> 01:57:34,653
DAVID J. MALAN：好问题。
DAVID J. MALAN: Good question.

2356
01:57:34,653 --> 01:57:37,130
Cookie会永远存在还是有时间限制？
Does the cookie live forever or is there a time limit?

2357
01:57:37,130 --> 01:57:38,790
这取决于您如何配置它。
It depends on how you configure it.

2358
01:57:38,789 --> 01:57:41,479
因此，此Cookie将具有默认时间限制
So this cookie will have a default time limit

2359
01:57:41,479 --> 01:57:45,439
数分钟，数小时或数天的时间，此时间将到期
of some number of minutes or hours or days, after which it will expire

2360
01:57:45,439 --> 01:57:47,659
除非服务器为我刷新它。
unless the server refreshes it for me.

2361
01:57:47,659 --> 01:57:49,851
不过，您可以设置永久保存的Cookie，
You can, though, set cookies that do last forever,

2362
01:57:49,851 --> 01:57:53,059
您可能不想为登录的概念做任何事情，因为赔率
which you probably don't want to do for the notion of logging in because odds

2363
01:57:53,060 --> 01:57:54,852
是我们所有人不小心走开了吗
are all of us have accidentally walked away

2364
01:57:54,851 --> 01:57:58,489
像实验室计算机或朋友的计算机一样，却忘记了注销。
from like a lab computer or a friend's computer, forgotten to log out.

2365
01:57:58,489 --> 01:58:00,919
很高兴知道我最终会
It's at least nice to know that eventually I'll

2366
01:58:00,920 --> 01:58:03,050
从该站点自动注销，
be logged out automatically from this site,

2367
01:58:03,050 --> 01:58:06,320
这就是所谓的会话cookie，它最终会过期。
and that's what's called a session cookie, one that eventually expires.

2368
01:58:06,319 --> 01:58:08,269
但是当您访问网站时，它也很有用，
But it's also useful when you visit websites,

2369
01:58:08,270 --> 01:58:11,450
您会注意到某些网站上的按钮会说“记住我”，
you notice that some websites have those buttons that say remember me,

2370
01:58:11,449 --> 01:58:12,679
或类似的东西。
or something like that.

2371
01:58:12,680 --> 01:58:15,230
好吧，您实际上可以设置永久性Cookie，而不仅仅是
Well you can actually set permanent cookies that don't just

2372
01:58:15,229 --> 01:58:17,779
在您的计算机上存储一些随机值，
store some random value on your computer,

2373
01:58:17,779 --> 01:58:20,509
他们实际上存储了一些信息
they actually store some piece of information

2374
01:58:20,510 --> 01:58:23,150
随后将其预先填充到表单中。
that gets prefilled into forms subsequently.

2375
01:58:23,149 --> 01:58:26,181
这对于记住您首选的网站设置很有用
And this is useful to remember your preferred settings for a website

2376
01:58:26,181 --> 01:58:27,889
如果您已自定义某项内容，如果您
if you've customized something, if you're

2377
01:58:27,890 --> 01:58:30,590
在夜间或白天模式之类的情况下，
in night mode or day mode or something like that,

2378
01:58:30,590 --> 01:58:32,390
它可以记住这些设置。
it can remember those kinds of settings.

2379
01:58:32,390 --> 01:58:36,380
甚至CS50的网站都会记住您的选择。
And even CS50's website remembers what your selection was.

2380
01:58:36,380 --> 01:58:38,510
当您登录CS50的某些网站时，
When you log in to some of CS50's websites,

2381
01:58:38,510 --> 01:58:41,810
您有时会看到哈佛或耶鲁大学的登录提示。
you'll sometimes see a login prompt for Harvard or Yale.

2382
01:58:41,810 --> 01:58:45,320
如果您从未注意到，我对此表示遗憾，因为我们付出了很多努力
And if you've never noticed, I regret this because we put a lot of effort

2383
01:58:45,319 --> 01:58:48,079
记住这一点，它会记住您上次使用哈佛大学时
into this, it remembers if you used Harvard last time

2384
01:58:48,079 --> 01:58:51,139
或上次使用耶鲁，这样您就不必不断互动
or used Yale last time so you don't have to constantly interact

2385
01:58:51,140 --> 01:58:54,170
通过下拉菜单，它只会记住您的隐含偏好。
with the dropdown, it just remembers your implied preference.

2386
01:58:54,170 --> 01:58:55,730
我们使用cookie来做到这一点。
We do that using cookies.

2387
01:58:55,729 --> 01:58:58,879
因此，如果有兴趣在家中锻炼，一定要真正开始
And so as an at home exercise if of interest, truly do start

2388
01:58:58,880 --> 01:59:02,900
打开浏览器的“网络”标签，开始查看这些标题，
opening the browser's network tab, start looking at those headers,

2389
01:59:02,899 --> 01:59:06,469
然后您就可以推断出当今所有网站的工作方式。
and you can begin to infer how all of today's websites work.

2390
01:59:06,470 --> 01:59:09,290
实际上，它正成为越来越多的挑战
And in fact it's becoming increasingly a challenge

2391
01:59:09,289 --> 01:59:12,619
使用Cookie来实现功能，因为长话短说，很多浏览器
to implement things with cookies because long story short, a lot of the browser

2392
01:59:12,619 --> 01:59:15,979
制造商终于开始禁用所谓的第三方
manufacturers are finally starting to disable what are called third party

2393
01:59:15,979 --> 01:59:20,239
Cookie，即来自其他服务器的广告风格的Cookie，
cookies, those sort of advertising style cookies that come from other servers,

2394
01:59:20,239 --> 01:59:24,319
不是gmail.com，不是Facebook.com，而是其他经常使用的服务器
not gmail.com, not Facebook.com, but other servers that are all too often

2395
01:59:24,319 --> 01:59:27,019
用来追踪人。
used to track people.

2396
01:59:27,020 --> 01:59:30,500
但是最近，尤其是在欧盟，现在在美国，
But recently, especially in the EU and now more recently in the US,

2397
01:59:30,500 --> 01:59:33,229
如果您曾经必须点击说我接受Cookie的框，
if you've ever had to click boxes saying I accept cookies,

2398
01:59:33,229 --> 01:59:36,139
我接受必要的cookie，依此类推，老实说，
I accept the necessary cookies, and so forth, honestly this

2399
01:59:36,140 --> 01:59:39,170
这是一个不错的主意，但在其中也有点傻
is sort of a nice idea, but it's also a little silly in

2400
01:59:39,170 --> 01:59:43,580
现在世界只是在限制您和我不断地点击
that now the world is just conditioning you and me to just constantly click

2401
01:59:43,579 --> 01:59:45,749
这些盒子没有真正考虑它。
these boxes without really thinking of it.

2402
01:59:45,750 --> 01:59:48,290
但是，您真正要做的是授予权限
But what you're really doing is granting permission

2403
01:59:48,289 --> 01:59:53,449
当您单击这些框以允许您的手被盖章时。
when you click those boxes to allow your hand to be stamped.

2404
01:59:53,449 --> 01:59:55,519
好的，关于Cookie的任何问题，
All right, any questions then on cookies,

2405
01:59:55,520 --> 02:00:01,140
或关于我们如何实现这种登录机制？
or on how we've gone about implementing this login mechanism?

2406
02:00:01,140 --> 02:00:03,270
看到您的任何东西Brian？
Seeing anything on your end Brian?

2407
02:00:03,270 --> 02:00:04,560
布莱恩：这里没别的了。
BRIAN: Nothing else here.

2408
02:00:04,560 --> 02:00:07,060
戴维·J·马兰（David J. MALAN）：好吧，让我继续前进。
DAVID J. MALAN: All right, well let me go ahead and do this.

2409
02:00:07,060 --> 02:00:09,600
让我继续，准备一个例子，我们
Let me go ahead and get ready an example that we

2410
02:00:09,600 --> 02:00:13,020
预先制作，将使我们能够探索
made in advance that will allow us to explore

2411
02:00:13,020 --> 02:00:16,830
一个成熟的电子商务网站，某种形式的商店。
a full-fledged e-commerce website, a store of some sort.

2412
02:00:16,829 --> 02:00:19,079
我们称其为字面上的商店，这次
And we'll call this literally Store and this time

2413
02:00:19,079 --> 02:00:21,329
而不是从头开始写东西，让我继续
rather than write things from scratch, let me go ahead

2414
02:00:21,329 --> 02:00:24,629
然后从名为store的目录在浏览器中打开内容。
and open things in my browser from a directory called store.

2415
02:00:24,630 --> 02:00:27,420
因此，可以在课程的网站上一如既往地使用它。
So this is available as always on the course's website.

2416
02:00:27,420 --> 02:00:31,260
让我继续在这里进入商店，让我继续
And let me go ahead here and into store, let me go ahead

2417
02:00:31,260 --> 02:00:34,545
并打开应用程序点py，要求
and open up application dot py, requirements

2418
02:00:34,545 --> 02:00:40,710
点文本和我的模板，包括布局，书籍和购物车。
dot text, and my templates, including layout, books, and cart.

2419
02:00:40,710 --> 02:00:43,110
所以这是诚实阅读的好习惯
So this is a good exercise in honestly reading

2420
02:00:43,109 --> 02:00:45,449
别人的大量代码。
someone else's sizable amount of code.

2421
02:00:45,449 --> 02:00:46,521
这是几个文件。
It's a few files.

2422
02:00:46,521 --> 02:00:49,229
下载这样的程序后，您什至开始学习，
How do you even begin when you've downloaded a program like this,

2423
02:00:49,229 --> 02:00:52,169
当您下载了CS50或其他课程的分发代码后，
when you've downloaded distribution code for CS50 or any other course,

2424
02:00:52,170 --> 02:00:54,045
您如何开始围绕它进行思考？
how do you begin to wrap your mind around it?

2425
02:00:54,045 --> 02:00:56,400
再说一次，如果您了解角色是什么
Well again, if you understand what the roles are

2426
02:00:56,399 --> 02:00:59,609
由这些不同的文件播放，应用程序点py是您的控制器，
played by these different files, application dot py is your controller,

2427
02:00:59,609 --> 02:01:02,579
以点HTML和模板结尾的任何内容都是一个视图，
anything ending in dot HTML and templates is a view,

2428
02:01:02,579 --> 02:01:04,799
您可以开始跟随面包屑了
you can begin to sort of follow the breadcrumbs

2429
02:01:04,800 --> 02:01:07,440
并找出这些文件中的内容。
and figure out what does what in these files.

2430
02:01:07,439 --> 02:01:09,779
因此，让我们从应用程序点py开始。
So let's start with application dot py.

2431
02:01:09,779 --> 02:01:13,409
请注意，我正在导入CS50的库，一堆Flask功能，
Notice I'm importing CS50's library, a bunch of Flask functionality,

2432
02:01:13,409 --> 02:01:14,879
包括会话支持。
including session support.

2433
02:01:14,880 --> 02:01:17,790
在此之下，我将像以前一样初始化应用程序，
Below that I'm initializing the application as I've done before,

2434
02:01:17,789 --> 02:01:20,279
在下面，我正在连接到一个数据库
and below that I'm connecting to a database which

2435
02:01:20,279 --> 02:01:24,149
在商店中包含一大堆产品，在这种情况下为书籍。
contains a whole bunch of products in a store, books in this case.

2436
02:01:24,149 --> 02:01:26,229
然后，我配置会话，我们就这样做了，
I then configure sessions, and we just did that,

2437
02:01:26,229 --> 02:01:28,119
因此该代码与以前相同。
so that code is the same as before.

2438
02:01:28,119 --> 02:01:31,319
而且我认为我们可以开始推断该网站将要做什么。
And I think we can begin to infer what this website's going to do.

2439
02:01:31,319 --> 02:01:34,809
因此，我的默认斜线路由具有索引功能，
So my default slash route has an index function,

2440
02:01:34,810 --> 02:01:38,220
看起来该数据库中有一个名为books的表，
and it looks like there's a table in that database called books,

2441
02:01:38,220 --> 02:01:41,070
所以我要从书本中选明星，以使我得到所有书本。
so I'm selecting star from books to get me all the books.

2442
02:01:41,069 --> 02:01:44,009
然后看起来好像我正在渲染一个名为books dot HTML的模板，
And then it looks like I'm rendering a template called books dot HTML,

2443
02:01:44,010 --> 02:01:45,690
而且我正在传递那些书。
and I'm passing in those books.

2444
02:01:45,689 --> 02:01:50,829
因此，让我们跟随此处的面包屑，进入点HTML的书中。
So let's follow the breadcrumbs here and go into books dot HTML.

2445
02:01:50,829 --> 02:01:53,999
看起来书籍点HTML扩展了布局点HTML。
It looks like books dot HTML extends layout dot HTML.

2446
02:01:54,000 --> 02:01:56,609
好吧，让我们看一下布局点HTML。
All right, let's look at layout dot HTML.

2447
02:01:56,609 --> 02:01:59,952
那里没有什么有趣的事情，只是样板占位符
Nothing really interesting going on there, just the boilerplate placeholder

2448
02:01:59,953 --> 02:02:01,120
我们以前见过的代码。
code that we've seen before.

2449
02:02:01,119 --> 02:02:03,786
因此，我将结束并假定它并不有趣。
So I'm going to close that and assume that it's not interesting.

2450
02:02:03,787 --> 02:02:04,900
去过也做过。
Been there, done that.

2451
02:02:04,899 --> 02:02:07,829
但是，如果我们继续下去的话，点点HTML的书可能会有些麻烦。
But books dot HTML, if we continue further, is a little juicy.

2452
02:02:07,829 --> 02:02:12,539
我们的块体位于第3行和第14行之间。
We've got my block body between lines 3 and 14.

2453
02:02:12,539 --> 02:02:16,929
在这里，我有一个H1标签，只是在页面顶部说书。
In there I've got a H1 tag just saying books at the top of the page.

2454
02:02:16,930 --> 02:02:19,860
然后我的模板中有一个for循环，
And then I've got a for loop in my template,

2455
02:02:19,859 --> 02:02:24,689
再次使用Jinja语法，其下方的H2显然与
again using Jinja syntax, that has below that an H2 with apparently

2456
02:02:24,689 --> 02:02:28,409
书名，然后是书名，
the title of a book, and then below that, a form,

2457
02:02:28,409 --> 02:02:30,509
而且我以前没有看过所有这些功能，
and I haven't seen all of these features before,

2458
02:02:30,510 --> 02:02:34,980
就像我不确定隐藏的含义是什么，但是请注意，我确实可以识别“提交”
like I'm not sure yet what hidden means, but notice that I do recognize a Submit

2459
02:02:34,979 --> 02:02:37,079
具有添加到购物车值的按钮。
button that has a value of add to cart.

2460
02:02:37,079 --> 02:02:41,009
听起来好像我们正在为amazon.com实施购物目录
So it sounds like we're implementing a shopping catalog for like an amazon.com

2461
02:02:41,010 --> 02:02:43,200
或某种在线书店。
or some kind of bookstore online.

2462
02:02:43,199 --> 02:02:46,289
好吧，现在让我们回到应用程序点py，
All right, so now let's go back to application dot py,

2463
02:02:46,289 --> 02:02:47,879
让我们看看购物车。
and let's look in cart.

2464
02:02:47,880 --> 02:02:50,662
看起来购物车同时支持get和post，
It looks like cart supports both get and post, all right,

2465
02:02:50,662 --> 02:02:53,370
所以也许我正在使用相同的路线来处理两种不同的事情，
so maybe I'm using the same route to handle two different things,

2466
02:02:53,369 --> 02:02:54,819
而且我们之前已经看到过。
and we've seen that before.

2467
02:02:54,819 --> 02:02:57,219
该功能称为购物车，这很有意义。
The function is called cart, which makes sense.

2468
02:02:57,220 --> 02:03:00,260
这个事情，让我们回到这个问题，只是为了初始化我们的会话，
This thing, let's come back to this, just to initialize our session,

2469
02:03:00,260 --> 02:03:01,260
我们将回到这一点。
we'll come back to that.

2470
02:03:01,260 --> 02:03:03,720
而且看起来该程序没有更多的功能了。
And it looks like there's not much more to this program.

2471
02:03:03,720 --> 02:03:07,380
如果get是动词，让我们集中在底部
If get is the verb, let's focus on the bottom

2472
02:03:07,380 --> 02:03:10,590
首先，让我们忽略if条件，我在做什么？
first, so let's ignore the if condition, what am I doing?

2473
02:03:10,590 --> 02:03:17,160
从书籍ID在此书籍清单中的书籍中选取星号。
Selecting star from books where the ID of the book is in this list of books.

2474
02:03:17,159 --> 02:03:19,349
那么，这本书的清单是从哪里来的？
Well, where is this list of books coming from?

2475
02:03:19,350 --> 02:03:21,120
会话，引用取消引用，购物车。
Session, quote unquote, cart.

2476
02:03:21,119 --> 02:03:26,669
因此，在上一个示例中，我使用了会话来存储您的姓名和我的姓名
So in the last example I used the session to store your name and my name

2477
02:03:26,670 --> 02:03:29,100
以及每个用户的每个人的名字。
and everyone's name on a per user basis.

2478
02:03:29,100 --> 02:03:31,710
现在，我用它来存储我们称为购物车的东西。
Now I'm using it to store what we'll call a shopping cart.

2479
02:03:31,710 --> 02:03:34,168
的确，这就是为什么有购物车的原因，
And indeed, this is the reason why there's a shopping cart,

2480
02:03:34,167 --> 02:03:36,279
多亏了我们在剧院的朋友们在舞台上
thanks to our friends at the theater, on stage.

2481
02:03:36,279 --> 02:03:38,519
这就是购物车的实现方式
This is how shopping carts are implemented

2482
02:03:38,520 --> 02:03:41,760
在网站上，通过引擎盖下的cookie
on websites, via cookies underneath the hood

2483
02:03:41,760 --> 02:03:46,230
给你错觉的用户特定的变量，字典
to give you the illusion of user specific variables, dictionaries

2484
02:03:46,229 --> 02:03:48,309
您可以在其中存储任何想要的东西。
that you can store anything you want in there.

2485
02:03:48,310 --> 02:03:52,560
所以看起来我的会话购物车钥匙要走了
So it looks like my session cart key is going

2486
02:03:52,560 --> 02:03:55,463
其值等于整本书的ID。
to have a value equal to the IDs of a whole bunch of books.

2487
02:03:55,462 --> 02:03:57,629
我不知道他们现在在那里，但让我们假设
I don't know how they're there yet, but let's assume

2488
02:03:57,630 --> 02:03:59,100
这就是我要解释的。
that's what I'm interpreting.

2489
02:03:59,100 --> 02:04:02,340
然后在这里，我只是渲染一个称为购物车HTML的模板，
And then down here, I'm just rendering a template called cart dot HTML,

2490
02:04:02,340 --> 02:04:06,010
从数据库中传递书籍。
passing in the books from the database.

2491
02:04:06,010 --> 02:04:07,870
那么他们如何进入会议的呢？
So how do they get into the session?

2492
02:04:07,869 --> 02:04:10,919
好吧，如果用户将表单提交到购物车，
Well, if the user submits the form to the cart,

2493
02:04:10,920 --> 02:04:12,870
我认为这段代码是相关的。
I think this code is now relevant.

2494
02:04:12,869 --> 02:04:16,919
如果用户张贴到斜杠购物车，它看起来
If the user posts to slash cart, it looks

2495
02:04:16,920 --> 02:04:20,880
就像我要获取他们输入的ID一样？
like I'm going to get the ID that they've typed in maybe?

2496
02:04:20,880 --> 02:04:21,630
可能是？
Maybe?

2497
02:04:21,630 --> 02:04:24,270
如果实际上有一个ID，但不是一个ID，
And if there is in fact an ID, and it's not none,

2498
02:04:24,270 --> 02:04:26,340
这不是默认值none，我要
it's not the default value of none, I'm going

2499
02:04:26,340 --> 02:04:31,440
继续并将该书的ID附加到购物车中，
to go ahead and append to the cart the ID of that book,

2500
02:04:31,439 --> 02:04:33,749
然后将用户重定向到购物车。
and then I'm going to redirect the user to cart.

2501
02:04:33,750 --> 02:04:36,209
所以我认为这已经足够复杂了
So I think that's enough complexity that I think it's time

2502
02:04:36,210 --> 02:04:37,960
看看实际发生了什么。
to look at what's actually going on.

2503
02:04:37,960 --> 02:04:40,110
所以，让我继续做下去。
So let me go ahead and do exactly that.

2504
02:04:40,109 --> 02:04:42,719
让我向上滚动并运行Flask run。
Let me scroll up and run Flask run.

2505
02:04:42,720 --> 02:04:44,940
让我继续打开我的URL。
Let me go ahead and open my URL.

2506
02:04:44,939 --> 02:04:47,219
好吧，这不是最漂亮的网站，但是
OK, it's not the prettiest of website, but it

2507
02:04:47,220 --> 02:04:50,880
好像我的数据库中有所有七本《哈利·波特》书，
looks like my database has like all seven Harry Potter books in it,

2508
02:04:50,880 --> 02:04:54,030
并注意每个按钮都有一个按钮，添加到购物车，添加到购物车，
and notice that each of them has a button, add to cart, add to cart,

2509
02:04:54,029 --> 02:04:54,839
添加到购物车。
add to cart.

2510
02:04:54,840 --> 02:04:57,030
让我们看一下HTML源代码，看看有什么
Let's look at the HTML source to see what

2511
02:04:57,029 --> 02:04:59,579
我的书生成了HTML模板。
my books dot HTML template generated.

2512
02:04:59,579 --> 02:05:00,709
有点有趣。
Kind of interesting.

2513
02:05:00,710 --> 02:05:03,420
因此，H1排在最前面。
So there's that H1 books at the top.

2514
02:05:03,420 --> 02:05:06,560
这是我的第一本H2书，带有书名。
Here's the first of my H2s with the title of the book.

2515
02:05:06,560 --> 02:05:10,260
请注意，这里有一个时髦的符号，因为它就像一个弯引号一样，
Notice that there is this funky symbol here because it's like a curly quote,

2516
02:05:10,260 --> 02:05:13,030
这是允许您输出符号的HTML实体之一
so this is one of those HTML entities that lets you output symbols

2517
02:05:13,029 --> 02:05:15,129
您无法轻易在键盘上输入。
that you couldn't type easily on your keyboard.

2518
02:05:15,130 --> 02:05:17,980
这是我动态输出的第一个表格。
Here's my first form that I dynamically outputted.

2519
02:05:17,979 --> 02:05:20,379
我早些时候声称我不知道隐藏的是什么，
And I claimed earlier that I didn't know what hidden was,

2520
02:05:20,380 --> 02:05:21,970
但是它确实做到了。
but it does what it says.

2521
02:05:21,970 --> 02:05:25,090
它允许您以某种形式提交数据
It allows you to submit a piece of data in a form that

2522
02:05:25,090 --> 02:05:26,810
对用户而言是视觉上隐藏的。
is visually hidden from the user.

2523
02:05:26,810 --> 02:05:29,800
他们没有可以输入的文本框，但它在那里。
It's not a text box that they can type into but it is there.

2524
02:05:29,800 --> 02:05:33,880
最酷的是，通知我给它设置了1。
And what's cool about this is that notice I gave it a value of 1.

2525
02:05:33,880 --> 02:05:35,920
但是我以这种形式给了那个隐藏的领域
But in this form I gave that hidden field

2526
02:05:35,920 --> 02:05:38,730
值为2，这里为3。
a value of 2, down here a value of 3.

2527
02:05:38,729 --> 02:05:40,119
好吧，为什么呢？
Well, why is that?

2528
02:05:40,119 --> 02:05:47,139
让我进入IDE片刻，让我在商店dot db上运行SQLite，
Let me go into my IDE for just a moment, let me run SQLite on my store dot db,

2529
02:05:47,140 --> 02:05:51,280
让我用点模式向您展示该数据库内部
let me show you with dot schema that inside of this database

2530
02:05:51,279 --> 02:05:55,509
是一个工作表，每个工作表都有一个ID，一个标题，仅此而已。
is a books table, each of which has an ID, a title, and that's it.

2531
02:05:55,510 --> 02:06:00,582
让我使用SQLite 3和voila从书籍中选择星号，
Let me do select star from books using SQLite 3, and voila,

2532
02:06:00,582 --> 02:06:02,290
您不仅看到书籍的标题，
you see not only the titles of the books,

2533
02:06:02,289 --> 02:06:07,749
但是唯一的ID会根据其出现的顺序恰当地编号，
but a unique ID numbered aptly according to the order in which they came out,

2534
02:06:07,750 --> 02:06:09,919
作为巧合，但是故意的。
as a coincidence, but intentional.

2535
02:06:09,920 --> 02:06:15,550
所以现在在这里，让我继续前进，将终端向下移动一点
And so now down here, let me go ahead and move my terminal down a little bit

2536
02:06:15,550 --> 02:06:16,370
这里。
here.

2537
02:06:16,369 --> 02:06:21,849
让我继续并重新运行Flask run，如果我现在提交以下表格之一，
Let me go ahead and rerun Flask run, and if I now submit one of these forms,

2538
02:06:21,850 --> 02:06:22,840
让我们看看发生了什么。
let's see what happens.

2539
02:06:22,840 --> 02:06:25,150
加入购物车第一本书。
Add to cart the first book.

2540
02:06:25,149 --> 02:06:25,929
有趣的。
Interesting.

2541
02:06:25,930 --> 02:06:29,610
我已被重定向到斜杠购物车，注意我有一个有序列表，
I've been redirected to slash cart, and notice I have an ordered list,

2542
02:06:29,609 --> 02:06:32,529
第一本书看来是OL标签。
an OL tag, it would seem, with that first book.

2543
02:06:32,529 --> 02:06:34,099
让我回到目录。
Let me go back to the catalog.

2544
02:06:34,100 --> 02:06:35,600
阿兹卡班的囚徒还不错。
Prisoner of Azkaban was pretty good.

2545
02:06:35,600 --> 02:06:36,790
让我们将其添加到购物车中。
Let's add that to cart.

2546
02:06:36,789 --> 02:06:37,939
现在我在这里看到了。
Now I see this here.

2547
02:06:37,939 --> 02:06:39,999
请注意，如果我重新加载，重新加载，我不会
And notice this, if I reload, reload, I don't

2548
02:06:40,000 --> 02:06:43,000
知道为什么我举起我的手，因为我显然在用另一只手，
know why I'm holding up my hand because I'm clearly using my other hand,

2549
02:06:43,000 --> 02:06:45,100
但我一次又一次地重新加载页面，
but I'm reloading the page again and again,

2550
02:06:45,100 --> 02:06:48,280
它向我确切显示了我的购物车中的内容。
and it's showing me exactly what is in my cart.

2551
02:06:48,279 --> 02:06:49,689
那么，这是哪里来的呢？
So where is this coming from?

2552
02:06:49,689 --> 02:06:55,089
好吧，如果我们返回到代码，则在后置条件下，此逻辑在这里
Well, if we go back to our code, this logic here under the post condition

2553
02:06:55,090 --> 02:07:02,687
正在将ID（一号书，三号书）添加到我的会话的购物车钥匙中。
is adding the ID, book number one, book number three, to my session's cart key.

2554
02:07:02,686 --> 02:07:04,269
现在那个购物车钥匙是从哪里来的？
Now where did that cart key come from?

2555
02:07:04,270 --> 02:07:06,880
这是我提出的唯一的另一篇文章。
This is the only other piece I proposed we come back to.

2556
02:07:06,880 --> 02:07:09,940
我只需要代码顶部的某种方式即可初始化购物车。
I just need some way at the top of my code to initialize the cart.

2557
02:07:09,939 --> 02:07:13,719
长话短说，会议中不会有一个叫做购物车的钥匙
And long story short, there's not going to be a key called cart in the session

2558
02:07:13,720 --> 02:07:17,620
除非您将其放在此处，例如Flask不会附带名称或购物车。
unless you put it there, like Flask doesn't come with name or cart.

2559
02:07:17,619 --> 02:07:18,979
你必须把它放在那里。
You have to put it there.

2560
02:07:18,979 --> 02:07:22,609
因此，请注意，如果购物车中没有用引号引起来的报价，
So notice if cart, quote unquote, is not yet in my session,

2561
02:07:22,609 --> 02:07:25,999
我只是将其初始化为一个空的Python列表。
I'm just initializing it to an empty Python list.

2562
02:07:26,000 --> 02:07:28,000
我可以使用一个集合，我可以使用一个字典，
And I could use a set, I could use a dictionary,

2563
02:07:28,000 --> 02:07:29,167
我可以使用任何我想要的东西。
I could use anything I want.

2564
02:07:29,167 --> 02:07:31,390
我选择通过列表来保持简单，但这就是
I chose to keep it simple with a list, but that's

2565
02:07:31,390 --> 02:07:33,795
我如何记住购物车中的内容。
how I'm remembering what's in my cart.

2566
02:07:33,795 --> 02:07:36,670
而且与我们之前的所有示例不同，因为我看到很多人
And unlike all of our previous examples, because I see a bunch of you

2567
02:07:36,670 --> 02:07:39,790
现在正在尝试将商品添加到您自己的购物车中，我们每个人
are now trying to add things to your own cart, each of us

2568
02:07:39,789 --> 02:07:41,559
看到了不同的购物车。
is seeing different shopping carts.

2569
02:07:41,560 --> 02:07:43,780
我们的购物车中都有不同的东西。
We all have different things in our shopping cart.

2570
02:07:43,779 --> 02:07:46,904
如果我一直在重新加载图书，那么有多少人尝试添加图书都没关系
If I keep reloading, doesn't matter how many of you are trying to add books

2571
02:07:46,904 --> 02:07:50,679
到购物车中，您只是将它们原样添加到购物车中
to your cart, you're only adding them literally to your cart

2572
02:07:50,680 --> 02:07:55,777
而不是我的，因为我们手上都有不同的邮票。
and not mine because we all have different stamps on our hand.

2573
02:07:55,777 --> 02:07:58,610
好吧，所以在这里，我也鼓励你，下次，你
All right, so here too I would encourage you when you, next time you

2574
02:07:58,609 --> 02:08:00,919
在亚马逊上，向购物车中添加一些东西，
go on Amazon and add some things to your cart,

2575
02:08:00,920 --> 02:08:03,710
就像从字面上看，这就是引擎盖下发生的所有事情。
like literally, that is all that's happening underneath the hood.

2576
02:08:03,710 --> 02:08:05,240
亚马逊肯定还有其他功能，您
And Amazon surely has other features, you

2577
02:08:05,239 --> 02:08:08,531
可以更改数量，这很好，您可以将商品添加到愿望清单中，
can change quantities, which is kind of nice, you can add things to wish lists,

2578
02:08:08,532 --> 02:08:11,450
很好，但是所有这些，如果您开始查看HTML，
which is nice, but all of that, if you start looking at the HTML,

2579
02:08:11,449 --> 02:08:14,642
然后您查看来回的网络请求，所有这些
and you look at the network request going back and forth, all of those

2580
02:08:14,643 --> 02:08:17,060
这些天，我们认为理所当然的功能仅仅是
features that we just take for granted these days are just

2581
02:08:17,060 --> 02:08:21,560
建立在非常简单，很好，相对简单的HTML上
built on very simple, well, relatively simple HTML

2582
02:08:21,560 --> 02:08:24,913
表单，这些输入，这些按钮以及服务器上的这些会话。
forms and these inputs and these buttons and on the server, these sessions.

2583
02:08:24,912 --> 02:08:27,829
亚马逊可能会使用不同的语言，不同的框架，
And Amazon might be using a different language, a different framework,

2584
02:08:27,829 --> 02:08:29,389
但是所有这些想法都是相同的。
but all of these ideas are the same.

2585
02:08:29,390 --> 02:08:32,557
因此，本周确实不是要教你几年的Flask
And so indeed this week is not about teaching you Flask which in a few years

2586
02:08:32,556 --> 02:08:34,229
时间可能无关紧要。
time will probably be irrelevant.

2587
02:08:34,229 --> 02:08:37,549
这是关于教授这些HTTP请求的思想和原理的
It's about teaching these ideas and principles of these HTTP requests

2588
02:08:37,550 --> 02:08:40,580
和响应，这些Cookie，这些会话以及功能
and responses, these cookies, these sessions, and the features

2589
02:08:40,579 --> 02:08:43,819
因此我们可以在它们之上建立。
that we can therefore build on top of them.

2590
02:08:43,819 --> 02:08:47,329
好吧，我认为我们有时间提出一个最后的例子，
All right, I think we have time for one final example that

2591
02:08:47,329 --> 02:08:50,869
现在将从上周带回我们的老朋友JavaScript。
will now bring back our old friend JavaScript from last week.

2592
02:08:50,869 --> 02:08:55,069
到目前为止，我们一直在服务器上使用Python
Up until now, we have been using Python on the server

2593
02:08:55,069 --> 02:08:59,059
来动态生成HTML，即使我今天的设计
to generate dynamically HTML, and even though my designs today

2594
02:08:59,060 --> 02:09:02,060
太可怕了，您当然可以想象向它们添加CSS
have been hideous, you could certainly imagine adding CSS to them

2595
02:09:02,060 --> 02:09:04,850
一些类，一些Bootstrap，只是一些漂亮的东西，例如
some, classes, some Bootstrap, just a pretty things up like

2596
02:09:04,850 --> 02:09:09,860
尤其是表格，但这与上周相比没有什么新意。
the forms especially, but that's not anything new versus last week.

2597
02:09:09,859 --> 02:09:12,982
但是上周我们确实将JavaScript作为一种编程语言，
But last week we did have JavaScript as a programming language,

2598
02:09:12,983 --> 02:09:14,900
但这是一种客户端编程语言，
but it was a client side programming language,

2599
02:09:14,899 --> 02:09:16,489
至少在我们的使用中。
at least in our usage thereof.

2600
02:09:16,489 --> 02:09:18,769
这是获取用户浏览器的一种方式
It was a way of getting the user's browsers

2601
02:09:18,770 --> 02:09:22,790
在浏览器上运行代码，条件，函数和循环等
to run code, conditions, and functions, and loops, and so forth on the browser

2602
02:09:22,789 --> 02:09:23,719
不在服务器上。
not on the server.

2603
02:09:23,720 --> 02:09:26,510
今天，我们再次引入了Python，因此我们现在具备了
Today, we've introduced Python again, so we have now the ability

2604
02:09:26,510 --> 02:09:29,390
在服务器上做某事，以及网络在哪里
to do something on the server, and where the web gets

2605
02:09:29,390 --> 02:09:32,210
这些日子真正有趣的是当我们结婚时
really interesting these days is when we marry

2606
02:09:32,210 --> 02:09:34,970
用户看到的所谓的前端
the so-called front end that the user sees

2607
02:09:34,970 --> 02:09:37,280
后端是服务器。
and the backend which is the server.

2608
02:09:37,279 --> 02:09:39,529
前端是您和我互动的用户界面
The front end is the user interface you and I interact

2609
02:09:39,529 --> 02:09:42,259
使用，后端是Python代码，SQL代码
with, the backend is the Python code, the SQL code

2610
02:09:42,260 --> 02:09:45,560
人类永远看不到，但是程序员（程序员）才能看见。
that the humans never see but you, the programmer, see.

2611
02:09:45,560 --> 02:09:52,240
那么，我们到底要怎么做才能将这两个组成部分结合起来，
So what can we do to combine these two components, ultimately,

2612
02:09:52,239 --> 02:09:53,529
前端和后端？
front end and backend?

2613
02:09:53,529 --> 02:09:55,989
好吧，让我们做这样的事情。
Well let's do something like this.

2614
02:09:55,989 --> 02:10:00,819
让我们带回旧的节目数据库，让我继续
Let's bring back our old database of shows, and let me go ahead

2615
02:10:00,819 --> 02:10:03,069
并在此处快速显示此文件夹中的内容。
and show you quickly what's in this folder here.

2616
02:10:03,069 --> 02:10:08,529
在显示中，我们有SQLite 3，显示了点db，它是一个较小的版本
In shows we have SQLite 3 shows dot db, a smaller version

2617
02:10:08,529 --> 02:10:10,299
几周前我们玩过的游戏
of what we played with a few weeks back.

2618
02:10:10,300 --> 02:10:12,400
我只是为了尺寸而将其削减了
I've whittled this down just for size's sake

2619
02:10:12,399 --> 02:10:17,246
只包含电视节目的名称，ID和电视节目的标题
to have only the names, only the IDs of TV shows and the titles of TV shows

2620
02:10:17,247 --> 02:10:17,830
就是这样。
and that's it.

2621
02:10:17,829 --> 02:10:20,912
我丢掉了收视率，作家和导演等
I threw away the ratings and the writers and the directors and all of that

2622
02:10:20,912 --> 02:10:22,749
只是为了只关注标题
just to keep the focus only on the titles

2623
02:10:22,750 --> 02:10:25,625
因为现在我们将开始来回发送大量数据
because now we're going to start sending a lot of data back and forth

2624
02:10:25,625 --> 02:10:28,689
在互联网上使用Python和JavaScript。
over the internet using Python and JavaScript.

2625
02:10:28,689 --> 02:10:32,589
好吧，让我现在继续进行，并提前打开这个示例。
Well let me go ahead now and open up this example as made in advance.

2626
02:10:32,590 --> 02:10:34,098
这是在节目中。
And this is in shows.

2627
02:10:34,097 --> 02:10:35,889
我们将在这里看到一些文件，应用程序
And we'll see a few files here, application

2628
02:10:35,890 --> 02:10:39,370
点py，要求点文字和我的模板，
dot py, requirements dot text, and my templates,

2629
02:10:39,369 --> 02:10:42,249
分别是索引，布局和搜索。
which are index and layout and search.

2630
02:10:42,250 --> 02:10:46,250
好的，那么一堆，但不超过我们之前真正见过的。
All right, so a bunch but not more than we've really seen before.

2631
02:10:46,250 --> 02:10:48,459
让我们继续吧，我早些时候被骗了。
And let's go ahead and, I kind of cheated earlier.

2632
02:10:48,460 --> 02:10:49,760
我没有看需求。
I didn't look at requirements.

2633
02:10:49,760 --> 02:10:51,820
但我不妨考虑一下良好措施的要求。
But I might as well look at requirements for good measure.

2634
02:10:51,819 --> 02:10:54,736
这只是需求点文本中可能还包含其他内容的示例：
Here's just an example of what else might be in requirements dot text:

2635
02:10:54,737 --> 02:10:56,230
CS50库和Flask。
CS50 library and Flask.

2636
02:10:56,229 --> 02:10:58,149
再说一次，这些是预先安装在IDE中的，
And again, those are preinstalled in the IDE,

2637
02:10:58,149 --> 02:11:00,357
但是我们这样做是为了让您如果喜欢冒险并尝试
but we do this so that if you get adventurous and try

2638
02:11:00,358 --> 02:11:03,850
在您自己的Mac或PC上运行这些东西，您已经完成了所有配置
running these things on your own Mac or PC, you have all of the configuration

2639
02:11:03,850 --> 02:11:04,760
您需要的。
that you need.

2640
02:11:04,760 --> 02:11:07,877
好吧，让我们像以前一样从应用程序点py开始，
Well let's start as before with applications dot py,

2641
02:11:07,877 --> 02:11:09,460
让我继续先做。
and let me go ahead and do this first.

2642
02:11:09,460 --> 02:11:13,570
让我先运行此东西，以便我们实际上可以看到该应用程序的运行情况
Let me run this thing first so we can actually see the app in motion

2643
02:11:13,569 --> 02:11:16,039
然后了解它是如何工作的。
and then understand how it works.

2644
02:11:16,039 --> 02:11:19,599
因此，如果我访问此站点，请继续输入办公内容。
So if I visit this, let me go ahead and type in office.

2645
02:11:19,600 --> 02:11:20,950
好吧，什么都没有发生。
All right, nothing happens yet.

2646
02:11:20,949 --> 02:11:22,359
让我单击“搜索”。
Let me click Search.

2647
02:11:22,359 --> 02:11:23,109
好的。
OK.

2648
02:11:23,109 --> 02:11:27,879
然后，我看到所有提及办公室的节目的大项目符号列表，所以没有
I then see a big bulleted list of all shows that mention office, so not

2649
02:11:27,880 --> 02:11:30,022
办公室本身，但一个办公室。
The Office per se, but an office.

2650
02:11:30,021 --> 02:11:32,479
让我继续放大此处并查看URL。
And let me go ahead and zoom out here and look at the URLs.

2651
02:11:32,479 --> 02:11:33,729
让我回到这里。
Let me go back here.

2652
02:11:33,729 --> 02:11:35,687
我要指出的是，我们处在斜线路线上。
Let me point out that we're at the slash route.

2653
02:11:35,688 --> 02:11:37,481
同样，斜线在那里，只是Chrome
Again, the slash is there, it's just Chrome

2654
02:11:37,480 --> 02:11:39,159
这些天默认情况下将其隐藏。
is hiding it by default these days.

2655
02:11:39,159 --> 02:11:42,279
当我搜索诸如office之类的内容并按Enter键时，
And when I search for something like office and hit Enter,

2656
02:11:42,279 --> 02:11:46,886
请注意，我最终以斜杠搜索，问号，q等于办公室。
notice that I end up at slash search, question mark, q equals office.

2657
02:11:46,886 --> 02:11:48,969
所以我从Google那里借鉴了一些灵感，对吗？
So I borrowed some inspiration from Google, right?

2658
02:11:48,970 --> 02:11:51,070
上周我有点被骗，我真的只是
I kind of cheated last week where I really only

2659
02:11:51,069 --> 02:11:53,739
实现了Google的前端，HTML表单，
implemented the front end to Google, the HTML form,

2660
02:11:53,739 --> 02:11:57,439
然后让Google找到我一些猫和狗等等。
and then I let Google find me some cats and some dogs and so forth.

2661
02:11:57,439 --> 02:12:01,149
但是现在，有了Python，您现在可以
But now as, with Python, you now have the ability

2662
02:12:01,149 --> 02:12:04,219
实现该应用程序的双方。
to implement both sides of that application.

2663
02:12:04,220 --> 02:12:06,700
因此，如果我在这里查看源代码，请注意
So if I look at the source code here, notice

2664
02:12:06,699 --> 02:12:10,989
我似乎要返回一个非常大的无序列表项列表，
that I seem to be returning a really big unordered list of list items that

2665
02:12:10,989 --> 02:12:14,459
再次代表与办公室有关的展览的所有标题。
represent, again, all the titles of office related shows.

2666
02:12:14,460 --> 02:12:16,210
好吧，这很好，但是这
All right, this is fine and good, but this

2667
02:12:16,210 --> 02:12:19,180
就像老式的Web编程一样，您可以在其中填写
is of like old school web programming where you fill out

2668
02:12:19,180 --> 02:12:21,100
表单，您按Enter键，然后开始繁荣。
a form, you hit Enter, and boom.

2669
02:12:21,100 --> 02:12:23,890
但是这些日子大多数时候回想起您每次访问网站时，
But these days recall most any time you visit a website,

2670
02:12:23,890 --> 02:12:25,060
一次发生了很多事情。
lots is happening at once.

2671
02:12:25,060 --> 02:12:26,860
您在这里进行了一些自动填充，
You've got some autocomplete going on here,

2672
02:12:26,859 --> 02:12:29,299
您会在此处弹出聊天消息，
you've got chat messages popping up here,

2673
02:12:29,300 --> 02:12:31,870
您在这里有一张正在自动移动的地图
you've got a map over here that's automatically moving

2674
02:12:31,869 --> 02:12:34,699
Uber的一辆小汽车同时在行驶。
and a little car for Uber is moving around at the same time.

2675
02:12:34,699 --> 02:12:37,519
与当今的网络一样，如果您愿意的话，可以使用Web 2.0，
Like the web of today, web 2.0 if you will,

2676
02:12:37,520 --> 02:12:40,810
这不是一个专业术语，而只是一个流行词，
which is not a technical term as much as it is a buzzword,

2677
02:12:40,810 --> 02:12:44,650
指的是越来越动态的网络互动
refers to just increasingly dynamic web interactions

2678
02:12:44,649 --> 02:12:46,329
在用户和计算机之间。
between users and computers.

2679
02:12:46,329 --> 02:12:48,729
借助JavaScript和您自己的后端，
And with JavaScript and with your own backend,

2680
02:12:48,729 --> 02:12:50,559
无论是Python还是其他东西，您现在都可以
be it Python or something else, you can now

2681
02:12:50,560 --> 02:12:53,320
也开始构建这些更动态的界面。
begin to build these more dynamic interfaces as well.

2682
02:12:53,319 --> 02:12:58,329
当我开始输入OFFICE时，这不是很酷吗？
Wouldn't it be cool if when I start typing O F F I C E,

2683
02:12:58,329 --> 02:13:00,529
我们实际上立即看到了结果。
we actually immediately saw the results.

2684
02:13:00,529 --> 02:13:01,776
我们已经看到了这一点。
And we've seen this already.

2685
02:13:01,777 --> 02:13:03,610
上周，记得我开始搜寻
Last week, remember that I started searching

2686
02:13:03,609 --> 02:13:07,239
对于所有以A开头的单词，我使用了一个非常大的字典
for all words that start with A, and I used a really large dictionary

2687
02:13:07,239 --> 02:13:11,499
从p集合5开始，那是140,000个单词，但仅仅是个单词。
from p set 5, but that was 140,000 words but just words.

2688
02:13:11,500 --> 02:13:15,339
这个标题数据库大几兆字节。
This database of titles is several megabytes large.

2689
02:13:15,340 --> 02:13:18,190
而且我不一定要发送整个数据库
And I don't necessarily want to send the entire database

2690
02:13:18,189 --> 02:13:21,697
到浏览器中的电影数量之一，由于性能和尺寸的原因，
of movies to the browser, one, because of performance and size,

2691
02:13:21,698 --> 02:13:23,240
还有两个，知识产权。
and maybe two, intellectual property.

2692
02:13:23,239 --> 02:13:26,179
我真的不希望向每个用户发送我的整个数据库。
I don't really want to send every user my entire database.

2693
02:13:26,180 --> 02:13:29,380
您可以想象要对您的数据保持更多控制
You can imagine wanting to keep a little more control over the data you're

2694
02:13:29,380 --> 02:13:33,470
提供，要求用户登录或为您的服务等付款。
providing, requiring users to log in or pay for your service or the like.

2695
02:13:33,470 --> 02:13:36,820
因此，您可能希望浏览器与服务器对话是有原因的
So there's reasons where you might want the browser to talk to the server

2696
02:13:36,819 --> 02:13:40,849
并且仅获取用户正在搜索的数据，而不是全部。
and only get the data the user is searching for, not the whole thing.

2697
02:13:40,850 --> 02:13:41,840
因此，让我们做到这一点。
So let's do that.

2698
02:13:41,840 --> 02:13:45,130
让我们以这种方式增强该节目的应用程序
Let's enhance this show's application in such a way

2699
02:13:45,130 --> 02:13:47,170
它实际上可以更动态地执行任务，
that it actually does things more dynamically,

2700
02:13:47,170 --> 02:13:49,220
但首先让我们了解一下它是如何工作的。
but let's first understand how it works.

2701
02:13:49,220 --> 02:13:52,990
所以我在这里有几个库，CS50和Flask。
So I have a couple of libraries here, CS50's and Flask.

2702
02:13:52,989 --> 02:13:54,759
我在这里配置Flask。
I'm configuring Flask here.

2703
02:13:54,760 --> 02:13:57,580
然后，我在这里配置数据库。
I'm then configuring my database here.

2704
02:13:57,579 --> 02:13:59,949
在这里，我只有一条非常简单的路线
Down here, I just have a very simple route

2705
02:13:59,949 --> 02:14:03,829
呈现索引点HTML，显然，让我们看一下
that renders index dot HTML, which apparently, let's take a look,

2706
02:14:03,829 --> 02:14:07,659
具有这样的形式，非常简单，与上周非常相似，
has that form, very simple, very similar to last week,

2707
02:14:07,659 --> 02:14:10,419
与今天非常相似，到目前为止，我们已经完成了所有表格。
very similar to today, all of the forms we've done thus far.

2708
02:14:10,420 --> 02:14:14,470
这里的名字等于q，其他所有的东西都是样板。
Here's that name equals q, and everything else is pretty boilerplate.

2709
02:14:14,470 --> 02:14:15,970
因此，让我们现在删除该文件。
So let's get rid of that file now.

2710
02:14:15,970 --> 02:14:19,340
布局也很漂亮，看起来像过去。
The layout, also pretty boilerplate, it looks like things in the past.

2711
02:14:19,340 --> 02:14:23,350
因此，让我们也关闭它，然后返回到索引，应用程序点py。
So let's close that one as well and go back to index, application dot py.

2712
02:14:23,350 --> 02:14:25,540
因此，多汁的部分似乎是搜索路线。
So the juicy part seems to be the search route.

2713
02:14:25,539 --> 02:14:29,529
这是上周我们改用Google时缺少的部分
And this was the piece we were missing last week when we used Google instead

2714
02:14:29,529 --> 02:14:32,139
找我们一些猫和狗。
to find us some cats and some dogs.

2715
02:14:32,140 --> 02:14:35,020
这里我有一条叫做斜线搜索的路由，一个函数
Here I have a route called slash search, a function

2716
02:14:35,020 --> 02:14:37,220
被称为该路线的搜索，
called search that will be called for that route,

2717
02:14:37,220 --> 02:14:41,370
这是SQL和Python的完美结合。
and here is kind of a nice amalgam of SQL and Python.

2718
02:14:41,369 --> 02:14:43,119
我要给自己一个变量，叫做
I'm going to give myself a variable called

2719
02:14:43,119 --> 02:14:45,579
显示，这将是所有行的结果
shows, which is going to be the result of all of the rows

2720
02:14:45,579 --> 02:14:47,739
当我执行此命令时会回来。
that come back when I execute this.

2721
02:14:47,739 --> 02:14:54,019
从标题类似于该占位符问号的节目中选择星号。
Select star from shows where title is like this placeholder question mark.

2722
02:14:54,020 --> 02:14:55,470
现在我要插入什么插件？
Now what am I going to plug-in?

2723
02:14:55,470 --> 02:14:58,110
请注意，乍一看有点神秘，
Notice it's a little cryptic at first glance,

2724
02:14:58,109 --> 02:15:02,429
但我似乎是从请求中获取用户的输入q
but I seem to be taking the user's input, q, from request

2725
02:15:02,430 --> 02:15:06,510
dot args dot get，显然是因为args这个词，所以使用了get，
dot args dot get, so that's using get apparently because of the word args,

2726
02:15:06,510 --> 02:15:08,940
现在还没有形成，它是请求点参数。
and it's not form now, it's request dot args.

2727
02:15:08,939 --> 02:15:12,899
所以我得到了用户的q值，在我的情况下就是办公室，而
So I'm getting the user's q value, which was office in my case, and just

2728
02:15:12,899 --> 02:15:14,809
快速检查一下，百分比是多少
as a quick check, what's with the percent

2729
02:15:14,810 --> 02:15:17,250
在左边和右边的迹象？
signs on the left and the right?

2730
02:15:17,250 --> 02:15:21,589
因为今天我们已经看到了很多百分号，但是它们是不同的。
Because we've seen a lot of percent signs today, but these are different.

2731
02:15:21,590 --> 02:15:22,520
也许在聊天中？
Perhaps in the chat?

2732
02:15:22,520 --> 02:15:26,170
在这种情况下，这些百分号代表什么？
What do these percent signs represent in this context?

2733
02:15:26,170 --> 02:15:28,160
布莱恩，您想回应共识吗？
Brian, you want to echo the consensus?

2734
02:15:28,159 --> 02:15:30,579
布莱恩：是的，有人说他们是SQL占位符。
BRIAN: Yeah, people are saying they're SQL placeholders.

2735
02:15:30,579 --> 02:15:33,136
DAVID J. MALAN：是的，所以是SQL通配符占位符。
DAVID J. MALAN: Yeah, so SQL wildcard placeholders.

2736
02:15:33,136 --> 02:15:36,219
这意味着左侧为零个或多个字符，右侧为零个或多个字符。
That means zero or more characters to the left, zero or more to the right.

2737
02:15:36,220 --> 02:15:40,870
这就是为什么我一开始会与Office进行比赛的原因，
This is why I was getting matches with office at the beginning of the word,

2738
02:15:40,869 --> 02:15:42,919
办公室在最后，办公室在中间。
office at the end, and office in the middle.

2739
02:15:42,920 --> 02:15:45,670
如果我真的想成为肛门我可以摆脱百分号
If I really wanted to be anal I could get rid of the percent signs

2740
02:15:45,670 --> 02:15:48,400
只需要一个完美的搭配，但这不是我的目标
and require only a perfect match, but that's not my goal

2741
02:15:48,399 --> 02:15:50,569
通过这种特定的实现。
with this particular implementation.

2742
02:15:50,569 --> 02:15:54,429
一旦我取回所有这些，哎呀，一旦我取回所有这些行
Once I get back all of, whoops, once I get back all of these rows

2743
02:15:54,430 --> 02:15:58,870
我在这里一行，返回渲染模板，搜索点HTML，
I have here a line, return render template, search dot HTML,

2744
02:15:58,869 --> 02:16:00,229
传递所有这些节目。
passing in all of those shows.

2745
02:16:00,229 --> 02:16:02,619
因此，最后要看的是搜索点HTML。
So the last thing to look at is search dot HTML.

2746
02:16:02,619 --> 02:16:04,767
这非常简单，而且肯定像一个小时前一样
It's pretty simple, and surely like an hour ago

2747
02:16:04,768 --> 02:16:06,310
这看起来超级神秘。
this would have looked super cryptic.

2748
02:16:06,310 --> 02:16:08,650
坦率地说，它看起来仍然很神秘。
It frankly might very well still look cryptic.

2749
02:16:08,649 --> 02:16:10,719
但是一旦您自己开始使用此语法
But once you start using this syntax yourself

2750
02:16:10,720 --> 02:16:13,540
您会看到，哦，这只是一个模板
you'll see that, oh, this is just a template that

2751
02:16:13,539 --> 02:16:19,929
允许我动态输出LI标签的无序列表，每个标签
is allowing me to dynamically output an unordered list of LI tags, each

2752
02:16:19,930 --> 02:16:26,770
其中代表已传递到此模板中的节目的标题。
of which represents the title of a show that's been passed into this template.

2753
02:16:26,770 --> 02:16:27,580
好的。
All right.

2754
02:16:27,579 --> 02:16:29,739
所以现在，最后的繁荣。
So now then the final flourish.

2755
02:16:29,739 --> 02:16:34,298
让我们着手增强此应用程序，以使它不存在任何形式
Let's go about enhancing this application so that there is no form

2756
02:16:34,299 --> 02:16:37,540
以相同的方式提交，但是所有逻辑
to submit in the same way, but instead all of the logic

2757
02:16:37,540 --> 02:16:41,813
实际上发生在JavaScript和后端之间。
actually happens between JavaScript and the backend.

2758
02:16:41,813 --> 02:16:43,480
我将继续进行，并首先执行此操作。
I'm going to go ahead and do this first.

2759
02:16:43,479 --> 02:16:47,581
我将在这里回到应用程序点py，而不是在这里，
I'm going to go back to application dot py here, and instead of this here,

2760
02:16:47,582 --> 02:16:50,290
我要继续执行以下操作：我要继续进行
I'm going to go ahead and do the following: I'm going to go ahead

2761
02:16:50,290 --> 02:16:53,230
而不是渲染模板，我要
and instead of rendering a template, I'm going

2762
02:16:53,229 --> 02:16:55,869
使用称为jsonify的新功能。
to use a new function called jsonify.

2763
02:16:55,870 --> 02:16:59,090
这是一个有趣的名字，我必须在这里导入它。
It's kind of a funny name, and I have to import it up here.

2764
02:16:59,090 --> 02:17:01,270
因此，让我导入jsonify。
So let me import jsonify.

2765
02:17:01,270 --> 02:17:06,785
事实证明，jsonify或json表示JavaScript对象表示法。
It turns out that jsonify, or json, means JavaScript Object Notation.

2766
02:17:06,784 --> 02:17:08,659
一会儿，我们将看到它的外观。
And we'll see what it looks like in a moment.

2767
02:17:08,659 --> 02:17:11,109
但是世界在几年前就在格式上进行了标准化
But the world years ago standardized on a format

2768
02:17:11,110 --> 02:17:14,379
用于在服务器和浏览器之间传输数据
for transmitting data between servers and browsers

2769
02:17:14,379 --> 02:17:19,510
使用非常轻量级的文本格式Jason或JSON JavaScript对象
using a very lightweight text format, Jason, or json, JavaScript Object

2770
02:17:19,510 --> 02:17:20,709
符号。
Notation.

2771
02:17:20,709 --> 02:17:26,709
Jsonify是一个Flask函数，需要一个Python列表或一个Python字典
Jsonify is a Flask function that takes a Python list or a Python dictionary

2772
02:17:26,709 --> 02:17:29,080
并将其转换为json格式。
and converts it into json format.

2773
02:17:29,079 --> 02:17:30,979
因此，我们稍后将看到这一点。
So we'll see this in just a moment.

2774
02:17:30,979 --> 02:17:35,979
所以请注意，我现在正在返回节目的jsonification
So notice that I'm now returning the jsonification of the show's

2775
02:17:35,979 --> 02:17:41,269
变量，它只是从数据库点执行返回的行。
variable, which recall is just the rows that came back from db dot execute.

2776
02:17:41,270 --> 02:17:42,830
因此，让我们看看实际情况。
So let's see this in action.

2777
02:17:42,829 --> 02:17:44,829
我实际上要去我的，让我继续
I'm actually going to go to my, let me go ahead

2778
02:17:44,829 --> 02:17:47,888
并重新启动服务器，因为我做了一些更改。
and restart the server because I've made some changes.

2779
02:17:47,888 --> 02:17:52,449
让我继续，现在转到服务器斜杠搜索，问号，
Let me go ahead and now go to the server slash search, question mark,

2780
02:17:52,450 --> 02:17:53,740
q等于办公室。
q equals office.

2781
02:17:53,739 --> 02:17:56,708
因此，我将手动访问此URL，然后按Enter。
So I'm going to manually visit this URL and hit Enter.

2782
02:17:56,709 --> 02:17:58,330
注意回来了。
Notice what comes back.

2783
02:17:58,329 --> 02:18:00,979
乍一看，这有点神秘。
It's kind of cryptic at first glance here.

2784
02:18:00,979 --> 02:18:04,899
但是请注意，这确实是所谓的JavaScript对象表示法。
But notice this is indeed what's called JavaScript Object Notation.

2785
02:18:04,899 --> 02:18:07,649
左上方有一个方括号。
There's a square bracket over here at top left.

2786
02:18:07,649 --> 02:18:10,779
这意味着，嘿，浏览器，这里是列表。
This means, hey browser, here comes a list.

2787
02:18:10,780 --> 02:18:12,940
大括号，这意味着浏览器
There's a curly brace, which means, hey browser

2788
02:18:12,940 --> 02:18:16,900
这是一个字典，在JavaScript中也称为对象。
here comes a dictionary, otherwise known as an object in JavaScript.

2789
02:18:16,899 --> 02:18:20,859
引用取消引用ID是此词典中的关键字。
Quote unquote ID is the key in this dictionary.

2790
02:18:20,860 --> 02:18:24,730
108878是该密钥的值。
108878 is the value of that key.

2791
02:18:24,729 --> 02:18:27,849
这是第二个键，引用引号标题，其值
Here comes the second key, quote unquote title, the value of which

2792
02:18:27,850 --> 02:18:30,100
是办公室里美好的一天，引用unquote。
is nice day at the office, quote unquote.

2793
02:18:30,100 --> 02:18:31,959
然后有一个闭合的花括号，这是
Then there's a closed curly brace, which is

2794
02:18:31,959 --> 02:18:35,410
字典结尾或对象结尾，逗号，
end of the dictionary or end of the object, a comma,

2795
02:18:35,409 --> 02:18:38,628
然后还有一堆其他的字典。
and then there's a whole bunch of these other dictionaries.

2796
02:18:38,629 --> 02:18:42,670
简而言之，我们在这里看到的只是一个非常原始的文本
So in short, all we're looking at here is a very raw text

2797
02:18:42,670 --> 02:18:46,090
基于Python字典的格式再次转换为
based format of a Python dictionary converted to again,

2798
02:18:46,090 --> 02:18:48,760
称为json，JavaScript对象表示法，
something called json, JavaScript Object Notation,

2799
02:18:48,760 --> 02:18:50,410
从字面上看，这就是它。
which literally, this is about it.

2800
02:18:50,409 --> 02:18:55,689
Json使用双引号，冒号，花括号和方括号，
Json uses double quotes, colons, curly braces, and square brackets,

2801
02:18:55,690 --> 02:18:59,120
就是这样，代表信息。
and that's about it, to represent information.

2802
02:18:59,120 --> 02:19:00,400
所以这太好了。
So this is great.

2803
02:19:00,399 --> 02:19:03,789
但这是一个可怕的用户界面，如果用户看到了
But this is a horrible, horrible user interface if what the user sees

2804
02:19:03,790 --> 02:19:04,870
这是一团糟吗？
is this mess.

2805
02:19:04,870 --> 02:19:06,230
但这不是重点。
But that's not the point.

2806
02:19:06,229 --> 02:19:11,708
现在的要点是让我们的后端返回搜索结果的json数组
The point now is to have our backend return a json array of search results

2807
02:19:11,709 --> 02:19:15,167
并让浏览器将其转换为HTML。
and let the browser convert it into HTML.

2808
02:19:15,166 --> 02:19:17,499
回想一下上周我声称使用JavaScript的情况
Recall from last week I claimed that with JavaScript you

2809
02:19:17,500 --> 02:19:20,620
可以变异或更改您的dom，文档
can mutate or change your dom, the document

2810
02:19:20,620 --> 02:19:22,750
对象模型，内存中的树。
object model, the tree in memory.

2811
02:19:22,750 --> 02:19:25,059
尤其是JavaScript可以做什么
And what you can do in particular with JavaScript

2812
02:19:25,058 --> 02:19:27,759
是将更多节点添加到该树。
is add more nodes to that tree.

2813
02:19:27,760 --> 02:19:31,150
您可以将更多的东西添加到该家族树中，例如结构。
You can add more things to that family tree like structure.

2814
02:19:31,149 --> 02:19:32,259
是的，你好。
So yes, hello.

2815
02:19:32,260 --> 02:19:34,937
我们刚刚通过get得到了，嗨，大卫，嗨，大卫，嗨，大卫。
We just got, Hi, David, Hi, David, Hi, David via get.

2816
02:19:34,936 --> 02:19:35,769
非常感谢你。
Thank you very much.

2817
02:19:35,770 --> 02:19:36,430
好的。
OK.

2818
02:19:36,430 --> 02:19:41,170
所以，让我最小化它，让我现在打开，而不是
So let me minimize that, and let me open up now, not

2819
02:19:41,170 --> 02:19:44,150
搜索点HTML，我们将不再使用它，
search dot HTML which we're not going to bother using anymore,

2820
02:19:44,149 --> 02:19:46,776
而是索引点HTML。
but instead index dot HTML.

2821
02:19:46,777 --> 02:19:48,610
还有索引点HTML，我要去
And index dot HTML, you know what, I'm going

2822
02:19:48,610 --> 02:19:50,530
继续并在这里借用一些代码。
to go ahead and borrow some code here.

2823
02:19:50,530 --> 02:19:52,868
我将继续开放索引点HTML，
I'm going to go ahead and open up index dot HTML,

2824
02:19:52,868 --> 02:19:54,160
我将简化此过程。
and I'm going to simplify this.

2825
02:19:54,159 --> 02:19:55,449
让我停止服务器。
Let me stop the server.

2826
02:19:55,450 --> 02:19:58,630
我要去掉我的布局模板，
I'm going to go ahead and get rid of my layout template,

2827
02:19:58,629 --> 02:20:00,669
我将摆脱我的搜索模板
and I'm going to get rid of my search template

2828
02:20:00,670 --> 02:20:02,630
因为我不再需要它们了。
because I just don't need them anymore.

2829
02:20:02,629 --> 02:20:10,569
因此，我将简化该程序，现在将重点完全放在索引点上。
So I'm going to simplify this program and focus entirely now on index dot

2830
02:20:10,569 --> 02:20:11,199
HTML。
HTML.

2831
02:20:11,200 --> 02:20:12,850
那我想在这里做什么？
So what do I want to do in here?

2832
02:20:12,850 --> 02:20:15,340
我现在需要使用一些JavaScript。
I need to involve some JavaScript now.

2833
02:20:15,340 --> 02:20:17,660
那么我该怎么做呢？
So how am I going to go about doing this?

2834
02:20:17,659 --> 02:20:21,999
首先，我需要继续使用一个名为jQuery的库，
Well first I need to go ahead and use a library called jQuery,

2835
02:20:22,000 --> 02:20:27,552
jQuery的普及程度有所下降，
and jQuery is something that's a little decreasing in popularity,

2836
02:20:27,552 --> 02:20:29,469
但Bootstrap仍在使用它，因此我们将
but it's still used by Bootstrap, and so we'll

2837
02:20:29,469 --> 02:20:32,599
继续使用它，因为实际上您已经在使用它，
continue using it because you're already including it in fact,

2838
02:20:32,600 --> 02:20:35,900
对于您的其他一些示例，但我们需要其他版本。
for some of your other examples, but we need a different version of it.

2839
02:20:35,899 --> 02:20:39,939
因此，我将快速浏览Google jQuery CDN，然后转到该网站，
So I'm going to quickly Google jQuery CDN, I'm going to go to this website,

2840
02:20:39,940 --> 02:20:42,040
长话短说，有很多图书馆
and long story short, there's a lot of libraries

2841
02:20:42,040 --> 02:20:45,730
只需抓住他们的脚本标签就可以使用
out there that you can use by just grabbing their script tag

2842
02:20:45,729 --> 02:20:47,494
并在自己的内部使用它。
and using it inside of your own.

2843
02:20:47,495 --> 02:20:50,120
所以我要在这里继续，让我来清理标签
So I'm going to go ahead here, and let me just clean up the tag

2844
02:20:50,120 --> 02:20:53,898
所以这很长，即使很丑陋，但是可以通过复制和粘贴来完成
so it's all in one long, if ugly, line, but via copying and pasting

2845
02:20:53,897 --> 02:20:57,189
该行，我们通常会在分发的问题集中为您完成
that line, which we'll typically do for you in the problem sets in distribution

2846
02:20:57,190 --> 02:21:00,410
代码，我将继续将该库复制到我的文件中
code, I'm going to go ahead and copy that library into my file

2847
02:21:00,409 --> 02:21:02,859
这样它就在我可以使用的库中。
so that it's among the libraries I can use.

2848
02:21:02,860 --> 02:21:05,380
现在，我要像上周一样继续前进，
And now I'm going to go ahead, just as we did last week,

2849
02:21:05,379 --> 02:21:09,099
我将在自己的页面头部内添加一个脚本标签，
and I'm going to add a script tag inside of my own pages head,

2850
02:21:09,100 --> 02:21:12,630
然后在这里，让我们看看我想在哪里做？
and then down here, let's see, where do I want to do this?

2851
02:21:12,629 --> 02:21:13,629
其实你知道吗？
Actually, you know what?

2852
02:21:13,629 --> 02:21:16,989
让我继续进行一些不同的操作，只是为了保持一致性
Let me go ahead and do this a little differently just for consistency

2853
02:21:16,989 --> 02:21:18,259
与您在网上看到的内容一样。
with what you'll see online.

2854
02:21:18,260 --> 02:21:20,260
我要去做，在我身上做这一切
I'm going to go ahead and do this all in my body

2855
02:21:20,260 --> 02:21:24,460
因此我们不必担心事情会混乱。
so we don't have to worry about things being out of order.

2856
02:21:24,459 --> 02:21:26,804
我们确实会将其全部保留在页面的正文中。
We'll indeed keep it all inside of the page's body.

2857
02:21:26,805 --> 02:21:28,680
我要做的就是给我自己：
And what I'm going to do is give myself this:

2858
02:21:28,680 --> 02:21:32,550
输入，自动完成功能等于取消引用引用，
an input, autocomplete equals quote unquote off,

2859
02:21:32,549 --> 02:21:38,129
自动对焦，然后我将给它一个查询占位符
autofocus, and then I'm going to give it a placeholder of query

2860
02:21:38,129 --> 02:21:39,934
然后是一种文字。
and then a type of text.

2861
02:21:39,934 --> 02:21:42,059
所以我要在那里有一个非常简单的搜索框
So I'm going to have a very simple search box there

2862
02:21:42,059 --> 02:21:44,969
而且我将有一个无序列表，里面什么也没有。
and I'm going to have an unordered list with nothing in it.

2863
02:21:44,969 --> 02:21:46,709
这是刻意的。
And that's deliberate for now.

2864
02:21:46,709 --> 02:21:50,819
然后，我将导入jQuery库。
Then I'm going to import this, the jQuery library.

2865
02:21:50,819 --> 02:21:53,459
然后在我自己的脚本标签内，
And then down here, inside of my own script tags,

2866
02:21:53,459 --> 02:21:56,849
这是我要编写实际代码的地方。
this is where I'm going to write the actual code.

2867
02:21:56,850 --> 02:22:00,100
我要让输入等于文档点，
I'm going to do let input equals document dot,

2868
02:22:00,100 --> 02:22:03,480
让我们像上周一样执行查询选择器，让我继续
let's do query selector just like last week, and let me go ahead

2869
02:22:03,479 --> 02:22:05,319
然后选择我的输入标签
and select my input tag.

2870
02:22:05,319 --> 02:22:06,069
这行得通。
This works.

2871
02:22:06,069 --> 02:22:09,239
我不需要ID或任何课程，因为目前我只有一个输入，
I don't need an ID or any class because at the moment I only have one input,

2872
02:22:09,239 --> 02:22:14,009
因此，引用取消引用输入的查询选择器将专门为我提供该标签。
so query selector of quote unquote input will give me that tag specifically.

2873
02:22:14,010 --> 02:22:16,710
现在让我继续并添加到该输入中
Let me go ahead now and add to that input

2874
02:22:16,709 --> 02:22:20,879
一个事件侦听器，用于侦听key up事件。
an event listener that listens for the key up event.

2875
02:22:20,879 --> 02:22:23,729
回想一下上周我们对事件的讨论并提出建议，
Recall from last week our discussion of events, and key up,

2876
02:22:23,729 --> 02:22:25,919
就像用户触摸并放开键一样
like the user touching and letting go of the key

2877
02:22:25,920 --> 02:22:27,630
是您可以听的事件之一。
is one of the events you can listen for.

2878
02:22:27,629 --> 02:22:31,139
每当用户这样做时，我都想调用以下函数，
And any time the user does that, I want to call the following function,

2879
02:22:31,139 --> 02:22:33,749
这是我们上周也看到的匿名函数。
and it's an anonymous function which we saw last week too.

2880
02:22:33,750 --> 02:22:37,660
在匿名函数中，我要做的是以下内容。
And what I'm going to do inside of this anonymous function is the following.

2881
02:22:37,659 --> 02:22:41,309
我要调用一个新函数，这是当今唯一的新JavaScript函数，
I'm going to call a new function, the only new JavaScript function today,

2882
02:22:41,309 --> 02:22:43,499
叫美元符号下划线得到。
called dollar sign underscore get.

2883
02:22:43,500 --> 02:22:46,979
这是jQuery dot get的简写形式，
This is shorthand notation for jQuery dot get,

2884
02:22:46,979 --> 02:22:52,389
但是，抱歉，美元符号dot get是jQuery dot get的简写。
but, sorry, dollar sign dot get is shorthand for jQuery dot get.

2885
02:22:52,389 --> 02:22:54,389
我将继续进行以下操作。
And I'm going to go ahead and get the following.

2886
02:22:54,389 --> 02:23:00,239
我将获得一个带有问号的斜杠搜索URL，后跟q等于，
I'm going to get a slash search URL with a question mark followed by q equals,

2887
02:23:00,239 --> 02:23:04,959
然后我将继续输入输入点的值
and then I'm going to go ahead and put input dot value.

2888
02:23:04,959 --> 02:23:08,129
因此请注意这一行代码，这个JavaScript字符串，
So notice with this line of code, this JavaScript string,

2889
02:23:08,129 --> 02:23:11,939
我有点用JavaScript代码动态构建
I'm kind of dynamically constructing in JavaScript code

2890
02:23:11,940 --> 02:23:17,495
我要请求的URL显示为斜杠搜索问题
the URL that I want to request shows from, slash search question

2891
02:23:17,495 --> 02:23:20,760
不论输入框的值是多少，标记q都等于
mark q equals, whatever the value of the input box

2892
02:23:20,760 --> 02:23:23,580
是用户输入了一些内容。
was that the user typed something into.

2893
02:23:23,579 --> 02:23:26,969
这个美元符号点获取功能的工作方式
And the way this dollar sign dot get function works

2894
02:23:26,969 --> 02:23:28,889
它支持所谓的回调。
is it supports what's called a callback.

2895
02:23:28,889 --> 02:23:31,259
回调是一个最终将成为
A callback is a function that will eventually be

2896
02:23:31,260 --> 02:23:33,635
在有您的答案时调用。
called when it has an answer for you.

2897
02:23:33,635 --> 02:23:35,010
这在网络上很重要。
And this is important on the web.

2898
02:23:35,010 --> 02:23:37,290
互联网有时可能很慢，而您
The internet can sometimes be slow, and you

2899
02:23:37,290 --> 02:23:39,510
可能想编写与另一台服务器联系的代码
might want to write code that contacts another server

2900
02:23:39,510 --> 02:23:40,602
就像我现在要去做。
like I'm about to do now.

2901
02:23:40,602 --> 02:23:43,560
该服务器可能很慢，或者互联网连接可能很慢，
And that server might be slow or the internet connection might be slow,

2902
02:23:43,559 --> 02:23:46,349
如果整个浏览器冻结，那将很烦人
and it would be annoying if your entire browser froze

2903
02:23:46,350 --> 02:23:50,490
当您等待并等待服务器的响应返回时。
while you waited and waited and waited for the server's response to come back.

2904
02:23:50,489 --> 02:23:54,179
如果您可以说，有了数据，那就更好了。
It's a lot nicer if you can say, when you have the data,

2905
02:23:54,180 --> 02:23:57,900
回电话，可以这么说，在电话上有点隐喻，
call me back, so to speak, sort of metaphorically on the phone,

2906
02:23:57,899 --> 02:24:00,129
通过调用此函数给我回电。
call me back by calling this function.

2907
02:24:00,129 --> 02:24:02,109
那我要调用什么功能呢？
So what function do I want it to call?

2908
02:24:02,110 --> 02:24:04,470
我希望它调用这个匿名函数
I want it to call this anonymous function that's

2909
02:24:04,469 --> 02:24:07,829
将一个名为shows的参数作为输入，
going to take as input an argument called shows,

2910
02:24:07,829 --> 02:24:11,409
但是我可以随便叫那个，我要去做。
but I could call that anything I want, and I'm going to do this.

2911
02:24:11,409 --> 02:24:13,679
我将创建一个HTML字符串
I'm going to create an HTML string that's

2912
02:24:13,680 --> 02:24:15,900
最初什么都没有，引用不带引号。
initially nothing, quote unquote.

2913
02:24:15,899 --> 02:24:18,419
然后，我将执行此操作，这是JavaScript中的for循环
I'm then going to do this, a for loop in JavaScript

2914
02:24:18,420 --> 02:24:24,840
让一个名为ID的变量等于显示中的任何ID
letting a variable called ID equal to whatever ID is in the shows that just

2915
02:24:24,840 --> 02:24:28,830
回到我身边，现在在这个for循环中，
came back to me, and now inside of this for loop,

2916
02:24:28,829 --> 02:24:31,859
让我继续并在此for循环内
let me go ahead and inside of this for loop

2917
02:24:31,860 --> 02:24:35,710
创建一个与show相同的标题，这也是
create a title that's equal to shows, which is again,

2918
02:24:35,709 --> 02:24:40,139
返回的数据是通过该回调返回的，因此
the data that came back on the, came back via that callback so

2919
02:24:40,139 --> 02:24:46,449
会说出点号，点号和分号，
to speak, shows dot ID dot title, and semicolon,

2920
02:24:46,450 --> 02:24:54,190
然后我要做HTML加等于引号取消引用列表项加标题
then I'm going to do HTML plus equals quote unquote list item plus title

2921
02:24:54,190 --> 02:24:57,550
加上报价取消报价的封闭列表项目。
plus quote unquote closed list item.

2922
02:24:57,549 --> 02:25:03,399
然后在这里，最后，我要做文档点查询选择器，引用
Then down here, lastly, I'm going to do document dot query selector, quote

2923
02:25:03,399 --> 02:25:07,579
取消引号ul，点内HTML即可获取HTML。
unquote ul, dot inner HTML gets HTML.

2924
02:25:07,579 --> 02:25:09,579
好吧，这绝对是最疯狂的事情
All right, this is definitely the craziest thing

2925
02:25:09,579 --> 02:25:11,409
到目前为止，我们已经完成了这项工作
we've done thus far today, and it's tying together

2926
02:25:11,409 --> 02:25:14,709
这么多不同的想法，更不用说新的语法了，在所有示例中，
so many different ideas, not to mention new syntax, so of all the examples,

2927
02:25:14,709 --> 02:25:17,709
如果一次过很多，不要太担心。
don't worry too much if this is just a lot at once.

2928
02:25:17,709 --> 02:25:19,629
现在的真正目的不是要介绍您
The goal really now is not to introduce you

2929
02:25:19,629 --> 02:25:22,329
该语法，以便您明天可以重复，但是
to this syntax so that you can repeat it tomorrow, but rather

2930
02:25:22,329 --> 02:25:24,019
我们在做什么的想法。
the idea of what we're doing.

2931
02:25:24,020 --> 02:25:25,220
那我们在做什么呢？
So what are we doing?

2932
02:25:25,219 --> 02:25:27,639
我们有一个带有文本输入的简单网页。
We have a simple web page with a text input.

2933
02:25:27,639 --> 02:25:31,599
我们有一个简单的网页，其中有一个无序列表，当前为空。
We've got a simple web page with an unordered list that's currently empty.

2934
02:25:31,600 --> 02:25:35,380
在此之下，我们包括了名为jQuery的第三方JavaScript库，
Below that, we're including this third party JavaScript library called jQuery,

2935
02:25:35,379 --> 02:25:39,339
哪一个Bootstrap也恰好用于其某些图形组件。
which Bootstrap also happens to use for some of its graphical components.

2936
02:25:39,340 --> 02:25:41,920
然后我首先有自己的JavaScript代码
Then I have my own JavaScript code that first

2937
02:25:41,920 --> 02:25:46,480
声明一个变量，该变量使我可以访问自己网页上的输入标签
declares a variable that gives me access to the input tag on my own webpage

2938
02:25:46,479 --> 02:25:47,799
上面几行。
a few lines above.

2939
02:25:47,799 --> 02:25:49,989
然后，我要使用这个花哨的功能美元符号
I'm then using this fancy function dollar sign

2940
02:25:49,989 --> 02:25:52,659
开始执行所谓的AJAX调用。
get to do what's called an AJAX call.

2941
02:25:52,659 --> 02:25:55,959
AJAX是指网页的功能
AJAX refers to the ability for a web page

2942
02:25:55,959 --> 02:26:01,179
以编程方式向服务器发出其他HTTP请求。
to make additional HTTP requests programmatically to a server.

2943
02:26:01,180 --> 02:26:03,970
允许的，这就是今天所有网站的方式
It is allowing, this is how all websites today

2944
02:26:03,969 --> 02:26:07,359
如果朋友刚刚在某个平台上给您发消息，则可以获取您的聊天消息。
get your chat messages if a friend just messaged you on some platform.

2945
02:26:07,360 --> 02:26:10,250
这就是您输入地址的方式，
It's how when you're typing in your address,

2946
02:26:10,250 --> 02:26:13,060
它可以根据全球范围内的地址自动填写您的地址
it can autocomplete your address based on the entire globe's

2947
02:26:13,059 --> 02:26:14,019
值得的地址。
worth of addresses.

2948
02:26:14,020 --> 02:26:16,570
这也是Google搜索自动完成功能的工作方式。
It's how Google search autocomplete works as well.

2949
02:26:16,569 --> 02:26:20,024
美元符号点get是jQuery内置的一个函数
Dollar sign dot get is a function built into jQuery that's

2950
02:26:20,024 --> 02:26:22,149
使用一些标准的JavaScript功能
using some standard JavaScript functionality that's

2951
02:26:22,149 --> 02:26:25,419
将允许我访问以斜杠搜索结尾的URL
going to allow me to visit the URL that ends with slash search

2952
02:26:25,420 --> 02:26:28,630
问号q等于人类输入的任何东西，
question mark q equals whatever the human typed in,

2953
02:26:28,629 --> 02:26:32,049
当响应准备就绪时，此匿名函数
and when the response is ready, this anonymous function

2954
02:26:32,049 --> 02:26:34,869
将被回电，并将被输入，
is going to get called back, and it's going to be handed an input,

2955
02:26:34,870 --> 02:26:39,580
一个叫做show的参数将等于这个东西。
an argument called shows that is going to equal this stuff.

2956
02:26:39,579 --> 02:26:44,979
这就是我的JavaScript函数将通过shows参数接收的内容。
This is what my JavaScript function is going to receive as its shows argument.

2957
02:26:44,979 --> 02:26:48,369
注意，它是一个列表或数组
And notice, it's a list or an array, inside

2958
02:26:48,370 --> 02:26:53,620
其中是带有两个键（ID和标题）的字典或对象的列表。
of which is a list of dictionaries or objects with two keys, ID, and title.

2959
02:26:53,620 --> 02:26:56,440
让我规定，这恰好是JavaScript中的语法
This, let me stipulate, happens to be the syntax in JavaScript

2960
02:26:56,440 --> 02:26:58,720
为了迭代这样的数据结构，
for iterating over such a data structure,

2961
02:26:58,719 --> 02:27:01,359
这恰好是JavaScript中的语法
and this happens to be the syntax in JavaScript

2962
02:27:01,360 --> 02:27:06,070
允许我创建一个接一个的行，另一个LI，另一个LI，
for allowing me to create one line after another, another LI, another LI,

2963
02:27:06,069 --> 02:27:10,779
使用串联将其附加到称为HTML的变量。
appending it using concatenation to this variable called HTML.

2964
02:27:10,780 --> 02:27:13,360
这最后一行代码对浏览器说，
And this very last line of code says to the browser,

2965
02:27:13,360 --> 02:27:17,890
去选择我那个UL并插入其内部HTML
go select me that UL and plug into its inner HTML

2966
02:27:17,889 --> 02:27:20,979
它的内容，我的变量的值。
the contents of it, the value of my variable.

2967
02:27:20,979 --> 02:27:25,119
现在，我的手指没有从句法上拧紧，让我继续
And now crossing my fingers I did not screw up syntactically, let me go ahead

2968
02:27:25,120 --> 02:27:29,140
并进行Flask运行，我仍然需要运行Flask，因为我在这里有一个后端。
and do Flask run, I still need to run Flask because I do have a backend here.

2969
02:27:29,139 --> 02:27:33,549
让我回到浏览器并重新加载斜线路由。
Let me go back to my browser and reload the slash route.

2970
02:27:33,549 --> 02:27:38,079
让我现在继续输入，O，F，该死。
Let me go ahead now and type in O, F, dammit.

2971
02:27:38,079 --> 02:27:39,459
哦，等等，那太慢了。
Oh wait, it was just slow.

2972
02:27:39,459 --> 02:27:42,849
所以请注意，到目前为止我输入的所有内容或到目前为止我所看到的所有内容
So notice, everything I've typed thus far or everything I'm seeing thus far

2973
02:27:42,850 --> 02:27:44,330
匹配单词off。
matches the word off.

2974
02:27:44,329 --> 02:27:47,139
如果我继续这个，办公室，让它搜索
And if I continue this, office, and let it search

2975
02:27:47,139 --> 02:27:49,249
让互联网做自己的事情，现在确实如此，
and let the internet do its thing, now indeed,

2976
02:27:49,250 --> 02:27:51,520
它被缩小为办公室比赛的清单。
it's been whittled down to a list of office matches.

2977
02:27:51,520 --> 02:27:53,560
再次注意，如果我转到“检查”标签，
And notice again if I go to the inspect tab,

2978
02:27:53,559 --> 02:27:58,329
打开“检查”下的“网络”标签，让我继续并输入Office，
open the network tab under inspect, let me go ahead and type in office,

2979
02:27:58,329 --> 02:28:05,439
请注意，在这里，我键入的每个击键都会触发，要执行的OFFICE，
notice here that every keystroke I typed triggered, O F F I C E to be executed,

2980
02:28:05,440 --> 02:28:08,770
触发了AJAX调用，即对服务器的HTTP调用。
triggered an AJAX call, that is an HTTP call to the server.

2981
02:28:08,770 --> 02:28:12,290
并请注意，如果我单击那里的最后一个，请向下滚动，
And notice that if I click on the last one there, scroll down,

2982
02:28:12,290 --> 02:28:14,980
我不仅会看到我的要求和回应，
I will see not only my request and my response,

2983
02:28:14,979 --> 02:28:18,699
但是如果我点击响应，我确实会看到这个大json
but if I click on the response, I'll indeed see this big json

2984
02:28:18,700 --> 02:28:20,212
所有数据的数组。
array of all of the data.

2985
02:28:20,211 --> 02:28:22,419
其实很不幸，它很慢，
And it's actually rather fortuitous that it was slow,

2986
02:28:22,420 --> 02:28:24,212
因为我们将以一个演示结尾。
because we were going to end with one demo.

2987
02:28:24,211 --> 02:28:26,739
例如，如果我好奇地知道，在室内
For instance, if I was curious to know, being indoors

2988
02:28:26,739 --> 02:28:28,869
一整天，天气如何，也许
all day, what the weather is like, I might maybe

2989
02:28:28,870 --> 02:28:33,074
在这儿打电话给布莱恩。
call Brian up on this here telephone.

2990
02:28:33,074 --> 02:28:38,530
[电话铃声]
[PHONE RINGING]

2991
02:28:38,530 --> 02:28:39,430
布莱恩：你好？
BRIAN: Hello?

2992
02:28:39,430 --> 02:28:42,910
DAVID J. MALAN：嗨，Brian，你知道今天外面的天气如何吗？
DAVID J. MALAN: Hi, Brian, do you know what the weather is like outside today?

2993
02:28:42,909 --> 02:28:44,739
布莱恩：我没来过一会儿，但我可以检查一下，
BRIAN: I haven't been outside in a little bit, but I can check,

2994
02:28:44,739 --> 02:28:45,969
我会给您回电。
and I will call you back.

2995
02:28:45,969 --> 02:28:46,359
DAVID J. MALAN：好的。
DAVID J. MALAN: OK.

2996
02:28:46,360 --> 02:28:48,520
并且请注意，如果我必须等他的电话会很烦
And notice it would be annoying if I had to wait on the phone for him

2997
02:28:48,520 --> 02:28:49,103
到外面去。
to go outside.

2998
02:28:49,102 --> 02:28:52,621
所以我要挂断电话，然后等他给我回电，
So I'm going to hang up, and I'm just going to wait for him to call me back,

2999
02:28:52,621 --> 02:28:54,579
这正是我的代码中正在发生的事情。
and that's exactly what's happening in my code.

3000
02:28:54,579 --> 02:28:58,689
当我将此匿名函数传递给此get函数时，
When I pass this anonymous function to this get function,

3001
02:28:58,690 --> 02:29:01,930
他们到达这里意味着HTTP获取，这是在告诉浏览器，
and they get here means HTTP get, this is telling the browser,

3002
02:29:01,930 --> 02:29:04,840
找到答案后，请调用此函数，
call this function once you have the answer,

3003
02:29:04,840 --> 02:29:11,520
就像希望布赖恩（Brian）即将回拨，甚至是回拨一样。
much like hopefully Brian's about to have the, and indeed, the call back.

3004
02:29:11,520 --> 02:29:12,160
你好。
Hello.

3005
02:29:12,159 --> 02:29:13,329
布莱恩：嗨。
BRIAN: Hi.

3006
02:29:13,329 --> 02:29:14,349
我抬头看天气。
I looked up the weather.

3007
02:29:14,350 --> 02:29:16,600
看来今天将是个轻快的秋天。
It looks like it's going to be a brisk fall day today.

3008
02:29:16,600 --> 02:29:18,683
DAVID J. MALAN：很好，非常感谢。
DAVID J. MALAN: Wonderful, well thank you so much.

3009
02:29:18,683 --> 02:29:20,110
CS50就是这样。
And that is it for CS50.

3010
02:29:20,110 --> 02:29:22,720
下次见。
We will see you all next time.

3011
02:29:22,719 --> 02:29:26,069
[音乐播放]
[MUSIC PLAYING]

