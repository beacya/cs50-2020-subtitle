1
00:00:00,000 --> 00:00:03,486
[音乐响起--字幕精校中--By Persisan]
[MUSIC PLAYING]

2
00:00:48,807 --> 00:00:49,890
DAVID J. MALAN：好的。
DAVID J. MALAN: All right.

3
00:00:49,890 --> 00:00:54,365
所以这是CS50，这是第八周，万圣节前夕的一周。
So this CS50, and this is week eight, the week of all Hallows' Eve.

4
00:00:54,365 --> 00:00:57,240
的确，感谢我们在美国话剧团里的朋友们，
Indeed, thanks to our friends here in the American Repertory Theater,

5
00:00:57,240 --> 00:01:00,720
今天的舞台上在有一些特殊的灯光和一些特殊的角色映衬下显的
the stage looks amazing today with some special lighting

6
00:01:00,719 --> 00:01:02,279
格外精彩。
and some special characters.

7
00:01:02,280 --> 00:01:04,410
当然，说到人物，在过去的一周里，
Of course, speaking of characters, this past week

8
00:01:04,409 --> 00:01:08,399
你们都第一次探索了50-ville，寻找失踪的
you all explored 50-ville for the very first time, looking for the rubber

9
00:01:08,400 --> 00:01:09,720
橡皮鸭子。
duck that had gone missing.

10
00:01:09,719 --> 00:01:12,599
幸运的是，罪魁祸首（橡皮鸭）已经被找到，
And thankfully, the culprits have been found,

11
00:01:12,599 --> 00:01:18,689
允许我说有一个小人物（橡皮鸭）想向你们问好。
and allow me to say that a little someone would like to say hello.

12
00:01:18,689 --> 00:01:21,749
是的，即使是他也为这个场合打扮了一番，
Yes, even he has rather dressed up for the occasion,

13
00:01:21,750 --> 00:01:24,399
但还是感谢你们在这里所做的一切努力。
but thank you for all the hard work there.

14
00:01:24,400 --> 00:01:28,080
因此本周，我们当然要过渡到web编程的世界，
So this week, of course, we transition to the world of web programming,

15
00:01:28,079 --> 00:01:30,367
其动机是，在过去的几周里，
the motivation being that for the past many weeks,

16
00:01:30,367 --> 00:01:32,159
我们写的几乎所有的代码
pretty much all of the code we have written

17
00:01:32,159 --> 00:01:35,896
都集中在命令行程序上，编译代码，
has been focused on command line programs, compiling your code,

18
00:01:35,897 --> 00:01:38,730
解析你的代码，但通常只是与一个相当
interpreting your code, but generally just interacting with a fairly

19
00:01:38,730 --> 00:01:41,970
平凡的闪烁的提示进行文本上的互动。
mundane blinking prompt, textually.

20
00:01:41,969 --> 00:01:44,549
但是，当然，现在你和我每天使用的软件
But of course, the software that you and I use every day

21
00:01:44,549 --> 00:01:48,629
是以笔记本电脑和台式机的浏览器
these days is in the form of laptops and desktops in browsers

22
00:01:48,629 --> 00:01:53,369
或移动设备或应用程序的形式出现的，今天，我们开始过渡到
or on mobile devices or apps, and today, we begin to transition

23
00:01:53,370 --> 00:01:55,860
一组语言和一组技术，
to a set of languages and a set of technologies

24
00:01:55,859 --> 00:01:59,339
通过它们，你可以将过去一周所有的程序化编程的知识和
via which you can start to apply all of the past week's knowledge

25
00:01:59,340 --> 00:02:02,670
心理模型开始应用
and mental models for procedural programming

26
00:02:02,670 --> 00:02:05,872
到一个更熟悉、更图形化的领域。
to a much more familiar, a much more graphical domain.

27
00:02:05,871 --> 00:02:08,038
事实上，在接下来的几周的课程里
Indeed, over the course of the next couple of weeks,

28
00:02:08,038 --> 00:02:11,399
我们将专注于网络编程和
we'll be focused on web programming and the use of languages

29
00:02:11,400 --> 00:02:15,780
称为HTML，CSS和JavaScript的语言的使用，这些语言构成了当今的网站，
called HTML and CSS and JavaScript, with which today's websites are made,

30
00:02:15,780 --> 00:02:19,740
并且当今移动应用或你手机上的应用程序也越来越多地
and increasingly with which today's mobile applications or apps

31
00:02:19,740 --> 00:02:22,090
用到这些语言。
on your phone are made as well.

32
00:02:22,090 --> 00:02:24,270
但是为了达到这个目的，
But in order to get to that point in the story,

33
00:02:24,270 --> 00:02:27,840
我们需要考虑我们要在其上运行这些网站
we need to consider what the framework is

34
00:02:27,840 --> 00:02:31,920
或这些网络应用的框架是什么。
on top of which we're going to run these websites or these web applications.

35
00:02:31,919 --> 00:02:34,199
因此，这引出了互联网问题。
And so that invites the question of the internet.

36
00:02:34,199 --> 00:02:36,179
互联网到底是什么？
Exactly what is the internet?

37
00:02:36,180 --> 00:02:39,600
我们所有人每天都在使用它，但让我们从
All of us use it every day, but let's take a couple of volunteers

38
00:02:39,599 --> 00:02:44,939
观众中选出几位志愿者，为我们定义下我们所说的互联网。
from the audience, just to define for us what we mean by the internet.

39
00:02:44,939 --> 00:02:47,759
我们所有人现在都在互联网上，
All of us are literally on the internet right now,

40
00:02:47,759 --> 00:02:52,599
但如果你退一步想一想，互联网是什么？
but if you take a step back and think about it, what is the internet?

41
00:02:52,599 --> 00:02:56,469
对于技术水平不如你或者你不太熟悉的人，你如何
How might you define it for someone less technical than you

42
00:02:56,469 --> 00:02:58,359
定义互联网？
or someone less familiar?

43
00:02:58,360 --> 00:03:00,060
索菲娅，你将如何定义它？
Sophia, how would you define it?

44
00:03:00,060 --> 00:03:01,810
听众：世界各地的所有计算机，
AUDIENCE: The network of all the computers

45
00:03:01,810 --> 00:03:05,320
它们从网络中吸收信息，
around the world that are taking in information from the network

46
00:03:05,319 --> 00:03:06,879
同时也给互联网提供信息。
and also giving it information.

47
00:03:06,879 --> 00:03:07,879
DAVID J. MALAN：完美。
DAVID J. MALAN: Perfect.

48
00:03:07,879 --> 00:03:09,709
互联网是这个网络的网络，
The internet is this network of networks,

49
00:03:09,710 --> 00:03:12,610
所以如果你在家里有一个小网络，
so if you have a small network in your home, a small network

50
00:03:12,610 --> 00:03:15,010
在你的公司或你的大学有一个小网络或一个大网络，
or a large network at your company or you university

51
00:03:15,009 --> 00:03:18,039
你开始使用电缆或某种无线技术将所有这些网络互联起来，
and you start to interconnect all of those networks using cables

52
00:03:18,039 --> 00:03:22,089
你就得到了互联网，可以说是
or some kind of wireless technology, you get the internet, so to speak,

53
00:03:22,090 --> 00:03:23,690
一个网络的网络。
a network of networks.

54
00:03:23,689 --> 00:03:26,619
这是真正的基础设施，如果你愿意的话，
And this is really the infrastructure, if you will,

55
00:03:26,620 --> 00:03:29,690
当今所有的应用程序都能在其上运行。
on top of which all of today's applications are run.

56
00:03:29,689 --> 00:03:33,099
因此，当你使用网络，使用聊天，使用Slack时，
So when you use the web, when you use chat, when you use Slack,

57
00:03:33,099 --> 00:03:36,399
当你使用视频会议，Zoom或类似的应用时，你正在使用互联网，
when you use video conferencing, Zoom or the like, you're using the internet,

58
00:03:36,400 --> 00:03:39,430
但把互联网真正看作是低层次的管道，
but think of the internet really as the lower-level plumbing that

59
00:03:39,430 --> 00:03:42,910
把0和1从你那里送到别人那里，然后再回来，
gets the zeros and ones from you to someone else and back,

60
00:03:42,909 --> 00:03:45,339
而上面的应用程序最终都是
and the applications on top of that are all

61
00:03:45,340 --> 00:03:47,410
通过软件实现的。
implemented, ultimately, in software.

62
00:03:47,409 --> 00:03:50,499
因此，如果我们考虑到，我们所拥有的这些计算机
And so if we consider, then, that we've got all of these computers

63
00:03:50,500 --> 00:03:52,810
以某种方式相互连接，
interconnected somehow, it stands to reason

64
00:03:52,810 --> 00:03:55,570
我们需要以某种方式决定作为一个全球社区
that we need to somehow decide as a global community

65
00:03:55,569 --> 00:03:59,389
如何从A点到B点以及其它地方获取数据？
how to get data from point A to point B and beyond.

66
00:03:59,389 --> 00:04:03,257
因此，在整个互联网中有这些称为路由器的计算机。
And so throughout the internet are these computers called routers.

67
00:04:03,258 --> 00:04:05,050
归根结底，它们可能比
And at the end of the day, they're probably

68
00:04:05,050 --> 00:04:07,750
你我熟悉的台式机和笔记本电脑大一点，
a little bigger than the desktops and laptops with which you and I are

69
00:04:07,750 --> 00:04:09,582
但最终，它们都有同样的设备，
familiar, but at the end of the day, they're

70
00:04:09,582 --> 00:04:13,389
具有CPU，中央处理器，是计算机
the same kinds of devices with CPUs, Central Processing Units, the brains

71
00:04:13,389 --> 00:04:15,849
内部进行所有思考的大脑，
inside of the computer that do all the thinking,

72
00:04:15,849 --> 00:04:18,609
RAM或内存，用于存储所有值，
RAM or memory, where all of the values are stored,

73
00:04:18,610 --> 00:04:20,829
还有硬盘，数据保存在里面。
and hard disks, where data is persisted.

74
00:04:20,829 --> 00:04:23,320
例如，这里有一张来自麻省理工学院的图片
And pictured here, for instance, is an image from MIT

75
00:04:23,319 --> 00:04:27,942
描述了几年前美国各地互联网上
that depicted a few years back of what-- some of the most significant peering

76
00:04:27,942 --> 00:04:30,109
一些最重要的对接点的情况。
points on the internet throughout the United States.

77
00:04:30,110 --> 00:04:33,670
所以这里的每个红点基本上代表一个路由器
So each of the red dots here represents essentially one router

78
00:04:33,670 --> 00:04:36,880
或一个非常重要的地方，大量的电缆进入然后出去，
or one very important place into which a lot of cables

79
00:04:36,879 --> 00:04:40,751
与全国所有的点相互连接。
come in and then go out and interconnect all points of the country.

80
00:04:40,752 --> 00:04:43,210
然后这些事一直延续到美国以外的地方，
And then this story continues well beyond the United States

81
00:04:43,209 --> 00:04:46,569
如今使用海洋电缆和其他无线
these days using oceanic cables and other wireless

82
00:04:46,569 --> 00:04:48,319
或卫星技术或类似技术。
or satellite technologies or the like.

83
00:04:48,319 --> 00:04:52,509
因此足以说明，有这样的网状结构，
So suffice it to say, there's this mesh, this interconnection

84
00:04:52,509 --> 00:04:56,679
所有这些不同的计算机和世界各地的网络相互连接，
of all of these different computers and in turn networks throughout the world,

85
00:04:56,680 --> 00:04:59,830
也就是说，有许多不同的路径将数据
which is to say that there's many different paths that data can take

86
00:04:59,829 --> 00:05:03,669
从A点发送到B点。你和Facebook.com或
to go from point A to point B. There isn't necessarily a line between you

87
00:05:03,670 --> 00:05:06,250
Stanford.edu之间没有必然的界限。
and Facebook.com or Stanford.edu.

88
00:05:06,250 --> 00:05:08,950
相反，有一大堆路由器
Rather, there's a whole bunch of routers--

89
00:05:08,949 --> 00:05:11,739
有时是少数几个，有时多大30个
sometimes a handful, sometimes as many as 30--

90
00:05:11,740 --> 00:05:14,230
将你的数据从左到右，
that will relay your data from left to right,

91
00:05:14,230 --> 00:05:18,340
从上到下，或者其他方向转发，以便把数据从你那里
to up to down, or in some other direction in order to get data from you

92
00:05:18,339 --> 00:05:20,409
发送到你试图联系的网络服务器上，
to the web server that you're trying to contact

93
00:05:20,410 --> 00:05:23,240
然后再把服务器的响应反馈给你。
and then back to you with the server's response.

94
00:05:23,240 --> 00:05:24,490
那么这一切是如何进行的呢？
So how does all of this work?

95
00:05:24,490 --> 00:05:26,380
好吧，几十年前，人类基本上不得不
Well, decades ago, humans essentially had

96
00:05:26,379 --> 00:05:31,329
聚在一起，作为一个团队决定他们要使用什么标准，
to get together and decide as a group what standards they were going to use,

97
00:05:31,329 --> 00:05:35,439
或者更具体地说，所有这些计算机要用什么协议。
or more specifically, what protocols all of these computers are going to speak.

98
00:05:35,439 --> 00:05:39,369
协议与其说是一种语言，不如说是一组约定，对吗？
A protocol isn't so much a language as it is a set of conventions, right?

99
00:05:39,370 --> 00:05:42,550
回到更健康的时代，你和我，如果我们见到彼此，
Back in healthier times, you and I, if we were meeting each other in person,

100
00:05:42,550 --> 00:05:45,040
可能会伸出一只手，如果我这样做了，你会立即
might extend a hand, and if I did this, you would immediately

101
00:05:45,040 --> 00:05:47,165
知道你可能也应该伸出你的手，
know that you should probably extend your hand too,

102
00:05:47,165 --> 00:05:49,130
我们会进行实体的握手。
and we would have a physical handshake.

103
00:05:49,129 --> 00:05:50,649
那是一个人类的协议。
And that's a human protocol.

104
00:05:50,649 --> 00:05:53,512
我通过伸出我的手来启动与你的沟通。
I initiate a communication with you by extending my hand.

105
00:05:53,512 --> 00:05:55,929
您通过伸出你的手来承认这种沟通。
You acknowledge that communication by extending your hand.

106
00:05:55,930 --> 00:05:58,040
然后这种互动就完成了。
And then that interaction is complete.

107
00:05:58,040 --> 00:05:59,560
因此我们有这些人类协议。
So we have these human protocols.

108
00:05:59,560 --> 00:06:02,260
在计算机的世界里，也有类似的协议，
In the world of computers, there's similarly protocols,

109
00:06:02,259 --> 00:06:04,589
但显然都是零和一。
but obviously it's all zeros and ones.

110
00:06:04,589 --> 00:06:07,509
因此，如果第一台计算机发送这种零和一的模式，
So if the first computer sends this pattern of zeros and ones,

111
00:06:07,509 --> 00:06:11,539
另一台计算机应使用一组不同的零和一进行答复。
the other computer should reply with a different set of zeros and ones.

112
00:06:11,540 --> 00:06:13,840
因此我们将要讨论的这些协议只是
And so these protocols we're about to discuss just

113
00:06:13,839 --> 00:06:16,389
标准化了这些零和一的模式是什么，
standardize what those patterns of zeros and ones are,

114
00:06:16,389 --> 00:06:19,659
或者说，所有的信息是如何来回传递。
or really, what all of the messages are going back and forth.

115
00:06:19,660 --> 00:06:23,860
在互联网上从A点到B点获取数据最常用的两个
And two of the protocols most commonly used to get data on the internet

116
00:06:23,860 --> 00:06:27,760
协议被称为TCP/IP。
from point A to point B are called TCP/IP.

117
00:06:27,759 --> 00:06:31,599
TCP和IP是两个独立的协议，但是它们经常
TCP and IP are two separate protocols, but they're so often

118
00:06:31,600 --> 00:06:35,530
一起使用，你通常会一口气提到它们，即TCP/IP。
used together that you typically mention them in one breath, TCP/IP.

119
00:06:35,529 --> 00:06:39,399
这些是你可能已经看到的缩写，也许在你的Mac或PC上
And these are acronyms you've probably seen maybe on your Mac or PC

120
00:06:39,399 --> 00:06:41,499
或你的手机设置的某个地方。
or somewhere on your phone settings.

121
00:06:41,500 --> 00:06:44,470
它基本上是指计算机用来将数据从一个点到
And it refers to essentially two sets of conventions

122
00:06:44,470 --> 00:06:48,432
另一个点的两套惯例。
that computers use to get data from one point to another.

123
00:06:48,432 --> 00:06:50,140
那么我们所说的数据是什么意思，我们在A点和
So what do we mean by data and what do we

124
00:06:50,139 --> 00:06:52,629
B点之间移动东西是什么意思？
mean by moving things between point A and point B?

125
00:06:52,629 --> 00:06:55,989
我们就把它看作是一个老式的信封，据此
We'll just consider it as an old-school envelope, whereby

126
00:06:55,990 --> 00:06:58,917
如果你想给世界上的其他人寄信，
if you wanted to send a letter to someone else in the world,

127
00:06:58,916 --> 00:07:01,749
你和我在当年可能会伸手去拿一张纸。
you and I would probably reach for a piece of paper back in the day.

128
00:07:01,750 --> 00:07:04,299
我们就拿起一个信封，在那张纸上写下我们的字条
We would pick up an envelope and we would write our note

129
00:07:04,300 --> 00:07:07,010
把字条放进信封里，
on that piece of paper, put the paper in the envelope,

130
00:07:07,009 --> 00:07:10,449
然后在写完真正的信息后最重要的一步是在信封
and then the most important step after writing the actual message

131
00:07:10,449 --> 00:07:12,219
上写上地址。
would be to address the envelope.

132
00:07:12,220 --> 00:07:15,370
当然，在现实世界中，你会把收件人的地址
And of course, in the real world, you would put the recipient's address

133
00:07:15,370 --> 00:07:17,290
通常写在信封的中间。
typically in the middle of the envelope.

134
00:07:17,290 --> 00:07:20,860
你可以在信封的上部写上你的回信地址，
You might put your return address in the top corner of the envelope,

135
00:07:20,860 --> 00:07:22,910
然后可能是邮费或类似的东西。
and then maybe postage or something like that.

136
00:07:22,910 --> 00:07:25,390
但是我们人类
But we humans have pretty much standardized

137
00:07:25,389 --> 00:07:28,059
通过所有邮政系统，在使用信封时已经基本实现了标准化
through all of the postal systems that kind of convention

138
00:07:28,060 --> 00:07:29,080
的那种惯例。
when using envelopes.

139
00:07:29,079 --> 00:07:32,499
所以这里的隐喻是信封和其中的信息
So the metaphor here is that the envelope and the message

140
00:07:32,500 --> 00:07:36,849
通常被认为或称为数据包，
therein are generally thought of or referred to as packets,

141
00:07:36,850 --> 00:07:38,040
信息包。
packets of information.

142
00:07:38,040 --> 00:07:39,790
而这将是计算机最终将使用
And this would be the physical incarnation

143
00:07:39,790 --> 00:07:43,010
零和一进行的物理化身。
of what computers ultimately are just going to do using zeros and ones.

144
00:07:43,009 --> 00:07:45,009
因此，让我们把他们用于实际
So let's tease apart the two sets of conventions

145
00:07:45,009 --> 00:07:48,129
将数据放入这些信封、给这些信封编写地址以及
they use for actually putting data in these envelopes,

146
00:07:48,129 --> 00:07:52,419
将它们从A点发送到B点的两套惯例分开。
addressing these envelopes, and sending them out from point A to point B.

147
00:07:52,420 --> 00:07:53,980
我们首先考虑IP。
Let's consider first IP.

148
00:07:53,980 --> 00:07:56,650
IP代表Internet协议，如今几乎所有的
IP stands for Internet Protocol, and pretty much

149
00:07:56,649 --> 00:08:00,579
Mac、PC、iPhone、iPad和安卓设备
any Mac and PC and iPhone and iPad and Android device

150
00:08:00,579 --> 00:08:05,079
都被苹果或谷歌或其他公司设计成
these days has been designed by Apple or Google or someone else

151
00:08:05,079 --> 00:08:07,029
能够理解IP。
to understand IP.

152
00:08:07,029 --> 00:08:09,849
就好像那些公司编写了
It's as though those companies have written software

153
00:08:09,850 --> 00:08:14,320
运行在这些设备上的软件，确保这些设备都支持IP，
running on those devices that make sure that those devices all support IP,

154
00:08:14,319 --> 00:08:17,949
就像当年我被教导，大概被某个人教导
just like I was taught, presumably by some human, this human convention

155
00:08:17,949 --> 00:08:19,959
这种人类握手的惯例。
of shaking hands back in the day.

156
00:08:19,959 --> 00:08:23,499
IP，Internet协议，简单地将计算机
IP, Internet Protocol, simply standardizes

157
00:08:23,500 --> 00:08:26,390
之间的寻址方式标准化。
how computers address each other.

158
00:08:26,389 --> 00:08:29,641
因此，在我们人类的现实世界中，如果你想给我寄一个信封
So in our physical human world, if you wanted to send me an envelope

159
00:08:29,641 --> 00:08:32,558
你可以写信给哈弗大学的计算机科学系
for instance, you might write to Harvard's Computer Science Department

160
00:08:32,558 --> 00:08:38,109
地址是33 Oxford Street, Cambridge, Massachusetts, 02138, USA。
at 33 Oxford Street, Cambridge, Massachusetts, 02138, USA.

161
00:08:38,110 --> 00:08:41,559
那大概是一个唯一的邮政地址
That is presumably a unique postal address

162
00:08:41,558 --> 00:08:43,899
地址是校园里的计算机科学大楼
that addresses the Computer Science building on campus

163
00:08:43,899 --> 00:08:47,529
这样一来如果你在加利福尼亚州或国外的任何地方投下一个信封，
so that if you drop an envelope in the mail in California or anywhere abroad

164
00:08:47,529 --> 00:08:51,459
它最终通过一些邮件运送者的投递之类的方式
it should eventually via some number of hops and mail carriers and the like

165
00:08:51,460 --> 00:08:54,250
到达那个特定地址。
make its way to that particular address.

166
00:08:54,250 --> 00:09:00,009
因此，计算机也有类似的唯一地址，称为IP地址。
Computers, then, have similarly unique addresses known as IP addresses.

167
00:09:00,009 --> 00:09:05,259
因此，当你的计算机，Mac，PC，手机等设备，从自身向另一个
And so when your computer, Mac, PC, phone, whatever, sends data from itself

168
00:09:05,259 --> 00:09:07,809
服务器发送数据时，它写在那个虚拟信封
to another server, the address that it writes

169
00:09:07,809 --> 00:09:13,789
外面的地址就是远程服务器的IP地址。
on the outside of that virtual envelope is the IP address of the remote server.

170
00:09:13,789 --> 00:09:16,209
例如，如果我要向你发送一条消息，
So for instance, if I were to send a message to you,

171
00:09:16,210 --> 00:09:18,070
我会找出你的IP地址是什么。
I would figure out what your IP address is.

172
00:09:18,070 --> 00:09:21,070
我会将该IP地址写在信封的外面。
I would write that IP address virtually on the outside of this envelope.

173
00:09:21,070 --> 00:09:24,730
我可能会在这个比喻性的信封的左上角
I would probably write my own IP address on the top left-hand corner

174
00:09:24,730 --> 00:09:26,500
写上我自己的IP地址。
of this metaphorical envelope.

175
00:09:26,500 --> 00:09:28,540
然后我将其发送到互联网上。
And then I would send it out on the internet.

176
00:09:28,539 --> 00:09:29,659
而这意味着什么呢？
And what does that mean?

177
00:09:29,659 --> 00:09:33,309
这意味着我要拿着那个信封，然后将其交给最近的路由器。
It would mean I take that envelope and I hand it to the nearest router.

178
00:09:33,309 --> 00:09:36,759
事实证明，当你在家时，你实际上拥有一个自己的路由器。
So it turns out when you're at home, you actually have a router of your own.

179
00:09:36,759 --> 00:09:40,089
它是连接到你的电缆调制解调器或DSL调制解调器或类似东西
It's that device that connects to your cable modem or DSL modem or something

180
00:09:40,090 --> 00:09:40,660
的那个设备。
like that.

181
00:09:40,659 --> 00:09:43,489
如果你在校园里，例如哈佛或耶鲁大学这样的地方，
If you're on campus, like at a place like Harvard or Yale,

182
00:09:43,490 --> 00:09:46,930
哈佛大学和耶鲁大学都有自己的路由器，所以你的计算机在校园内时，
Harvard and Yale have their own routers, so your computer, when on campus,

183
00:09:46,929 --> 00:09:48,639
只需要把数据移交给它。
just knows to hand data off to that.

184
00:09:48,639 --> 00:09:50,234
如果你在家中使用-
And if you're at home using--

185
00:09:50,235 --> 00:09:53,110
或者如果你位于世界其他地方，例如星巴克或机场，
or if you're elsewhere in the world, like in Starbucks or an airport,

186
00:09:53,110 --> 00:09:54,710
同样地，那里也有路由器。
similarly are there routers there.

187
00:09:54,710 --> 00:09:57,910
因此，你的计算机通常知道最近的路由器在哪里，
So your computers generally know where the closest router is,

188
00:09:57,909 --> 00:10:00,679
然后路由器的生活目的是，再次弄清楚，
and then router's purpose in life is, again, to figure out,

189
00:10:00,679 --> 00:10:03,739
这个数据包是否向左，向右，向上，向下，可以这么说
does this packet go left, right, up, down, so to speak,

190
00:10:03,740 --> 00:10:07,120
为了使它更接近目的地。
in order to get it closer to its destination.

191
00:10:07,120 --> 00:10:09,740
但这有点像鸡和蛋的关系。
But this sort of is a chicken and an egg.

192
00:10:09,740 --> 00:10:12,490
如果我想向你发送一条信息，
If I want to send you a piece of information,

193
00:10:12,490 --> 00:10:16,270
我需要知道你的IP地址，但在我知道你在哪里之前，我并不真正知道
I need to know your IP address, but I don't really know your IP address

194
00:10:16,269 --> 00:10:18,319
你的IP地址。
until I know where you are.

195
00:10:18,320 --> 00:10:23,350
因此还有一个系统，你可能也见过它的缩写，
So there is this other system that you've probably seen an acronym for,

196
00:10:23,350 --> 00:10:26,540
称为DNS，域名系统。
too, called DNS, Domain Name System.

197
00:10:26,539 --> 00:10:30,129
这是一项部署在整个互联网上的技术，
And this is a technology that's deployed throughout the internet that's

198
00:10:30,129 --> 00:10:34,149
如今被Mac，PC和手机所支持，它只是将你和我通常所说的域名
supported by Macs, PCs, and phones these days, that just translates what

199
00:10:34,149 --> 00:10:38,409
或完全合格的域名，
you and I would typically call domain names, or fully qualified domain names,

200
00:10:38,409 --> 00:10:42,159
从那些类似英语或人类可读的字符翻译成
from those English-like or human-readable characters

201
00:10:42,159 --> 00:10:44,689
相应的IP地址，对吗？
to the corresponding IP addresses, right?

202
00:10:44,690 --> 00:10:48,280
公司不把他们的网站设置为数字IP
There's a reason that companies do not advertise their websites

203
00:10:48,279 --> 00:10:51,309
地址是有原因的。
as being a numeric IP address.

204
00:10:51,309 --> 00:10:52,939
我们谁也不会记得他们。
None of us would ever remember them.

205
00:10:52,940 --> 00:10:55,090
他们反而把它们宣传为Microsoft.com
They instead advertise them as Microsoft.com

206
00:10:55,090 --> 00:10:57,790
和Google.com以及NewYorkTimes.com。
and Google.com and NewYorkTimes.com.

207
00:10:57,789 --> 00:11:01,119
DNS是一种你的Mac和PC及电话支持的一项技术
DNS is a technology that your Mac and PC and phone

208
00:11:01,120 --> 00:11:03,760
知道当人类输入那些人类可读的地址，
support that know when a human types in one

209
00:11:03,759 --> 00:11:07,209
即域名，DNS将
of those human-readable addresses, a domain name, DNS

210
00:11:07,210 --> 00:11:10,580
这些名称转换为IP地址。
converts those names to the IP addresses.

211
00:11:10,580 --> 00:11:13,720
因此，从字面上看，如果你输入Harvard.edu或Yale.edu，
So literally, if you type in Harvard.edu or Yale.edu,

212
00:11:13,720 --> 00:11:16,330
在你的网络浏览器中，你的Mac或者PC
enter into your web browser, your Mac or PC

213
00:11:16,330 --> 00:11:22,600
会使用MAC或PC自带的软件
quickly looks up the IP address of that web server using the software that

214
00:11:22,600 --> 00:11:26,082
迅速查找该网络服务器的IP地址，
came with the Mac or PC and converts it to the corresponding IP address

215
00:11:26,081 --> 00:11:28,539
并将其转换为相应的IP地址，然后在信封外面虚拟地写上哈佛或耶鲁的
and then writes, virtually, on the outside of the envelope,

216
00:11:28,539 --> 00:11:31,119
网络服务器的IP地址，
the IP address of Harvard or Yale's web server

217
00:11:31,120 --> 00:11:33,170
然后将其发送到互联网上。
before sending it out on the internet.

218
00:11:33,169 --> 00:11:34,899
因此，这些只是服务。
So these are just services.

219
00:11:34,899 --> 00:11:39,699
DNS是你自己的ISP（Internet服务提供商）提供的服务。
DNS is a service that your own ISP, Internet Service Provider, provides.

220
00:11:39,700 --> 00:11:41,650
当你在校园里时，就是哈佛或耶鲁大学。
When you're on campus, it's Harvard or Yale.

221
00:11:41,649 --> 00:11:44,016
当你在星巴克时，可能就是星巴克。
When you're at Starbucks, it's probably Starbucks.

222
00:11:44,017 --> 00:11:45,850
当你在机场时，就是机场。
When you're in an airport, it's the airport.

223
00:11:45,850 --> 00:11:48,520
当你在家时，它就是你自己的互联网服务提供商
When you're at home, it's your own internet service provider

224
00:11:48,519 --> 00:11:50,929
如Verizon或Comcast之类的。
like Verizon or Comcast or the like.

225
00:11:50,929 --> 00:11:54,679
因此世界仅仅决定也使用该技术。
So the world just decided to use that technology as well.

226
00:11:54,679 --> 00:11:57,819
最后，还有一个首字母缩写词，TCP。
And lastly, one other acronym for now, TCP.

227
00:11:57,820 --> 00:12:02,380
TCP，即传输控制协议，是解决
TCP, or Transmission Control Protocol, is a solution

228
00:12:02,379 --> 00:12:05,139
几个问题的办法，其中之一是
to a couple of problems, one of which is that it

229
00:12:05,139 --> 00:12:10,269
对于互联网上的单个服务器来说它可以
tends to be pretty convenient for individual servers on the internet

230
00:12:10,269 --> 00:12:12,874
很方便地做很多事情，对吧？
to be able to do multiple things, right?

231
00:12:12,875 --> 00:12:15,250
您可以-互联网可以做很多事情。
And you can-- there's lots of things the internet can do.

232
00:12:15,250 --> 00:12:17,139
有些服务器可以托管电子邮件。
The servers can host email.

233
00:12:17,139 --> 00:12:18,219
他们可以托管网站。
They can host websites.

234
00:12:18,220 --> 00:12:20,650
他们可以主持聊天服务器，视频会议。
They can host chat servers, video conferencing.

235
00:12:20,649 --> 00:12:24,819
我的意思是，这已经是一个不断增长的软件功能清单，
I mean, that's already a growing list of features of software

236
00:12:24,820 --> 00:12:28,510
你可以在互联网上使用，如果一台服务器
that you can use on the internet, and it would be nice, financially,

237
00:12:28,509 --> 00:12:32,109
可以同时做很多事情，在财务上、管理上都是不错的。
administratively, if one server could do multiple things at once.

238
00:12:32,110 --> 00:12:33,460
确实，他们可以。
And indeed, they can.

239
00:12:33,460 --> 00:12:37,120
因此，当一台计算机收到这些虚拟信封中的一个，而这台计算机
So when a computer receives one of these virtual envelopes and that computer,

240
00:12:37,120 --> 00:12:41,710
这台服务器，恰好支持多种服务，电子邮件、网络、聊天
that server, happens to support multiple services, email, web, chat,

241
00:12:41,710 --> 00:12:43,150
视频等等
video, whatever--

242
00:12:43,149 --> 00:12:46,609
它会查看信封中的额外信息。
it looks at the envelope for one additional piece of information.

243
00:12:46,610 --> 00:12:51,250
而这一信息被称为端口号，即P-O-R-T号码，
And that piece of information is known as a port number, P-O-R-T number,

244
00:12:51,250 --> 00:12:56,040
这只是一些小的整数，世界已经决定代表特定的
which is just a small integer that the world has decided represents specific

245
00:12:56,039 --> 00:12:56,859
服务。
services.

246
00:12:56,860 --> 00:13:00,690
因此，例如，在TCP的世界中，
So for instance, in the world of TCP, the world

247
00:13:00,690 --> 00:13:04,020
全世界在几年前决定，我们的计算机应该在
decided years ago that our computers should virtually

248
00:13:04,019 --> 00:13:07,679
IP地址后面的这些信封上虚拟地写上数字80，
write the number 80 on these envelopes after the IP address

249
00:13:07,679 --> 00:13:11,459
以表示这是一个网页的请求，或者
to signify that this is a request for a web page, or 443

250
00:13:11,460 --> 00:13:15,510
在信封外面写上443，如果它是一个使用称为HTTPS的网页
on the outside of the envelope if it's a secure request for a page using

251
00:13:15,509 --> 00:13:16,799
的安全请求。
something called HTTPS.

252
00:13:16,799 --> 00:13:18,142
稍后会有更多关于这个问题的讲解。
More on that in a bit.

253
00:13:18,143 --> 00:13:19,560
还有其他数字。
And there's other numbers as well.

254
00:13:19,559 --> 00:13:21,129
电子邮件有其自己的唯一编号。
Email has its own unique numbers.

255
00:13:21,129 --> 00:13:22,517
Zoom具有其自己的唯一编号。
Zoom has its own unique numbers.

256
00:13:22,518 --> 00:13:24,810
你和我每天可能使用的所有这些其他互联网
And all of these other internet services that you and I

257
00:13:24,809 --> 00:13:27,629
服务都有自己独特的TCP端口，
might use every day have their own unique TCP

258
00:13:27,629 --> 00:13:32,219
以便公司和人们可以让一台服务器做多种事情，
ports so that companies and people can have one server doing multiple things,

259
00:13:32,220 --> 00:13:35,220
但在收到其中一个信封时，服务器可以查看它
but upon receipt of one of these envelopes, the server can look at it

260
00:13:35,220 --> 00:13:38,190
并意识到，哦，这是一封电子邮件请求。
and be-- and realize, oh, this is a request for email.

261
00:13:38,190 --> 00:13:39,690
这是对网页的请求。
This is a request for a web page.

262
00:13:39,690 --> 00:13:44,130
这是聊天请求，或其他所有请求。
This is a request for chat, or something else altogether.

----> TODO video end
263
00:13:44,129 --> 00:13:48,779
现在，值得注意的是，TCP也可以处理传递，
Now, notably, too, TCP also handles delivery,

264
00:13:48,779 --> 00:13:53,669
这是协议的一部分，还可以确保您在发送数据时
and it's the part of the protocol that also ensures that when you send data

265
00:13:53,669 --> 00:13:57,479
从A点到B点，如果有任何数据丢失，因为从字面上看
from point A to point B, if any data gets lost because literally

266
00:13:57,480 --> 00:14:02,370
其中一台路由器出了点问题，或者也许是因为-
something's wrong with one of those routers or because maybe the-- one

267
00:14:02,370 --> 00:14:05,850
这些作家中的不堪重负，一次收到的数据包比
of those writers got overwhelmed and just received more packets at once than

268
00:14:05,850 --> 00:14:06,550
它可以处理-
it can handle--

269
00:14:06,549 --> 00:14:08,549
可能会发生，因为这些计算机具有
that could happen, because these computers have,

270
00:14:08,549 --> 00:14:09,719
当然是有限的记忆。
of course, finite memory.

271
00:14:09,720 --> 00:14:12,480
如果您通过一个发送过多的数据，则互联网可能会变得很拥挤，
If you send too much data through one, the internet might get congested,

272
00:14:12,480 --> 00:14:15,522
您的视频可能会缓冲，并且可能会出现很多其他症状。
your video might buffer, and a whole bunch of other symptoms might arise.

273
00:14:15,522 --> 00:14:20,320
因此，TCP还可以根据需要处理重新传输数据的过程。
So TCP also handles the process of retransmitting data as needed.

274
00:14:20,320 --> 00:14:22,380
如果这些数据包中的任何一个在互联网上丢失，
If any of these packets is lost on the internet,

275
00:14:22,379 --> 00:14:25,919
实际上，TCP还会强迫您的Mac或PC，手机，
literally TCP will also compel your Mac or PC, your phone,

276
00:14:25,919 --> 00:14:29,129
重新发送该数据。
to resend that data as well.

277
00:14:29,129 --> 00:14:32,759
但是，互联网值得注意的是，数据并不一定
But what's notable about the internet is that data doesn't necessarily

278
00:14:32,759 --> 00:14:35,229
遵循一条特定的道路。
follow one specific path.

279
00:14:35,230 --> 00:14:38,940
实际上，如果您将多个数据包从一个人发送到另一个人，
In fact, if you send multiple packets from one person to another,

280
00:14:38,940 --> 00:14:43,330
这些数据包实际上每次可能采用不同的路由。
those packets might actually take different routes each time.

281
00:14:43,330 --> 00:14:45,900
可以说，这实际上是一个功能，而不是错误。
And this is actually a feature, not a bug, so to speak,

282
00:14:45,899 --> 00:14:48,449
因为您可以想象服务器变得拥塞
because you can imagine servers getting congested

283
00:14:48,450 --> 00:14:50,280
或遇到以下问题所需要的-
or problems needed to getting--

284
00:14:50,279 --> 00:14:52,089
需要绕线。
needing to be routed around.

285
00:14:52,090 --> 00:14:55,800
因此，TCP / IP还支持其他协议，
And so TCP/IP also supports, with other protocols,

286
00:14:55,799 --> 00:14:59,639
针对此问题的自适应解决方案，也许您的数据将
an adaptive solution to this problem, whereby maybe your data will

287
00:14:59,639 --> 00:15:00,629
有时候走这种方式。
go this way sometimes.

288
00:15:00,629 --> 00:15:02,337
也许其他时候会这样。
Maybe it'll go this way some other times.

289
00:15:02,337 --> 00:15:06,149
但这就是为什么有时您的互联网速度可变的原因，
But this is why, in part, that sometimes your internet speeds are variable,

290
00:15:06,149 --> 00:15:08,789
因为同样，因为它们之间的路由器可能不同
because, again, these routers in between might be different

291
00:15:08,789 --> 00:15:10,829
或可能有点过载。
or might be a little bit overloaded.

292
00:15:10,830 --> 00:15:13,200
所以我们认为我们会尝试通过征集来讲述这个故事
So we thought we'd try to tell this story by enlisting

293
00:15:13,200 --> 00:15:14,920
在一些CS50员工的帮助下。
the help of some of the CS50 staff.

294
00:15:14,919 --> 00:15:16,799
实际上，布莱恩，让我从你开始。
In fact, Brian, let me start with you.

295
00:15:16,799 --> 00:15:20,999
您介意在玩网络浏览器的那一刻扮演这个角色吗？
Would you mind taking on the role in just a moment of playing a web browser,

296
00:15:21,000 --> 00:15:24,479
某人自己的Mac，PC或电话，并要求我-
someone's own Mac or PC or phone, and request of me--

297
00:15:24,480 --> 00:15:28,165
也许有些愚蠢的事情，例如问我要一张猫的照片吗？
maybe something silly, like asking me for a picture of a cat?

298
00:15:28,164 --> 00:15:29,039
布莱恩·于：是的，当然。
BRIAN YU: Yeah, sure.

299
00:15:29,039 --> 00:15:32,249
因此，如果我想问您一些网络服务器，请问有猫的照片，
So if I want to ask you, some web server, for a picture of a cat,

300
00:15:32,250 --> 00:15:35,580
我需要向您发送消息，以便将该请求发送给您。
I need to send a message to you in order to send that request to you.

301
00:15:35,580 --> 00:15:39,120
所以我可以将我的要求写在一张纸上。
So I might write down my request on a sheet of paper.

302
00:15:39,120 --> 00:15:42,650
然后，我将该请求放入信封中。
And I'll just put that request inside of an envelope.

303
00:15:42,649 --> 00:15:45,649
然后我必须在信封上贴上我们所有的信息
And then I would have to label that envelope with all the information we

304
00:15:45,649 --> 00:15:50,789
谈到（尤其是与您的IP地址）我可能会查询DNS。
talked about, in particular with your IP address, that I might look up with DNS.

305
00:15:50,789 --> 00:15:52,399
然后我可以把那个信封寄出去。
And then I can send that envelope off.

306
00:15:52,399 --> 00:15:52,819
DAVID J. MALAN：好的。
DAVID J. MALAN: All right.

307
00:15:52,820 --> 00:15:54,350
我认为我们在这里需要一点帮助，
And I think we need a little bit of help here,

308
00:15:54,350 --> 00:15:56,340
因为我和布莱恩在不同的地方。
because Brian and I are in different places.

309
00:15:56,340 --> 00:16:00,420
因此，他和我不能只是将信封从另一个移交给另一个。
And so he and I can't just hand the envelope from one to the other.

310
00:16:00,419 --> 00:16:03,349
因此，让我们继续在这里争取CS50员工的帮助，
So let's go ahead and enlist the help of CS50 staff here,

311
00:16:03,350 --> 00:16:05,540
还有，谁在Zoom上看到了这里的声音，
also, who have chimed in here on Zoom and see

312
00:16:05,539 --> 00:16:09,419
如果我们无法从Brian发出此请求，
if we can't route this request from Brian,

313
00:16:09,419 --> 00:16:11,769
谁在扮演网络浏览器的角色，对我来说，
who's playing the role of a web browser, to me,

314
00:16:11,769 --> 00:16:13,999
谁将依次扮演Web服务器的角色
who will play the role of a web server, in order

315
00:16:14,000 --> 00:16:16,529
收到这个关于猫的请求。
to receive this request for a cat.

316
00:16:16,529 --> 00:16:17,151
所以我们开始。
So here we go.

317
00:16:17,152 --> 00:16:18,860
让我们看看是否可以在这里招募团队。
Let's see if we can enlist the team here.

318
00:16:18,860 --> 00:16:22,318
[音乐播放]
[MUSIC PLAYING]

319
00:16:39,149 --> 00:16:39,799
好的。
All right.

320
00:16:39,799 --> 00:16:42,382
好吧，谢谢菲利斯把这个信封递给我。
Well, thank you to Phyllis for having handed me this envelope.

321
00:16:42,383 --> 00:16:44,990
现在，我们有了Brian寄给我的请求。
And what we have now is the request that Brian sent me.

322
00:16:44,990 --> 00:16:46,740
我要去打开它，的确，
I'm going to go open it up, and I, indeed,

323
00:16:46,740 --> 00:16:49,470
看到里面有一条消息，要求提供猫的照片，其中
see a message inside requesting a picture of a cat, which

324
00:16:49,470 --> 00:16:50,920
在互联网上并不少见。
is not uncommon on the internet.

325
00:16:50,919 --> 00:16:53,069
所以现在如果我是网络服务器，我实际上
So now if I'm the web server and I actually

326
00:16:53,070 --> 00:16:55,620
有猫的图片档案，我要去
have an archive of pictures of cats, I'm going

327
00:16:55,620 --> 00:16:58,680
继续用其中一只猫回应Brian。
to go ahead and respond to Brian with one of those cats.

328
00:16:58,679 --> 00:17:01,953
但是要这样做，我将继续前进，并且必须查看我的硬盘驱动器
But to do so, I'm going to go ahead and have to look up on my hard drive

329
00:17:01,953 --> 00:17:04,078
或在计算机中某处的猫的照片。
or somewhere in the computer that picture of a cat.

330
00:17:04,078 --> 00:17:07,799
这里是一只，所以我要去给Brian寄一只非常快乐的猫。
And here's one here, so I'm going to go and send Brian this very happy cat.

331
00:17:07,799 --> 00:17:09,809
我有一些自己的信封，而我
I've got some envelopes of my own, and I'm

332
00:17:09,809 --> 00:17:14,818
继续在信封中间写下Brian的IP地址，
to go ahead and write Brian's IP address on the middle of this envelope,

333
00:17:14,818 --> 00:17:17,649
我要把我的IP地址放在这个信封的左上角，
I'm going to put my IP address on the top-left of this envelope,

334
00:17:17,650 --> 00:17:19,650
然后可能还有其他识别信息
and then maybe any other identifying information

335
00:17:19,650 --> 00:17:22,650
我需要，然后我继续将猫放入信封中。
I need, and then I'll go ahead and put the cat into the envelope.

336
00:17:22,650 --> 00:17:25,480
但是，当然，这确实不合适。
But, of course, this isn't really going to fit.

337
00:17:25,480 --> 00:17:27,420
这实际上是很常见的情况。
And this is actually quite commonly the case.

338
00:17:27,420 --> 00:17:30,940
每当计算机尝试传输大量数据时，
Any time a computer is trying to transmit a decent amount of data,

339
00:17:30,940 --> 00:17:34,320
无论是大图还是更大的视频文件，
whether it's a big image or maybe it's an even bigger video file,

340
00:17:34,319 --> 00:17:36,839
为了公平起见，它倾向于对计算机有利
for equity's sake, it tends to be good for computers

341
00:17:36,839 --> 00:17:40,009
将大数据包切成多个较小的数据包。
to chop up large packets into multiple smaller packets.

342
00:17:40,009 --> 00:17:41,759
实际上，您可能已经听说过
In fact, you might have heard of something

343
00:17:41,759 --> 00:17:44,399
称为“网络中立性”或已知的更多技术性话题
called Net Neutrality or a more technical topic known

344
00:17:44,400 --> 00:17:45,540
作为服务质量。
as Quality of Service.

345
00:17:45,539 --> 00:17:49,349
简而言之，“网络中立性”可以说出什么样的决定
In a nutshell, Net Neutrality speaks to just what kinds of decisions

346
00:17:49,349 --> 00:17:52,079
在确定数据优先级时，计算机应该做出决定。
computers should make when it comes to prioritizing data.

347
00:17:52,079 --> 00:17:55,139
从历史上看，一个共同的约定是，我们所有人
And a common convention is, historically, that all of us

348
00:17:55,140 --> 00:17:58,680
应该将我们的大包切成小包，将它们发送出去，
should chop up our large packets into smaller packets, send them out,

349
00:17:58,680 --> 00:18:01,410
这样他们就可以与其他人的数据包混在一起
so they can get then commingled with other people's packets

350
00:18:01,410 --> 00:18:04,020
我们都以相同的速度到达目的地。
and we all reach our destinations at the same rate.

351
00:18:04,019 --> 00:18:07,379
顺便说一句，净中立只不过是一种利益
Net Neutrality, as an aside, is all about an interest

352
00:18:07,380 --> 00:18:12,090
在某些方面，他们可能会优先考虑某些公司提供的数据，
by some parties in prioritizing maybe the data from certain companies that

353
00:18:12,089 --> 00:18:13,149
多付一点钱。
pay a bit more.

354
00:18:13,150 --> 00:18:16,960
因此，这确实表明仅使用或滥用了这些基本原语
And so this really speaks to just use or maybe abuse of these basic primitives

355
00:18:16,960 --> 00:18:17,460
这里。
here.

356
00:18:17,460 --> 00:18:19,597
但这对我来说要塞满这个是不公平的
But this is not fair for me to try to cram this one

357
00:18:19,596 --> 00:18:21,929
大图放入一个信封中，所以我要从字面上去
big image into an envelope, so I'm going to literally go

358
00:18:21,930 --> 00:18:27,350
向前，将图片撕成两半，基本上将包切成两半。
ahead and tear the picture in half, essentially chop the packet into two.

359
00:18:27,349 --> 00:18:29,879
现在让我继续，把它放进信封里，
Let me go ahead now and put this into the envelope,

360
00:18:29,880 --> 00:18:31,780
因为它会更容易安装。
because it'll fit a little more easily.

361
00:18:31,779 --> 00:18:34,139
所以我为布莱恩（Brian）提供了一包信息。
So I've got one packet of information for Brian.

362
00:18:34,140 --> 00:18:37,290
我现在有-让我们看一下-Brian的另一包信息
I've got now-- let's see-- one more packet of information for Brian

363
00:18:37,289 --> 00:18:40,259
我将把这张图片的另一半放进去。
that I'll fit the other half of this image into.

364
00:18:40,259 --> 00:18:42,629
但是我认为我将不得不做其他事情。
But I think I'm going to have to do something else.

365
00:18:42,630 --> 00:18:46,500
在我将其发布到互联网上并将其交还给菲利斯之前
Before I drop this out on the internet and hand it back to Phyllis

366
00:18:46,500 --> 00:18:51,089
发送回Brian，我可能需要一些其他信息
to send out back to Brian, I might need some additional information

367
00:18:51,089 --> 00:18:52,769
在这些信封上。
on these envelopes.

368
00:18:52,769 --> 00:18:55,739
我已经在“收件人”字段中获得了Brian的IP。
I've already got Brian's IP in the To field.

369
00:18:55,740 --> 00:18:59,400
我在发件人字段中有我的IP地址。
I've got my IP address in the From field.

370
00:18:59,400 --> 00:19:01,950
我还记下了我的端口号
I've also jotted down the port number that I

371
00:19:01,950 --> 00:19:04,800
应该用于Brian和我自己的返回端口号。
should use for Brian and my own return port number.

372
00:19:04,799 --> 00:19:07,829
这些通常由我的Mac或PC决定。
And those are decided typically by my Mac or PC.

373
00:19:07,829 --> 00:19:10,559
但是我觉得我可能需要更多信息。
But I feel like I probably need a little more information.

374
00:19:10,559 --> 00:19:14,459
我应该在这个信封的外面写些什么
What more should I virtually write on the outside of this envelope

375
00:19:14,460 --> 00:19:20,430
确保按预期接收数据？
to make sure that the data is received as intended?

376
00:19:20,430 --> 00:19:21,750
有直觉吗？
Any intuition?

377
00:19:21,750 --> 00:19:27,339
这里假定不熟悉TCP / IP。
No familiarity with TCP/IP assumed here.

378
00:19:27,339 --> 00:19:30,496
但是，如果Brian现在要得到两个信封，还有什么其他数据
But if Brian's about to now get two envelopes, what additional data

379
00:19:30,497 --> 00:19:32,080
我应该给他吗？ [？格雷格？ ？]
should I perhaps give him? [? Greg? ?]

380
00:19:32,079 --> 00:19:35,839
听众：Brian可能会将照片的顶部与底部混淆，
AUDIENCE: Brian may confuse the top of the photo with the bottom,

381
00:19:35,839 --> 00:19:39,124
所以您需要以某种方式告诉Brian这是顶峰，这是底峰，
so you need somehow to tell Brian that this is a top and this is a bottom,

382
00:19:39,125 --> 00:19:41,729
一个链接可能会融合它们。
a link maybe to converge them.

383
00:19:41,730 --> 00:19:42,730
DAVID J. MALAN：完美。
DAVID J. MALAN: Perfect.

384
00:19:42,730 --> 00:19:44,860
因此，我们需要确保Brian知道订单
And so we need to make sure Brian knows the order

385
00:19:44,859 --> 00:19:47,526
在其中应该重新组装这些小包，以便他确实
in which these packets should be reassembled so that he, indeed,

386
00:19:47,527 --> 00:19:50,430
例如，以正确的方式而不是错误的方式让猫得到了帮助。
gets the cat the right way and not the wrong way, for instance.

387
00:19:50,430 --> 00:19:52,180
所以，可能我需要补充一下
So what probably suffices is for me to add

388
00:19:52,180 --> 00:19:55,030
我们将这些包中的每个称为序列号，
what we'll call a sequence number to each of these packets, which

389
00:19:55,029 --> 00:19:58,329
本质上是一个数字，您可以将其视为两个中的一个，
is essentially a number which you can think of as one of two,

390
00:19:58,329 --> 00:20:01,779
另一个是两个，所以Brian知道什么时候-
and on the other one, two of two, so that Brian knows when--

391
00:20:01,779 --> 00:20:04,776
重新组装包装的顺序，但更重要的是，
what order to reassemble the packets, but also more importantly,

392
00:20:04,777 --> 00:20:06,610
如果一个包或两个包，
in case one of the packets, or both of them,

393
00:20:06,609 --> 00:20:10,689
途中被其中一台路由器迷失或掉落，
gets lost or somehow dropped by one of the routers along the way,

394
00:20:10,690 --> 00:20:12,490
这些数据包上有足够的信息
there's enough information on those packets

395
00:20:12,490 --> 00:20:18,620
使我和他能够恢复原状并根据需要重新发送数据包一和/或二。
to enable me and him to recover that and resend packet one and/or two as needed.

396
00:20:18,619 --> 00:20:19,869
因此，让我们继续执行此操作。
So let's go ahead and do this.

397
00:20:19,869 --> 00:20:23,036
让我继续前进，并从菲利斯这里开始，争取团队的帮助。
Let me go ahead and enlist the help of the team, starting with Phyllis here.

398
00:20:23,037 --> 00:20:25,330
还有菲利斯，如果您想在这里继续-
And Phyllis, if you'd like to go ahead here and--

399
00:20:25,329 --> 00:20:39,659
[音乐播放]
[MUSIC PLAYING]

400
00:20:39,660 --> 00:20:40,170
好的。
All right.

401
00:20:40,170 --> 00:20:41,962
当然，这只是问题的一半。
Of course, that's only half of the problem.

402
00:20:41,961 --> 00:20:44,474
所以我现在要继续发送，最后发送第二个数据包。
So I'm to go ahead now and send the second packet, finally.

403
00:20:44,474 --> 00:20:47,099
在理想的世界中，我实际上会并行发送这些消息，
In an ideal world, I would actually send these out in parallel,

404
00:20:47,099 --> 00:20:50,016
但是没有理由他们仍然不能走不同的道路。
but there's no reason that they couldn't still follow different paths.

405
00:20:50,017 --> 00:20:52,590
实际上，我担心这可能需要更多时间。
In fact, this one I worry might take a little bit more time.

406
00:20:52,589 --> 00:20:53,129
让我们来看看。
Let's see.

407
00:20:53,130 --> 00:20:53,755
[音乐播放]
[MUSIC PLAYING]

408
00:20:53,755 --> 00:20:57,558
[意大利文演唱]
[SINGING IN ITALIAN]

409
00:21:22,190 --> 00:21:22,850
惊人的。
Amazing.

410
00:21:22,849 --> 00:21:25,919
布莱恩，您要继续打开信封并重新组装它们吗？
Brian, do you want to go ahead and open up your envelopes and reassemble them?

411
00:21:25,920 --> 00:21:26,503
布莱恩·于：是的。
BRIAN YU: Yes.

412
00:21:26,502 --> 00:21:27,559
我有两个信封。
I have two envelopes.

413
00:21:27,559 --> 00:21:30,649
我想我会打开一个先说两个之一的那个，
I guess I'll open up the one that says one of two first,

414
00:21:30,650 --> 00:21:33,530
它是猫的上半部分。
and it is the top half of the cat.

415
00:21:33,529 --> 00:21:37,189
然后我打开另一个信封，这是两个信封中的两个。
And then I'll open up the other envelope, which is two of two.

416
00:21:37,190 --> 00:21:40,250
那就是猫的下半部分。
And that is the bottom half of the cat.

417
00:21:40,250 --> 00:21:43,427
因此，总的来说，我想我现在已经有了完整的猫。
And so together, I think I now have the full cat.

418
00:21:43,426 --> 00:21:44,509
DAVID J. MALAN：太好了。
DAVID J. MALAN: Wonderful.

419
00:21:44,509 --> 00:21:46,467
好，谢谢Brian和整个团队。
Well, thank you to Brian and to the whole team.

420
00:21:46,468 --> 00:21:48,830
回顾一下，IP是这个协议，
And so to recap, IP is this protocol, the set

421
00:21:48,829 --> 00:21:52,099
规范了这些信封上所写内容的规范。
of conventions that standardizes what gets written on these envelopes.

422
00:21:52,099 --> 00:21:56,269
这是计算机以某种编号彼此唯一地寻址的方式。
It's how computers uniquely address each other with numbers of some sort.

423
00:21:56,269 --> 00:21:59,299
TCP控制着一些不同的事物，但是其中之一
TCP governs a few different things, but among them

424
00:21:59,299 --> 00:22:04,159
服务的编号是多少，例如80个不安全的网络流量
is this numbering of services, like 80 for insecure web traffic

425
00:22:04,160 --> 00:22:07,100
或443，以确保网络流量安全，从而确保
or 443 for secure web traffic that ensures

426
00:22:07,099 --> 00:22:09,319
数据从一个点到另一个
that the data gets from one point to another

427
00:22:09,319 --> 00:22:13,369
并由在该特定服务器上运行的正确应用程序处理。
and is handled by the right application running on that particular server.

428
00:22:13,369 --> 00:22:15,679
那么，DNS是我们开始使用的。
DNS, then, is what we use to begin with.

429
00:22:15,680 --> 00:22:18,052
如果Brian拥有自己的域名，我的计算机
If Brian had his own domain name, my computer

430
00:22:18,051 --> 00:22:19,759
本来必须查找他的IP地址，
would have had to look up his IP address,

431
00:22:19,759 --> 00:22:21,919
或者相反，他本来必须仰望我的，
or conversely, he would have had to look up mine,

432
00:22:21,920 --> 00:22:24,110
这样我们人类，实际上是在使用
so that we humans, who are actually using

433
00:22:24,109 --> 00:22:26,359
以人类友好的方式上网，不要
the internet in a human-friendly way, don't

434
00:22:26,359 --> 00:22:30,439
必须记住IP地址，同样，这只是数字，但是
have to remember IP addresses, which, again, are just numbers, but instead

435
00:22:30,440 --> 00:22:34,890
可以记住诸如Harvard.edu，Yale.edu之类的东西。
can remember things like Harvard.edu, Yale.edu, and the like.

436
00:22:34,890 --> 00:22:38,330
因此，互联网就是基本的基础设施，
So that, then, is the internet, the fundamental infrastructure,

437
00:22:38,329 --> 00:22:42,439
现在我们可以从其上的管道获取A点的数据
the plumbing on top of which we now have the ability to get data from point A

438
00:22:42,440 --> 00:22:45,500
指向B。从某种意义上说，如果您对此感到满意，
to point B. And so in some sense, if you're comfortable with that,

439
00:22:45,500 --> 00:22:48,259
我们现在可以将互联网抽象出来
we can now abstract the internet away and just

440
00:22:48,259 --> 00:22:52,739
可以认为它是一种将数据从一个点传输到另一个点的机制。
think of it as being a mechanism that gets data from one point to another.

441
00:22:52,740 --> 00:22:56,330
只要我们现在可以假设我们拥有这项基本的公共服务
And so long as we can now assume that we have this fundamental public service

442
00:22:56,329 --> 00:22:58,289
从一点到另一点获取数据，
that gets data from one point to another,

443
00:22:58,289 --> 00:23:00,949
现在我们可以在此基础上开始构建
now we can start to build on top of it in terms

444
00:23:00,950 --> 00:23:05,780
软件和其他语言，并将其实际用于有趣的事情。
of software and other languages and actually use it for interesting things.

445
00:23:05,779 --> 00:23:10,219
但是在我们继续努力做这些事情之前，任何疑问或困惑
But before we forge ahead to do those things, any questions or confusion

446
00:23:10,220 --> 00:23:16,100
我们可以通过TCP或IP或DNS或Internet或路由器或任何其他方式进行清理
we can clear up on TCP or IP or DNS or the internet or routers or any

447
00:23:16,099 --> 00:23:19,599
这些其他新术语中？
of these other new terms?

448
00:23:19,599 --> 00:23:21,099
[？格雷格，？]回到你身边。
[? Greg, ?] back to you.

449
00:23:21,099 --> 00:23:22,609
听众：我有一个问题。
AUDIENCE: I have a question.

450
00:23:22,609 --> 00:23:26,919
那么砍掉信息会不会造成任何问题呢？
So does chopping the information create any problem?

451
00:23:26,920 --> 00:23:29,950
因为，我不知道，一条信息
Because, I don't know, a piece of information

452
00:23:29,950 --> 00:23:33,280
可以去那里两秒钟，再去那里三秒钟。
can go there for two seconds and another one for three seconds.

453
00:23:33,279 --> 00:23:35,127
会给用户带来任何问题吗？
Does it create any problem for the user?

454
00:23:35,127 --> 00:23:36,669
DAVID J. MALAN：很好的问题。
DAVID J. MALAN: Really good question.

455
00:23:36,670 --> 00:23:39,050
这些封包可能需要不同的时间，
These packets can take different durations of time,

456
00:23:39,049 --> 00:23:41,859
即使我确实规定他们应该交给菲利斯的手
and even though I did stipulate that they should go out to Phyllis's hands

457
00:23:41,859 --> 00:23:43,479
大约在同一时间，即使她需要
roughly at the same time, even if she needs

458
00:23:43,480 --> 00:23:45,250
将它们传递到两个不同的方向，
to pass them in two different directions,

459
00:23:45,250 --> 00:23:47,080
绝对会有延迟。
there can absolutely be delays.

460
00:23:47,079 --> 00:23:49,749
实际上，通常您和我都是人类
And in fact, typically, you and I as humans

461
00:23:49,750 --> 00:23:54,190
如果数据包花费的时间超过200毫秒，则将开始注意到延迟
will start to notice delays if packets take more than 200 milliseconds

462
00:23:54,190 --> 00:23:56,830
从A点到达B点。之后，
to get from point A to point B. After that,

463
00:23:56,829 --> 00:23:59,072
看起来有点延迟，当然
it looks like there's a bit of delay, and certainly

464
00:23:59,073 --> 00:24:01,990
如果是两三秒，您会真正注意到
if it's two or three seconds, you'll really notice that at that point,

465
00:24:01,990 --> 00:24:03,700
不一定是问题
it's not necessarily a problem--

466
00:24:03,700 --> 00:24:06,760
布莱恩希望能耐心等待下半场
Brian hopefully would patiently wait for the second half

467
00:24:06,759 --> 00:24:10,509
如果猫只收到一个小包，则需要一定时间。
of the cat for some amount of time if he only received one packet.

468
00:24:10,509 --> 00:24:13,464
最终，他作为人类，然后又作为计算机，
Eventually, he as a human, and in turn, he as a computer,

469
00:24:13,464 --> 00:24:15,339
可能会有点焦虑，并会
would probably get a little anxious and would

470
00:24:15,339 --> 00:24:20,049
请我重新发送一个5秒钟后仍未到达的数据包，10
ask me to retransmit a packet if it doesn't arrive after 5 seconds, 10

471
00:24:20,049 --> 00:24:21,279
秒30秒
seconds, 30 seconds.

472
00:24:21,279 --> 00:24:23,259
这些超时通常可以指定
These time outs can typically be specified

473
00:24:23,259 --> 00:24:26,649
通过该人的计算机上运行的软件，但在那时，
by the software running on the person's computer, but at that point,

474
00:24:26,650 --> 00:24:29,740
您和我一定会注意到其中的区别。
you and I would certainly notice the difference.

475
00:24:29,740 --> 00:24:30,250
好的。
All right.

476
00:24:30,250 --> 00:24:33,970
因此，如果我们现在从根本上具有从A点获取数据的能力
So if we now have this ability fundamentally to get data from point A

477
00:24:33,970 --> 00:24:38,230
指向B点，Brian寄给我的信封里面实际上是什么，
to point B, what is actually inside of the envelope that Brian sent me,

478
00:24:38,230 --> 00:24:43,450
除了猫的照片，我寄给他的信封里面还有什么？
and what was inside the envelope I sent him besides just the picture of a cat?

479
00:24:43,450 --> 00:24:47,230
好吧，为此，我们过渡到另一种语言或另一种协议，
Well, for that, we transition to another language or another protocol, rather,

480
00:24:47,230 --> 00:24:51,280
称为HTTP，超文本传输协议。
called HTTP, HyperText Transfer Protocol.

481
00:24:51,279 --> 00:24:55,239
这是您可能已经看过或键入过很多次的缩写词。
And this is an acronym you've probably seen or typed bunches of times.

482
00:24:55,240 --> 00:24:58,330
当然，这是出现在URL开头的统一资源
It's, of course, what appears in the beginning of URLs, Uniform Resource

483
00:24:58,329 --> 00:25:04,149
定位器，这是您和我用来实际找出的工具
Locators, which are the tools that you and I use to actually figure out

484
00:25:04,150 --> 00:25:08,960
我们实际上想向互联网请求什么网站或什么图像。
what websites or what image we actually want to request of the internet.

485
00:25:08,960 --> 00:25:14,080
因此，网络，即万维网，实际上只是众多服务之一
So the web, the world-wide web, is really just one of many services

486
00:25:14,079 --> 00:25:16,089
在互联网上运行。
that run on top of the internet.

487
00:25:16,089 --> 00:25:17,529
网络提供了我们的网页。
The web gives us web pages.

488
00:25:17,529 --> 00:25:19,779
缩放为我们提供了视频会议。
Zoom gives us video conferencing.

489
00:25:19,779 --> 00:25:22,759
其他工具为我们提供了文字聊天，语音聊天等功能。
Other tools give us text chatting, voice chatting, and the like.

490
00:25:22,759 --> 00:25:25,839
因此，网络实际上只是互联网上的一个应用程序。
So the web is really just an application on top of the internet.

491
00:25:25,839 --> 00:25:28,899
它是最流行的应用程序，
It's hands-down the most popular application,

492
00:25:28,900 --> 00:25:30,760
但这实际上只是一个应用程序。
but it really is just an application.

493
00:25:30,759 --> 00:25:34,149
这是使用底层管道的服务。
It's a service that's using that underlying plumbing.

494
00:25:34,150 --> 00:25:38,800
因此，HTTP是一种真正掌控着协议的协议
So HTTP is a different protocol that really governs

495
00:25:38,799 --> 00:25:40,929
这些信封里面有什么。
what goes inside of these envelopes.

496
00:25:40,930 --> 00:25:43,990
TCP / IP控制超出范围的内容。
TCP/IP governs what goes outside the envelopes.

497
00:25:43,990 --> 00:25:47,320
假设我们使用HTTP来控制信封内部的内容
HTTP governs what goes inside of the envelopes, assuming we

498
00:25:47,319 --> 00:25:50,439
在谈论网络浏览器和网络服务器，而不是视频会议
are talking about web browsers and web servers and not video conferencing

499
00:25:50,440 --> 00:25:51,710
或者是其他东西。
or something else.

500
00:25:51,710 --> 00:25:56,620
因此，对于HTTP，它带有一些不同的命令，或者功能非常有限
So with HTTP, it comes with a few different commands, or a pretty limited

501
00:25:56,619 --> 00:26:00,099
词汇，其中两个是最重要的术语，
vocabulary, two of which are the most important terms to know,

502
00:26:00,099 --> 00:26:01,389
这是GET和POST。
which is GET and POST.

503
00:26:01,390 --> 00:26:03,620
这些是英语动词，它们
These are literally English verbs, and they

504
00:26:03,619 --> 00:26:07,029
是HTTP支持的两个命令（如果可以的话）。
are two of the commands, if you will, that HTTP supports.

505
00:26:07,029 --> 00:26:10,449
Brian可能在那个信封里做了什么
And what Brian probably did inside of that envelope is

506
00:26:10,450 --> 00:26:14,890
他可能从字面上写下了GET cat之类的东西。
he probably literally wrote down GET cat or something like that.

507
00:26:14,890 --> 00:26:17,680
POST用于不久之后将要使用的其他应用程序，
POST is used for other applications that we'll get to before long,

508
00:26:17,680 --> 00:26:19,430
但是“ GET”是有效的词。
but "GET" is the operative word.

509
00:26:19,430 --> 00:26:22,780
从字面上看，这就是浏览器将如何请求或获取信息的方式
And it literally is how a browser will request or get information

510
00:26:22,779 --> 00:26:23,529
从服务器。
from a server.

511
00:26:23,529 --> 00:26:25,659
所以Brian在信封的某个地方寄给我
So somewhere in the envelope Brian sent me

512
00:26:25,660 --> 00:26:30,670
是英文单词“ GET”，可能后面跟着cat.jpg之类的东西
was the English word "GET," probably followed by cat.jpg or something

513
00:26:30,670 --> 00:26:31,300
像那样。
like that.

514
00:26:31,299 --> 00:26:34,299
可能还有更多信息，但是HTTP的本质
There's probably a bit more information, but the essence of HTTP

515
00:26:34,299 --> 00:26:37,419
意味着，如果Brian想要我的东西，他就是浏览器
means that if Brian wants something from me and he's the browser

516
00:26:37,420 --> 00:26:42,070
我是服务器，他应该以标准动词开始他的请求
and I'm the server, he should start his request with the standardized verb

517
00:26:42,069 --> 00:26:45,319
“ GET”后跟他要获取的文件名。
"GET" followed by the name of the file that he wants to get.

518
00:26:45,319 --> 00:26:48,429
因此，现在让我们将其放入更熟悉的URL之一的上下文中。
So let's put this now into the context of one of the more familiar URLs.

519
00:26:48,430 --> 00:26:51,712
因此，例如，这是URL的规范格式。
So here's, for instance, a canonical format of a URL.

520
00:26:51,711 --> 00:26:53,419
让我们重点介绍一下它的一些功能。
And let's highlight a few features of it.

521
00:26:53,420 --> 00:26:55,450
首先，HTTPS。
So first, HTTPS.

522
00:26:55,450 --> 00:26:57,460
您越来越多地在网络上看到它。
Increasingly, you're seeing this on the web.

523
00:26:57,460 --> 00:27:00,040
即使您没有输入，它也经常会自动出现
Even if you don't type it, it's often automatically appearing

524
00:27:00,039 --> 00:27:02,529
在浏览器的地址栏中，因为浏览器或网络
in the address bar of your browser, because browsers or web

525
00:27:02,529 --> 00:27:04,509
服务器正在为您添加它。
servers are adding it for you.

526
00:27:04,509 --> 00:27:08,259
S仅指HTTP的安全版本。
The S just refers to a secure version of HTTP.

527
00:27:08,259 --> 00:27:11,829
我们也将在下周及以后再回到安全性这一主题。
And we'll come back to this topic of security next week and beyond, too.

528
00:27:11,829 --> 00:27:17,619
但是在HTTP上下文中，这仅意味着我之间的数据
But in the context of HTTP, this just means that the data between me

529
00:27:17,619 --> 00:27:20,799
布赖恩（反之亦然）则以某种方式进行了加密。
and Brian and vice versa is encrypted somehow.

530
00:27:20,799 --> 00:27:23,349
比凯撒（Caesar）或其他密码更好。
It's way better than Caesar or other ciphers.

531
00:27:23,349 --> 00:27:25,237
它在数学上更加复杂。
It's way more mathematically sophisticated.

532
00:27:25,238 --> 00:27:27,280
但这实际上只是扰乱信息
But it essentially just scrambles the information

533
00:27:27,279 --> 00:27:30,669
以便Brian知道他要的是猫，我是网络服务器，
so that Brian knows he's asking for a cat, I, the web server,

534
00:27:30,670 --> 00:27:34,450
知道他要一只猫，但是你们中的任何一个或其他特遣队
knows he's asking for a cat, but if any of you or any of the TFs

535
00:27:34,450 --> 00:27:37,960
谁在恶意或无聊地扮演路由器的角色
who were playing the role of routers maliciously or nosily

536
00:27:37,960 --> 00:27:41,613
打开信封，而不是交给下一个工作人员，
opened the envelope instead of handing it off to the next staff member,

537
00:27:41,613 --> 00:27:43,780
他们不明白信封里面的东西，
they wouldn't understand what's inside the envelope,

538
00:27:43,779 --> 00:27:47,199
因为它看起来就像凯撒和其他密码一样，
because it would look like, similar to Caesar and other ciphers,

539
00:27:47,200 --> 00:27:48,990
有点像随机的零和一。
sort of like random zeros and ones.

540
00:27:48,990 --> 00:27:53,530
因此，HTTPS只是意味着这些数据包的内容已加密。
So HTTPS just means that the contents of these packets are encrypted.

541
00:27:53,529 --> 00:27:55,449
这些网址还有什么其他显着之处？
What else is salient about these URLs?

542
00:27:55,450 --> 00:27:57,250
好吧，这就是我们所说的域名。
Well, here's what we call a domain name.

543
00:27:57,250 --> 00:27:59,560
大多数人都知道域名是赔率，
Odds are most everyone knows what a domain name is,

544
00:27:59,559 --> 00:28:02,619
通常是两个词组，有些则是其他词组。
and it's typically two phrases, something dot something else.

545
00:28:02,619 --> 00:28:04,839
当然example.com是一个例子
And example.com is, of course, an example

546
00:28:04,839 --> 00:28:09,009
在这里，但如今，哈佛大学，耶鲁大学和数百万其他人都在这里。
here, but Harvard.edu, Yale.edu, and millions of others these days.

547
00:28:09,009 --> 00:28:11,259
到最后，我们通常会这样做
To the end of that, though, is what we would typically

548
00:28:11,259 --> 00:28:15,159
称为顶级域名或TLD。
call the top-level domain or TLD.

549
00:28:15,160 --> 00:28:18,880
从历史上看，这只是网站的类型，
This is just the type of website, historically,

550
00:28:18,880 --> 00:28:20,050
您正在尝试访问的地方。
that you're trying to visit.

551
00:28:20,049 --> 00:28:21,144
Dot com意味着商业。
Dot com meant commercial.

552
00:28:21,144 --> 00:28:22,799
点教育意味着教育。
Dot edu meant education.

553
00:28:22,799 --> 00:28:24,969
点网意味着某种网络。
Dot net meant some kind of network.

554
00:28:24,970 --> 00:28:26,710
Dot org是一个组织。
Dot org is an organization.

555
00:28:26,710 --> 00:28:28,400
事实已不再如此。
That's no longer really the case.

556
00:28:28,400 --> 00:28:32,050
实际上，有数百甚至数千个顶级域名
In fact, there's hundreds, perhaps even thousands, of top-level domains

557
00:28:32,049 --> 00:28:36,189
如今，您可以在其中购买域名
nowadays that you can buy domains in that

558
00:28:36,190 --> 00:28:39,760
有时尝试对事物进行分类，但是没有硬性规定
try to categorize things sometimes, but there's no hard rules

559
00:28:39,759 --> 00:28:42,669
这些顶级域名中的大多数。
around most of those top-level domains.

560
00:28:42,670 --> 00:28:45,905
您必须是经认可的教育机构才能使用dot edu。
You have to be an accredited educational institution to use dot edu.

561
00:28:45,904 --> 00:28:49,479
您必须在美军中使用点密尔。
You have to be in the US military to use dot mil.

562
00:28:49,480 --> 00:28:52,240
在其他国家也有类似的限制
There are similar constraints in other countries

563
00:28:52,240 --> 00:28:55,420
他们有自己的两个字符的国家/地区代码顶级域名（TLD），
who have their own two-character country code TLDs,

564
00:28:55,420 --> 00:29:00,250
例如英国的dot UK，日本的dot JP等。
like dot UK for the United Kingdom, dot JP for Japan, and many others.

565
00:29:00,250 --> 00:29:02,979
每个国家都可以视需要自由进行标准化。
Each country is free to standardize as it sees fit.

566
00:29:02,980 --> 00:29:06,550
但是你和我可以买一个.com，一个.org，一个.net，一个。
But you and I can buy a dot com, a dot org, a dot net, a dot

567
00:29:06,549 --> 00:29:09,109
我们，一个点-还有很多很多很多其他的。
us, a dot-- there's many, many, many others.

568
00:29:09,109 --> 00:29:12,219
而且，如果您进入Wikipedia，则可以看到几乎详尽的列表。
And if you go on Wikipedia you can see a nearly exhaustive list.

569
00:29:12,220 --> 00:29:16,030
但这只是倾向于对网站类型进行分类。
But this just tends to categorize the type of website that it is.

570
00:29:16,029 --> 00:29:21,189
除此之外，还有这个前缀，通常称为主机名。
Besides that, there's this prefix, this, generally known as a hostname.

571
00:29:21,190 --> 00:29:23,530
www只是人类的习俗。
And www is just a human convention.

572
00:29:23,529 --> 00:29:26,109
几年前，互联网上几乎所有服务器
Years ago, pretty much any server on the internet

573
00:29:26,109 --> 00:29:31,959
像这样的人性化名称www.example.com，
that had a human-friendly name like this, www.example.com,

574
00:29:31,960 --> 00:29:33,820
这只是为了向用户表示
this was just meant to connote to the user

575
00:29:33,819 --> 00:29:37,779
哦，www，这必须是Web服务器的地址
that, oh, www, this must be the address of a web server

576
00:29:37,779 --> 00:29:40,959
而不是邮件服务器，聊天服务器等。
and not a mail server not a chat server or something else.

577
00:29:40,960 --> 00:29:42,265
这不是严格要求的。
It's not strictly required.

578
00:29:42,265 --> 00:29:43,390
这只是人类的惯例。
It's just human convention.

579
00:29:43,390 --> 00:29:45,432
当您访问网站时，您和我的赔率很可能是
And odds are, you and I, when you visit websites,

580
00:29:45,432 --> 00:29:48,200
您甚至不必再打入它。
you probably don't even bother typing this in anymore.

581
00:29:48,200 --> 00:29:53,980
但这是一项历史功能，可以提供视觉提示-提示，通常，
But it is a historical feature that allows a visual cue-- clue, typically,

582
00:29:53,980 --> 00:29:57,010
对于人类来说，它是什么类型的服务器。
to the humans as to what type of server it is.

583
00:29:57,009 --> 00:30:01,419
因此，除此之外，还有一条隐藏的信息。
So besides that, there's this one hidden piece of information as well.

584
00:30:01,420 --> 00:30:05,710
如果您只想访问example.com的首页，则可以输入以下网址，
If you just want to visit example.com's homepage, you might just type this URL,

585
00:30:05,710 --> 00:30:08,170
甚至只是键入example.com并按Enter键，然后
or even just type example.com and hit Enter and let

586
00:30:08,170 --> 00:30:11,080
浏览器会将您重定向，可以这么说-带您
the browser redirect you, so to speak-- take you

587
00:30:11,079 --> 00:30:13,689
URL的这种规范形式。
to this canonical form of the URL.

588
00:30:13,690 --> 00:30:17,710
但通常，从技术上来讲，您是在请求特定文件。
But very often, you're technically requesting a specific file.

589
00:30:17,710 --> 00:30:22,413
而且，如果未提及，该文件名通常为index.html。
And if not mentioned, that file name is typically index.html.

590
00:30:22,413 --> 00:30:25,330
取决于语言或服务器，也可以是其他内容
It can be other things as well depending on the language or the server

591
00:30:25,329 --> 00:30:26,919
某人正在使用的技术。
technology that someone's using.

592
00:30:26,920 --> 00:30:30,880
但是，URL末尾隐含的通常是文件名。
But implicit at the end of URLs is often the name of a file.

593
00:30:30,880 --> 00:30:34,000
Brian可能曾特别要求cat.jpg，
Brian might have specifically requested cat.jpg,

594
00:30:34,000 --> 00:30:36,069
但如果他不要求提供猫的照片
but if he were requesting not a picture of a cat

595
00:30:36,069 --> 00:30:39,999
但是包含文字和其他信息的完整网页很可能是
but a full-fledged web page with text and other information, odds are,

596
00:30:40,000 --> 00:30:43,479
那里有一个隐式文件名，例如index.html。
there's an implicit file name there, like index.html.

597
00:30:43,480 --> 00:30:47,080
这一点现在很重要，因为当我们查看这个信封时，
And this is now important, because when we look inside this envelope,

598
00:30:47,079 --> 00:30:50,119
这是一条需要在那里的信息。
this is a piece of information that needs to then be in there.

599
00:30:50,119 --> 00:30:54,069
因此，让我们看一些示例HTTP请求和响应，
So let's take a look at some sample HTTP requests and responses,

600
00:30:54,069 --> 00:30:56,709
深入探讨Brian和我以及员工的技术
the more technical dive into what Brian and I and the staff

601
00:30:56,710 --> 00:30:58,540
一会儿就表现出来了。
acted out a moment ago.

602
00:30:58,539 --> 00:31:01,839
从技术上讲，当Brian向我发送关于那只猫的请求时，
Technically speaking, when Brian sent me a request for that cat,

603
00:31:01,839 --> 00:31:05,979
他在信封里写着，不仅是关键词GET之类的
he wrote inside this envelope, not only the key word GET and something like

604
00:31:05,980 --> 00:31:07,278
cat.jpg--
a cat.jpg--

605
00:31:07,278 --> 00:31:09,070
他还指定了其他几件事。
he also specified a couple of other things.

606
00:31:09,069 --> 00:31:12,369
现在让我们将其从猫身上泛化，并提出这个建议。
And let's genericize it now away from cats and just propose this.

607
00:31:12,369 --> 00:31:17,799
在这些虚拟信封中的任何一个的HTTP请求中实际上是
Inside of an HTTP request that is any of these virtual envelopes is literally

608
00:31:17,799 --> 00:31:21,909
如果您不想收拾东西，请先请求，例如，GET后跟斜杠，
a request for, like, GET followed by slash, if you don't want to cat,

609
00:31:21,910 --> 00:31:23,920
您只需要默认主页，然后
you just want the default homepage, followed

610
00:31:23,920 --> 00:31:28,150
提到浏览器和服务器应该使用哪种HTTP版本。
by a mention of what version of HTTP the browser and server should speak.

611
00:31:28,150 --> 00:31:29,710
1.1很常见。
1.1 is pretty common.

612
00:31:29,710 --> 00:31:31,750
2很漂亮-越来越普遍。
2 is pretty-- is increasingly common.

613
00:31:31,750 --> 00:31:33,122
3甚至现在在那里。
3 is even now out there.

614
00:31:33,123 --> 00:31:35,290
但是协议只有不同的版本。
But there's just different versions of the protocol.

615
00:31:35,289 --> 00:31:37,959
就像人类已经完善了握手的含义。
It's like humans have refined what it means to shake hands.

616
00:31:37,960 --> 00:31:40,490
这些版本的协议会随着时间的推移而发展。
These versions of protocols evolve over time.

617
00:31:40,490 --> 00:31:44,770
但是也有这样一行，Host Colon www.example.com，
But there's also a line like this, Host colon www.example.com,

618
00:31:44,769 --> 00:31:48,999
因为-以防万一我是一个特别花哨的服务器，
because-- just in case I am a particularly fancy server that

619
00:31:49,000 --> 00:31:54,009
不仅支持example.com，还支持Harvard.edu和Yale.edu。
supports not only example.com but maybe Harvard.edu and Yale.edu.

620
00:31:54,009 --> 00:31:56,559
长话短说，对于如今的公司来说，这是可能的
It's possible, long story short, for companies nowadays

621
00:31:56,559 --> 00:32:00,669
在同一服务器上托管多个网站和多个域。
to host multiple websites and multiple domains on the same server.

622
00:32:00,670 --> 00:32:03,070
信封里的这个小线索可以确保
This little clue inside the envelope makes sure

623
00:32:03,069 --> 00:32:07,329
转到example.com或Harvard.edu或Yale.edu
that it goes to example.com or Harvard.edu or Yale.edu

624
00:32:07,329 --> 00:32:11,079
如果所有这些实体都共享同一台物理服务器。
if all of these entities are sharing the same physical server.

625
00:32:11,079 --> 00:32:13,944
因此，更具体地说，一个请求可能看起来像-看起来像这样。
So more specifically, a request might look-- instead look like this.

626
00:32:13,944 --> 00:32:16,569
如果您不仅要请求默认主页，还需要
If you're not just requesting the default homepage but you want

627
00:32:16,569 --> 00:32:20,619
一个特定的文件，它可能改为/index.html。
a specific file, it might say /index.html instead.

628
00:32:20,619 --> 00:32:22,429
我的回应是什么样的？
What does my response look like?

629
00:32:22,430 --> 00:32:23,960
所以我得到了布莱恩的信封。
So I've gotten Brian's envelope.

630
00:32:23,960 --> 00:32:26,470
现在，我要继续前进，用我自己的一两个来回应
Now I'm going to go ahead and respond with my own one or two

631
00:32:26,470 --> 00:32:27,490
或更多的信封。
or more envelopes.

632
00:32:27,490 --> 00:32:31,300
是的，在我的内心，会去掉那只猫的碎片，
Inside of mine, yes, is going to go pieces of that cat,

633
00:32:31,299 --> 00:32:34,089
但是根据协议，还有一些其他信息。
but some additional information as well, per the protocol.

634
00:32:34,089 --> 00:32:37,579
因此，我的回应-就像在人类世界中一样，我可能会伸出双手，
So my response-- just like in the human world, I might extend my hand,

635
00:32:37,579 --> 00:32:39,759
如果我看到Brian开始握手。
if I see Brian initiating a handshake.

636
00:32:39,759 --> 00:32:43,729
我将以类似这样的方式进行响应，即HTTP / 1.1，
I'm going to respond with something like this, HTTP/1.1,

637
00:32:43,730 --> 00:32:47,920
只是提醒浏览器我在说什么版本，然后是一个数字，
which just reminds the browser what version I'm speaking, then a number,

638
00:32:47,920 --> 00:32:52,630
这是状态码，然后是速记摘要，例如OK。
which is the status code, followed by a shorthand summary, like OK.

639
00:32:52,630 --> 00:32:54,490
200 OK表示我了解您。
200 OK means I got you.

640
00:32:54,490 --> 00:32:55,390
我找到了那只猫。
I found the cat.

641
00:32:55,390 --> 00:32:57,670
在这里，这些信封被逐块地塞进来了。
Here it comes, piece by piece, in these envelopes.

642
00:32:57,670 --> 00:33:01,220
我还在信封中提到了内容类型。
And I also put it in the envelope a mention of the content type.

643
00:33:01,220 --> 00:33:04,450
如果是网页，我将输入text / html。
If it's a web page, I'm going to put text/html.

644
00:33:04,450 --> 00:33:09,040
如果是jpg，我可以改说image / jpg。
If it's a jpg, I might instead say image/jpg.

645
00:33:09,039 --> 00:33:12,249
还有不同的内容类型，也称为线型，
And there's the different content types, otherwise known as line types,

646
00:33:12,250 --> 00:33:15,040
适用于世界上所有不同的文件格式。
for all different file formats in the world.

647
00:33:15,039 --> 00:33:19,129
好吧，情况并非总是如此，响应是
Well, that's not always going to be the case, that the response is

648
00:33:19,130 --> 00:33:23,930
如此简单，您的浏览器即可请求信息，而服务器
as simple as that, whereby your browser requests information and the server

649
00:33:23,930 --> 00:33:26,060
响应所请求的信息。
responds with the requested information.

650
00:33:26,059 --> 00:33:28,569
有时用户会走到错误的地方。
Sometimes the users make their way to the wrong place.

651
00:33:28,569 --> 00:33:35,119
举例来说，假设某个浏览器访问了www.Harvard.edu，
So for instance, suppose that a browser visits www.Harvard.edu,

652
00:33:35,119 --> 00:33:38,599
最初的响应不一定一定可以。
the response might not necessarily be OK initially.

653
00:33:38,599 --> 00:33:41,099
它可能不是状态码200。
It might not be status code 200.

654
00:33:41,099 --> 00:33:42,709
实际上，我们可以看到这一点。
And in fact, we can see this.

655
00:33:42,710 --> 00:33:46,250
让我继续并在浏览器中打开我的屏幕
Let me go ahead and open up on my screen here a browser

656
00:33:46,250 --> 00:33:51,349
假设我要进入的窗口是Harvard.edu。
window that's going to take me to, let's say, Harvard.edu.

657
00:33:51,349 --> 00:33:59,089
我将继续输入网址栏http://www.Harvard.edu，
And I'm going to go ahead and type in to the URL bar http://www.Harvard.edu,

658
00:33:59,089 --> 00:34:00,349
进入。
Enter.

659
00:34:00,349 --> 00:34:02,839
现在，这一切发生得很快，但是如果我
Now, all this happened pretty quickly, but if I

660
00:34:02,839 --> 00:34:06,199
单击已简化或缩短的网址栏
click on the URL bar, which has been simplified or shortened

661
00:34:06,200 --> 00:34:09,800
现在，您可以通过Chrome浏览器，注意我实际上是在哪里结束的。
by Chrome at the moment, notice where I actually ended up.

662
00:34:09,800 --> 00:34:13,370
不知何故，我的浏览器无法使我保持HTTP状态。
Somehow or other, my browser did not keep me at HTTP.

663
00:34:13,369 --> 00:34:16,061
可以这么说，它将我重定向到了HTTPS。
It redirected me, so to speak, to HTTPS.

664
00:34:16,061 --> 00:34:18,019
这可能是哈佛有意为之。
This is probably intentional on Harvard's part.

665
00:34:18,019 --> 00:34:19,849
他们宁愿我去拜访他们
They would rather that I'd be visiting them

666
00:34:19,849 --> 00:34:22,856
安全地进行，这样，如果我正在阅读文章或其他内容，
securely so that if I'm reading articles or other content,

667
00:34:22,856 --> 00:34:25,189
除了我和哈佛，那真的没有人要事。
that's really nobody's business except mine and Harvard.

668
00:34:25,190 --> 00:34:28,380
当然没有人-介于两者之间的路由器都看不到这一点。
Certainly no one-- no routers in between should be able to see this.

669
00:34:28,380 --> 00:34:32,719
因此，哈佛以某种方式将我从HTTP重定向到HTTPS。
So somehow, Harvard redirected me from HTTP to HTTPS.

670
00:34:32,719 --> 00:34:34,050
好吧，我怎么看到这个？
Well, how can I see this?

671
00:34:34,050 --> 00:34:39,020
好吧，事实证明，它嵌入了Chrome和Edge以及Firefox和Safari中，
Well, it turns out, embedded in Chrome and Edge and Firefox and Safari--

672
00:34:39,019 --> 00:34:40,488
当今所有的浏览器-
all of today's browsers--

673
00:34:40,489 --> 00:34:42,739
通常有一些开发人员工具，有时您
there are often developer tools that sometimes you

674
00:34:42,739 --> 00:34:44,630
必须通过某个菜单启用-
have to enable via a certain menu--

675
00:34:44,630 --> 00:34:46,730
但是这些开发人员工具是如此强大
but these developer tools are so powerful

676
00:34:46,730 --> 00:34:49,820
他们允许您，用户或现在的程序员
and they allow you, the user, or now you, the programmer,

677
00:34:49,820 --> 00:34:52,820
真正看到并了解发生了什么
to actually see and understand what's going

678
00:34:52,820 --> 00:34:56,010
在这些浏览器和服务器的内部。
on underneath the hood of these browsers and servers.

679
00:34:56,010 --> 00:34:58,010
因此，我将专门在Chrome中执行此操作。
So I'm going to do this in Chrome, specifically.

680
00:34:58,010 --> 00:35:00,590
我要去查看，开发人员，然后
I'm going to go to View, Developer, and then I'm

681
00:35:00,590 --> 00:35:02,150
转到“开发人员工具”。
going to go to Developer Tools.

682
00:35:02,150 --> 00:35:05,540
如果您是Chrome用户，则很可能会一直使用此菜单选项，
And odds are if you're a Chrome User, this menu option has always been there,

683
00:35:05,539 --> 00:35:06,929
即使您从未注意到它。
even if you never noticed it.

684
00:35:06,929 --> 00:35:08,479
因此，随时可以在家里玩。
So feel free to play along at home.

685
00:35:08,480 --> 00:35:10,783
然后注意，它弹出在这里的顶部。
And then notice this pops up on the top right here.

686
00:35:10,782 --> 00:35:12,949
我将继续将其向下移动到底部
I'm going to go ahead and move it down to the bottom

687
00:35:12,949 --> 00:35:15,889
只需单击点，点，点菜单并移动开发人员
just by clicking the dot, dot, dot menu and move the developer

688
00:35:15,889 --> 00:35:19,219
工具位于屏幕底部，以便我们可以看到更宽的范围。
tools to the bottom of my screen, just so we can see things a little wider.

689
00:35:19,219 --> 00:35:22,469
我要继续，然后单击此处的“网络”选项卡。
And I'm going to go ahead and click on the Network tab up here.

690
00:35:22,469 --> 00:35:24,449
当我点击此处的“网络”标签时，
And when I click on the Network tab here,

691
00:35:24,449 --> 00:35:28,894
我将看到与我的上一个请求相关的一堆信息，
I'm going to see a whole bunch of information related to my last request,

692
00:35:28,894 --> 00:35:31,019
因此，我将继续并再次执行此请求。
so I'm going to go ahead and do this request again.

693
00:35:31,019 --> 00:35:33,649
让我继续并返回网址栏
Let me go ahead and go back to the URL bar

694
00:35:33,650 --> 00:35:36,750
让我继续前进-实际上，只是出于很好的考虑，
and let me go ahead and-- actually, just for good measure,

695
00:35:36,750 --> 00:35:38,296
让我在隐身模式下执行此操作。
let me do this in Incognito mode.

696
00:35:38,297 --> 00:35:40,130
即使你可能有这种习惯
And even though you perhaps are in the habit

697
00:35:40,130 --> 00:35:42,170
如果您不希望浏览器使用隐身模式
of using Incognito mode if you don't want the browser

698
00:35:42,170 --> 00:35:45,212
记住您去过哪里或以什么身份登录-和隐身
to remember where you've been or what you've logged in as-- and Incognito

699
00:35:45,211 --> 00:35:48,089
模式对于开发人员工具而言具有强大的功能
mode is incredibly powerful for developers tool

700
00:35:48,090 --> 00:35:52,640
这样您就可以将浏览器状态重置为第一个条件
so that you can reset the browser state to a first condition

701
00:35:52,639 --> 00:35:57,202
在您的历史记录中不会显示任何以前的网络浏览。
without any previous network browsing showing up in your history.

702
00:35:57,202 --> 00:35:59,119
所以我现在将在隐身模式中再次执行此操作
So I'm going to do this again now in Incognito

703
00:35:59,119 --> 00:36:01,579
打开开发人员工具后进入模式。
mode after having opened developer tools.

704
00:36:01,579 --> 00:36:07,249
http://www.Harvard.edu，输入。
http://www.Harvard.edu, Enter.

705
00:36:07,250 --> 00:36:10,669
一堆东西刚从窗户飞过，其中一些
And a whole bunch of stuff just flew by the window, some of which

706
00:36:10,670 --> 00:36:14,107
是此图表信息，它向我显示了性能。
is this chart information, which shows me the performance.

707
00:36:14,106 --> 00:36:17,189
所以[格雷格（Greg，？）。
So to [? Greg, ?] your question earlier about noticing the amount of time,

708
00:36:17,190 --> 00:36:19,690
您可以看到一些引起的请求
you can see that some of the requests that were just induced

709
00:36:19,690 --> 00:36:23,120
在几毫秒到1,000毫秒之间变化。
vary between a few milliseconds and over 1,000 milliseconds.

710
00:36:23,119 --> 00:36:27,019
但是我现在关心的是这里相当神秘的清单。
But what I care about for now is this fairly arcane listing down here.

711
00:36:27,019 --> 00:36:29,629
屏幕上飞舞着很多东西，
A whole lot of stuff just flew across the screen,

712
00:36:29,630 --> 00:36:32,900
实际上，如果我放大底部，只需访问Harvard.edu
and indeed, if I zoom in on the bottom, simply visiting Harvard.edu

713
00:36:32,900 --> 00:36:39,890
每次提及时，在左下角会引发70个HTTP请求。
induces 70 HTTP requests per this mention in the bottom left-hand corner.

714
00:36:39,889 --> 00:36:43,729
结果导致传输了6.8 MB的信息。
It resulted in 6.8 megabytes of information being transferred.

715
00:36:43,730 --> 00:36:47,810
总的来说，这花了-十分残酷的11.95秒。
And in total, it took a-- rather atrociously, 11.95 seconds.

716
00:36:47,809 --> 00:36:51,029
所以 [？ Greg，[]喜欢，相对而言，这很慢。
So [? Greg, ?] like, that is slow, relatively speaking.

717
00:36:51,030 --> 00:36:52,850
好吧，绝对可以。
Well, absolutely speaking.

718
00:36:52,849 --> 00:36:55,129
那么，这里的要点是什么？
So what's the takeaway here?

719
00:36:55,130 --> 00:36:57,050
好吧，每当您访问网页时，
Well, any time you visit a web page, there's

720
00:36:57,050 --> 00:37:00,410
不只是一个网页本身包含所有文字。
not just the one web page itself with all of the text in it.

721
00:37:00,409 --> 00:37:04,099
可能有图像，视频，音乐等。
There's probably images, maybe videos, maybe music and other things.

722
00:37:04,099 --> 00:37:06,069
所有这些都单独下载。
All of those get downloaded separately.

723
00:37:06,070 --> 00:37:10,370
因此，如果Brian要求我提供完整的网页，例如课程的主页，
So if Brian had asked me for a full web page, like the course's home website,

724
00:37:10,369 --> 00:37:13,249
我可能不会用一个信封或两个信封来回应。
I might respond not with a single envelope or two envelopes.

725
00:37:13,250 --> 00:37:18,200
我可能会用70个信封回应，其中包含对每件作品的回应
I might respond with 70 envelopes containing the responses to every piece

726
00:37:18,199 --> 00:37:23,419
组成CS50自己的网站的媒体，或者在这种情况下是哈佛的网站。
of media that composes CS50's own website, or in this case, Harvard's.

727
00:37:23,420 --> 00:37:26,390
但是现在，让我们仅关注这些请求中的第一个。
But for now, let's focus only on the first of these requests.

728
00:37:26,389 --> 00:37:28,969
如果我在Chrome浏览器中查看第一行，
If I look at the first row here in Chrome,

729
00:37:28,969 --> 00:37:32,029
我会想起我第一次去的地方。
I will see a reminder of where I visited first.

730
00:37:32,030 --> 00:37:35,810
但是请注意，“状态”列在此处是301。
But notice the Status column over here is 301.

731
00:37:35,809 --> 00:37:37,669
301永久移动。
301 Moved Permanently.

732
00:37:37,670 --> 00:37:40,190
原来有200个数字
It turns out that there's numbers besides 200

733
00:37:40,190 --> 00:37:42,080
告诉浏览器该怎么做。
that tell browsers what to do.

734
00:37:42,079 --> 00:37:45,349
200表示可以，这是我们要求的数据。
200 just means OK, here's the data we requested.

735
00:37:45,349 --> 00:37:49,789
301表示，nn-nn，无论您请求的内容已永久移动
301 means, nn-nn, whatever you requested has moved permanently

736
00:37:49,789 --> 00:37:51,229
到另一个URL。
to a different URL.

737
00:37:51,230 --> 00:37:53,540
因此，让我继续并单击第一行
So let me go ahead and click this first row

738
00:37:53,539 --> 00:37:56,849
然后您会看到一组完全不同的标签页。
and you'll see that a whole different set of tabs pops up.

739
00:37:56,849 --> 00:37:58,309
我要单击“标题”。
I'm going to click Headers here.

740
00:37:58,309 --> 00:37:59,899
现在让我定义一个术语。
And now let me define a term.

741
00:37:59,900 --> 00:38:04,010
当Brian和我在这些信封中使用HTTP时，我写了
When Brian and I are using HTTP inside of these envelopes and I write

742
00:38:04,010 --> 00:38:10,070
像GET斜线HTTP / 1.1或宿主冒号www.example.com之类的东西，
something like GET slash HTTP/1.1 or host colon www.example.com,

743
00:38:10,070 --> 00:38:13,970
每行文本就是我们所说的HTTP标头。
each of those lines of text is what we'll call an HTTP header.

744
00:38:13,969 --> 00:38:16,469
这是信封内的一行文字。
It's a line of text inside of the envelope.

745
00:38:16,469 --> 00:38:19,109
所以我们在这里看到的是Chrome的摘要
So what we're seeing here is Chrome's summary

746
00:38:19,110 --> 00:38:21,810
这些信封内部的所有标头中的所有标头。
of all of the headers that were inside of these envelopes.

747
00:38:21,809 --> 00:38:25,839
让我继续来看一下我的请求标头。
Let me go ahead and look at my request headers first.

748
00:38:25,840 --> 00:38:27,720
我将单击“查看源代码”。
I'm going to click View Source.

749
00:38:27,719 --> 00:38:32,279
我可以从字面上看到浏览器发送的原始请求
And I can literally see the raw request that my browser sent

750
00:38:32,280 --> 00:38:39,470
到www.Harvard.edu，GET斜线HTTP / 1.1，宿主冒号www.Harvard.edu，
to www.Harvard.edu, GET slash HTTP/1.1, Host colon www.Harvard.edu,

751
00:38:39,469 --> 00:38:42,479
然后是其他一堆我们现在将忽略的东西。
and then a bunch of other stuff which we'll ignore for now.

752
00:38:42,480 --> 00:38:45,030
但是这些都是HTTP标头。
But those are all HTTP headers.

753
00:38:45,030 --> 00:38:47,910
但是如果我在这里向上滚动，我们来看一下响应
But if I scroll back up here, let's look at the response

754
00:38:47,909 --> 00:38:50,579
标头，然后返回到不同的信封中
headers now, what came back in a different envelope

755
00:38:50,579 --> 00:38:52,919
从哈佛到我的笔记本电脑。
from Harvard to my laptop.

756
00:38:52,920 --> 00:39:00,000
注意这里是HTTP 1.1，但不是200 OK，而是301永久移动。
Notice here that it's HTTP 1.1, but it's not 200 OK, it's 301 Moved Permanently.

757
00:39:00,000 --> 00:39:02,430
这是我的浏览器的提示，嗯，
This is a hint to my browser that, uh-uh,

758
00:39:02,429 --> 00:39:04,529
您访问的网址没有任何内容。
there's nothing at the URL you visited.

759
00:39:04,530 --> 00:39:07,080
您需要访问其他位置。
You need to visit a different location instead.

760
00:39:07,079 --> 00:39:11,879
要知道我需要去哪里，我需要向下滚动并在此处找到此标头。
To know where I need to go, I need to scroll down and find this header here.

761
00:39:11,880 --> 00:39:15,365
请注意，响应中的第三行是“位置冒号”
Notice that the third line in the response is Location colon

762
00:39:15,364 --> 00:39:20,699
https://www.Harvard.edu。
https://www.Harvard.edu.

763
00:39:20,699 --> 00:39:24,449
因此，这就是返回的信封中包含我要说的线索的方式，
So this is how the envelope that comes back contains a clue to me to say,

764
00:39:24,449 --> 00:39:28,389
nn-nn，我们已经永久迁移到网站的安全版本。
nn-nn, we have moved permanently to the secure version of the website.

765
00:39:28,389 --> 00:39:32,339
如果我现在缩小并单击这个小X以关闭这些标签，
And if I zoom out now and click this little X to close those tabs,

766
00:39:32,340 --> 00:39:37,380
您会看到我的浏览器自动发送的下一个请求
you'll see that the next request that my browser automatically sent on its own

767
00:39:37,380 --> 00:39:43,840
相反，如果我在此处向下滚动到该请求网址，
was to instead, if I scroll down here, to this request URL,

768
00:39:43,840 --> 00:39:48,300
https://www.Harvard.edu，以及我的回应
https://www.Harvard.edu, and the response I

769
00:39:48,300 --> 00:39:53,250
这次是根据一般概述得出的，现在的确是200。
got this time under this general summary here was now indeed 200.

770
00:39:53,250 --> 00:39:57,089
所以这只是一个简单的机制，允许浏览器和服务器
So this is just a simple mechanism that allows a browser and a server

771
00:39:57,090 --> 00:40:02,520
以一种可以将它们从一个位置发送到另一个位置的方式进行相互通信。
to intercommunicate in a way that can send them from one location to another.

772
00:40:02,519 --> 00:40:04,589
让我对此更加熟悉。
And let me make this a little more familiar.

773
00:40:04,590 --> 00:40:09,240
很奇怪，您以前从未明确看到过这种情况，因为您作为人类，
Odds are you have seen not this before, explicitly, because you, as a human,

774
00:40:09,239 --> 00:40:12,479
很少会（如果有的话）看到数字301或“永久移动”
would rarely, if ever, see the number 301 or Moved Permanently

775
00:40:12,480 --> 00:40:14,670
直到今天，你是一个程序员，
until today, now that you're a programmer who's

776
00:40:14,670 --> 00:40:18,300
使用这些开发人员工具，但很可能您看到了另一个数字。
using these developer tools, but odds are you've seen another number.

777
00:40:18,300 --> 00:40:20,100
也许在聊天中，如果您只想发出提示音
Maybe in the chat if you want to just chime

778
00:40:20,099 --> 00:40:24,239
在，如果您正在考虑网页和数字，有没有人看到过-
in, if you're thinking about web pages and numbers, has anyone seen--

779
00:40:24,239 --> 00:40:29,309
可能很多时候，现在看来更有意义的数字了吗？
quite often, probably, a number that maybe now makes a little more sense?

780
00:40:29,309 --> 00:40:30,509
布莱恩，你看到了什么？
Brian, what are you seeing?

781
00:40:30,510 --> 00:40:32,190
布莱恩·于：很多人说404。
BRIAN YU: A lot of people saying 404.

782
00:40:32,190 --> 00:40:34,230
我还看到了500和502。
I also saw 500 and a 502.

783
00:40:34,230 --> 00:40:37,800
DAVID J. MALAN：是的，所以404是人类多年采用的代码
DAVID J. MALAN: Yeah, so 404 is the code that humans adopted years

784
00:40:37,800 --> 00:40:39,880
之前只是表示未找到。
ago that just signifies Not Found.

785
00:40:39,880 --> 00:40:44,970
因此，如果您访问了错误的URL或不再存在的旧URL
So if you visit an incorrect URL or an old URL that no longer exists

786
00:40:44,969 --> 00:40:47,639
在服务器上，也许是一只被删除的老猫，
on a server, for maybe an old cat that's been deleted,

787
00:40:47,639 --> 00:40:52,349
服务器将不会以200 OK响应，但会以404 Not Found响应，
the server will respond not with 200 OK but with 404 Not Found,

788
00:40:52,349 --> 00:40:56,489
从而告诉您的浏览器显示某种错误消息。
thereby telling your browser to display some kind of error message.

789
00:40:56,489 --> 00:40:59,639
奇怪的是，几年前的浏览器并不是特别用户友好，
Weirdly, browsers years ago weren't especially user friendly,

790
00:40:59,639 --> 00:41:03,749
然后浏览器只是告诉我们人类404、404，
and then browsers just told us humans 404, 404,

791
00:41:03,750 --> 00:41:05,850
坦率地说，它不是很用户友好。
which frankly, is not very user friendly.

792
00:41:05,849 --> 00:41:09,719
但归根结底是响应中的这个小提示
But all it boils down to is this little hint inside of the response

793
00:41:09,719 --> 00:41:14,181
信封回来，表明出了点问题，
envelope coming back that indicates that something went wrong,

794
00:41:14,181 --> 00:41:15,389
找不到东西。
that something was not found.

795
00:41:15,389 --> 00:41:17,519
这些状态码的完整列表，
And there's a whole list of these status codes,

796
00:41:17,519 --> 00:41:19,259
当然，这不是您需要记住的东西，
and this is certainly not something you need to memorize,

797
00:41:19,260 --> 00:41:21,420
但是随着我们越来越专注于网络编程，
but as we focus more and more on web programming,

798
00:41:21,420 --> 00:41:24,090
您自然会熟悉其中的一些。
you'll just get naturally familiar with some of these.

799
00:41:24,090 --> 00:41:27,090
还有其他方法可以将用户从一个地方重定向到另一个地方。
There's other ways of redirecting the user from one place to another.

800
00:41:27,090 --> 00:41:29,820
可以使用302和307。
302 and 307 can be used.

801
00:41:29,820 --> 00:41:32,100
为了提高效率，服务器有时可以响应
For efficiency, servers can sometimes respond

802
00:41:32,099 --> 00:41:36,569
304，这实际上意味着，您已经问过我这个问题。
with 304, which essentially means, you already asked me that question.

803
00:41:36,570 --> 00:41:38,730
猫在服务器上没有改变。
The cat has not changed on the server.

804
00:41:38,730 --> 00:41:40,590
使用您自己的猫咪副本。
Use your own copy of the cat.

805
00:41:40,590 --> 00:41:44,835
长话短说，如果Brian自己的浏览器很聪明，它将缓存-
So long story short, if Brian's own browser were smart, it would cache--

806
00:41:44,835 --> 00:41:50,290
CACHE-也就是说，请记住他刚刚从我这里下载的那只猫，
C-A-C-H-E-- that is, remember the cat that he just downloaded from me so that

807
00:41:50,289 --> 00:41:54,179
如果Brian遇到重新加载，或者他再次回到同一网站并想要
if Brian hits reload or he comes back to that same website again and wants

808
00:41:54,179 --> 00:41:57,959
再次看到猫，只是-他的浏览器加载了本地副本
to see the cat again, it just-- his browser loads the local copy instead

809
00:41:57,960 --> 00:42:01,230
困扰着我，Web服务器，浪费时间（毫秒），
of bothering me, the web server, and wasting time, milliseconds,

810
00:42:01,230 --> 00:42:02,250
派另一只猫。
sending another cat.

811
00:42:02,250 --> 00:42:04,569
304只会说，猫是一样的。
304 would just say, the cat is the same.

812
00:42:04,570 --> 00:42:05,917
使用您自己的本地副本。
Use your own local copy.

813
00:42:05,916 --> 00:42:06,749
然后还有其他。
Then there's others.

814
00:42:06,750 --> 00:42:09,629
您可能之前看过401或403，
You might have seen 401 or 403 before, which

815
00:42:09,630 --> 00:42:13,020
指的是未正确登录或类似的信息。
refer to not being logged in correctly or something like that.

816
00:42:13,019 --> 00:42:15,159
500实际上很糟糕。
500 is actually bad.

817
00:42:15,159 --> 00:42:18,569
实际上，我可以保证在接下来的几周内，
And in fact, I can pretty much guarantee that over the next couple of weeks,

818
00:42:18,570 --> 00:42:24,265
你们所有人都会遇到一些HTTP 500错误中的第一个错误。
all of you will experience your very first of several HTTP 500 errors.

819
00:42:24,264 --> 00:42:26,889
这将是下周您弄糟的代码
That's going to be next week that you screwed up with your code

820
00:42:26,889 --> 00:42:30,809
而且您实际上编写了错误的Python代码，这意味着整个服务器都没有
and you actually wrote buggy Python code that just meant the whole server didn't

821
00:42:30,809 --> 00:42:31,599
知道做什么。
know what to do.

822
00:42:31,599 --> 00:42:33,359
那是内部服务器错误。
And that's an internal server error.

823
00:42:33,360 --> 00:42:37,500
可修复的，可以帮助您调试它，但是确实，这也很普遍。
Fixable, and will help you debug it, but indeed, that's quite common as well.

824
00:42:37,500 --> 00:42:40,180
503只是表示服务器可能会以某种方式超载
503 just means the server might be overloaded in some way

825
00:42:40,179 --> 00:42:43,567
因此服务不可用，还有点，点，点等等。
and so service is unavailable, and there's others, dot, dot, dot, as well.

826
00:42:43,568 --> 00:42:45,360
所以我们实际上可以有一些乐趣
So we can actually have a little bit of fun

827
00:42:45,360 --> 00:42:47,670
朝着几个不同的方向发展。
with this in a couple of different directions.

828
00:42:47,670 --> 00:42:52,470
事实证明，如果我们发送此HTTP请求，
It turns out that if we send this HTTP request,

829
00:42:52,469 --> 00:42:54,136
我们可以看看结果如何。
we can take a look at what comes back.

830
00:42:54,137 --> 00:42:55,470
让我继续执行此操作。
And let me go ahead and do this.

831
00:42:55,469 --> 00:42:57,969
我将使用命令行而不是使用浏览器
Instead of using my browser, I'm going to use a command line

832
00:42:57,969 --> 00:43:01,409
往往会更清洁一点的工具，因为我不必烦恼
tool which tends to just be a little cleaner, because I don't have to futz

833
00:43:01,409 --> 00:43:02,789
所有这些按钮。
around with all of these buttons.

834
00:43:02,789 --> 00:43:05,219
让我继续使用名为Curl的程序。
Let me go ahead and use a program called Curl.

835
00:43:05,219 --> 00:43:08,669
Curl的人生目的仅仅是连接到URL。
And Curl's purpose in life is just to connect to a URL.

836
00:43:08,670 --> 00:43:12,070
而且不会打扰向我显示网页或任何内容。
And it's not going to bother showing me the web page or any of the content.

837
00:43:12,070 --> 00:43:15,210
如果使用命令行，它将仅向我显示HTTP标头
It's just going to show me the HTTP headers if I use a command line

838
00:43:15,210 --> 00:43:17,350
破折号I的论点。
argument of dash capital I.

839
00:43:17,349 --> 00:43:23,649
现在，我将继续浏览http://safetyschool.org。
And now I'm going to go ahead and http://safetyschool.org.

840
00:43:23,650 --> 00:43:25,150
我将继续输入。
And I'm going to go ahead and Enter.

841
00:43:25,150 --> 00:43:28,600
这是我的Mac现在发送一个信封
And this is my Mac now sending one envelope

842
00:43:28,599 --> 00:43:33,489
到包含GET（该动词）并请求主页的safetyschool.org。
to safetyschool.org containing GET, that verb, requesting the home page.

843
00:43:33,489 --> 00:43:37,179
他们可能会用另一个信封回应我
They are presumably going to respond to me with another envelope inside

844
00:43:37,179 --> 00:43:38,679
其中有些回应。
of which is some kind of response.

845
00:43:38,679 --> 00:43:39,759
也许是200。
Maybe it's a 200.

846
00:43:39,760 --> 00:43:41,240
也许这是另外一回事。
Maybe it's something else.

847
00:43:41,239 --> 00:43:42,459
[笑声]好的。
[CHUCKLES] All right.

848
00:43:42,460 --> 00:43:44,590
看起来-原谅我-
It looks like-- forgive me--

849
00:43:44,590 --> 00:43:49,570
根据此301，safetyschool.org已永久移动，
that safetyschool.org has moved permanently, per this 301,

850
00:43:49,570 --> 00:43:53,290
到这个新位置www.Yale.edu。
to this new location www.Yale.edu.

851
00:43:53,289 --> 00:43:55,179
对不起。
sorry.

852
00:43:55,179 --> 00:43:56,469
实际上，我们可以做到这一点。
And in fact, we can do this.

853
00:43:56,469 --> 00:43:58,899
如果我复制此网址-
If I copy this URL--

854
00:43:58,900 --> 00:44:00,530
让我进入浏览器。
and let me go into a browser.

855
00:44:00,530 --> 00:44:04,060
我将再次使用“隐身”功能，这样我就没有任何过往的历史了。
I'll use Incognito again so that I don't have any past history.

856
00:44:04,059 --> 00:44:05,559
我要继续并按Enter。
I'm going to go ahead and hit Enter.

857
00:44:05,559 --> 00:44:11,019
瞧，视觉效果就像标题所暗示的一样真实。
And voila, the visual effect is just as real as the headers would imply.

858
00:44:11,019 --> 00:44:15,399
所以的确，关于这个笑话的有趣之处在于，互联网上有人
So indeed, the funny thing about this joke is that someone on the internet

859
00:44:15,400 --> 00:44:18,730
一直在为域名safetyschool.org支付费用，例如，
has been paying for the domain name safetyschool.org for, like,

860
00:44:18,730 --> 00:44:22,870
这个笑话已经有20年了，它唯一能做的就是
20 years now for this joke, and the only thing it does

861
00:44:22,869 --> 00:44:25,819
将一个域名重定向到另一个。
is redirect one domain name to another.

862
00:44:25,820 --> 00:44:26,800
现在，公平是公平的。
Now, fair is fair.

863
00:44:26,800 --> 00:44:29,350
让我继续前进，从safetyschool.org过渡
Let me go ahead and transition away from safetyschool.org

864
00:44:29,349 --> 00:44:33,699
或也存在的harvardsucks.org，另一边的人
or to harvardsucks.org, which also exists, and someone on the other side

865
00:44:33,699 --> 00:44:36,949
已经托管该网站已有一段时间了。
has been hosting this website for some time.

866
00:44:36,949 --> 00:44:40,149
实际上，如果您访问该URL，
And in fact, if you visit that URL--

867
00:44:40,150 --> 00:44:43,600
让我们去harvardsucks.org，回车。
let's go to harvardsucks.org, Enter.

868
00:44:43,599 --> 00:44:45,609
您实际上会看到整个网站。
You'll actually see a whole website.

869
00:44:45,610 --> 00:44:48,220
因此Yalies真的全力以赴。
So the Yalies really went all-out here.

870
00:44:48,219 --> 00:44:51,009
实际上，您可以在这里看到惊人的骇客
And you can actually see an amazing hack here

871
00:44:51,010 --> 00:44:55,240
因此，在harvardsucks.org上，有一个古老的YouTube视频，内容令人震惊
whereby at harvardsucks.org there's an old YouTube video of an amazing hack

872
00:44:55,239 --> 00:44:58,569
或在一场哈佛耶鲁足球比赛中被拉出的恶作剧
or prank that was pulled at one of the Harvard-Yale football games

873
00:44:58,570 --> 00:45:04,060
几年前，耶鲁大学以他们的功劳而欺骗了我们，
some years ago where Yale, to their credit, tricked us into spelling out,

874
00:45:04,059 --> 00:45:08,229
带有位图，如果-在所有方面，我们都很烂。
with a bitmap, if-- of all things, we suck.

875
00:45:08,230 --> 00:45:09,220
太公平了。
So fair's fair.

876
00:45:09,219 --> 00:45:12,039
因此，无论如何，将这些连接起来需要一些时间
So in anyhow, bit of a stretch to connect those

877
00:45:12,039 --> 00:45:14,619
到基本的HTTP消息，但实际上，
to underlying HTTP messages, but it all, indeed,

878
00:45:14,619 --> 00:45:17,319
与这些非常简单的原语有关。
relates to these very simple primitives.

879
00:45:17,320 --> 00:45:19,430
我还要指出另一件事。
Let me point out one other thing as well.

880
00:45:19,429 --> 00:45:22,299
我们可能还会以HTTP请求的形式看到
We might also see in the form of HTTP requests

881
00:45:22,300 --> 00:45:25,990
您不需要的甚至更复杂的第一行
even more sophisticated first lines where you're not requesting

882
00:45:25,989 --> 00:45:27,849
只是斜线，即默认主页。
just slash, the default homepage.

883
00:45:27,849 --> 00:45:32,889
您不需要的是/cat.jpg或/index.html。
You're not requesting /cat.jpg or /index.html.

884
00:45:32,889 --> 00:45:36,009
可能还会有问号和等号。
There might also be question marks and equal signs.

885
00:45:36,010 --> 00:45:40,090
请注意，这是Mac或PC或手机的信封摘录
And notice, this is an excerpt from an envelope my Mac or PC or phone

886
00:45:40,090 --> 00:45:44,440
可能会向google.com发送请求，要求提供猫的图片。
might send to google.com requesting pictures of cats.

887
00:45:44,440 --> 00:45:46,930
实际上，让我继续在浏览器上执行此操作。
And in fact, let me go ahead and do this on my browser.

888
00:45:46,929 --> 00:45:48,759
让我进入HTTPS
Let me go to HTTPS--

889
00:45:48,760 --> 00:45:51,220
我根本不会去使用不安全的版本。
I'm not going to bother using the insecure version at all.

890
00:45:51,219 --> 00:45:58,059
我将明确地转到google.com/search?q=cats。
I'm going to go explicitly to google.com/search?q=cats.

891
00:45:58,059 --> 00:46:01,779
这是我的Mac的网址的人工版本
So this is the human version of the URL that my Mac

892
00:46:01,780 --> 00:46:05,247
会转换为以下较低级别的消息，即
will translate into this lower-level message that's

893
00:46:05,246 --> 00:46:07,329
将被推到虚拟信封的内部。
going to be shoved inside of the virtual envelope.

894
00:46:07,329 --> 00:46:08,979
因此，我将继续并按Enter。
So I'm going to go ahead and hit Enter.

895
00:46:08,980 --> 00:46:11,680
瞧，我现在确实看到了一大堆
And voila, I now see, indeed, a whole bunch

896
00:46:11,679 --> 00:46:15,369
猫的照片，包括电影中一些更恐怖的照片
of pictures of cats, including some more horrific photos from a movie that

897
00:46:15,369 --> 00:46:17,269
表现也不佳。
didn't fare well as well.

898
00:46:17,269 --> 00:46:21,099
就是说，似乎您一旦了解了网址格式，
So that is to say that it seems that once you understand URL formats,

899
00:46:21,099 --> 00:46:24,219
您可以开始将输入传递给服务器。
you can begin to pass input to servers.

900
00:46:24,219 --> 00:46:27,879
现在是我们过去几周与未来几周之间的桥梁。
And here's now where we bridge past weeks to future weeks.

901
00:46:27,880 --> 00:46:31,930
到目前为止，当我们访问诸如Harvard.edu和Yale.edu之类的网页时，
Thus far, when we visited web pages like Harvard.edu and Yale.edu and the like,

902
00:46:31,929 --> 00:46:33,919
我们只是在访问静态Web内容。
we're just visiting static web content.

903
00:46:33,920 --> 00:46:35,920
实际上，我们并没有提供像您这样的用户输入
We're not actually providing user input like you

904
00:46:35,920 --> 00:46:41,230
将使用GET字符串或输入或任何种类的命令行程序
would using GET string or input or any kinds of command line programs

905
00:46:41,230 --> 00:46:42,010
我们写了。
we've written.

906
00:46:42,010 --> 00:46:45,040
但是事实证明，您的网址确实支持用户输入，
But it turns out that you URLs do support user input,

907
00:46:45,039 --> 00:46:46,639
并且它们是标准化的。
and they are standardized.

908
00:46:46,639 --> 00:46:50,724
如果您看到一个问号，然后看到一个像q这样的变量的名称
If you see a question mark and then the name of a variable like q

909
00:46:50,724 --> 00:46:52,719
然后是一个等号然后是一个像
and then an equal sign and then a word like

910
00:46:52,719 --> 00:46:58,599
“ cat”，它是要求您的命令行程序的基于Web的类似物
"cat," that's the web-based analog of a command line program having asked you

911
00:46:58,599 --> 00:47:01,839
q的值是多少，人类在猫中打字。
what is the value of q, and the human typing in cats.

912
00:47:01,840 --> 00:47:05,470
所以这就是说有一种使用网址的方式
So this is to say there is a way using URLs that will actually

913
00:47:05,469 --> 00:47:08,829
允许我们将输入传递到Web服务器。
allow us to pass input to a web server.

914
00:47:08,829 --> 00:47:11,679
确实，这就是您访问google.com时发生的事情，
And indeed, that's what's happening when you're visiting google.com,

915
00:47:11,679 --> 00:47:14,679
但归根结底是要了解这些网址。
but it just boils down to understanding these URLs.

916
00:47:14,679 --> 00:47:17,379
在我们开始构建自己的解决方案之前
And before we begin to build some of our own solutions

917
00:47:17,380 --> 00:47:23,920
在此基础架构之上，现在有任何问题或对HTTP的困惑
on top of this infrastructure, any questions now or confusion on HTTP

918
00:47:23,920 --> 00:47:30,460
或状态码或我们到目前为止看到的任何内容？
or status codes or anything we've seen thus far?

919
00:47:30,460 --> 00:47:31,540
没事吗
Anything at all?

920
00:47:31,539 --> 00:47:34,519
是的，去圣地亚哥。
Yeah, over to Santiago.

921
00:47:34,519 --> 00:47:38,989
听众：例如，当您要发布网页时，
AUDIENCE: When you want to, for example, publish a web page,

922
00:47:38,989 --> 00:47:41,459
为什么必须购买域名？
why is it that you have to buy a domain name?

923
00:47:41,460 --> 00:47:44,523
那是因为您在某台服务器上使用内存吗？
Is that because you're using memory in some server?

924
00:47:44,523 --> 00:47:46,690
DAVID J. MALAN：是的，这是一个非常好的问题。
DAVID J. MALAN: Yeah, that's a really good question.

925
00:47:46,690 --> 00:47:48,860
为什么要购买域名？
Why do you have to buy a domain name?

926
00:47:48,860 --> 00:47:52,040
老实说，这归结为资本主义。
It kind of boils down to capitalism, to be honest.

927
00:47:52,039 --> 00:47:54,839
运行某些方面的成本为非零
There is a non-zero cost to running certain aspects

928
00:47:54,840 --> 00:47:57,590
当然，或者实际上是互联网的各个方面。
of the internet, certainly, or really all aspects of the internet.

929
00:47:57,590 --> 00:48:00,085
有一些非营利组织和志愿者-
There are some nonprofit and volunteers--

930
00:48:00,085 --> 00:48:02,960
历史上曾帮助过的非营利组织和志愿者
non-profit organizations and volunteers that have historically helped

931
00:48:02,960 --> 00:48:03,500
治理它。
govern it.

932
00:48:03,500 --> 00:48:07,459
但是，越来越多的互联网运营费用越来越高，
Increasingly, though, there's overhead to operationalizing the internet,

933
00:48:07,460 --> 00:48:10,610
运行诸如主要DNS服务器之类的功能和其他功能。
running things like the main DNS servers and other features.

934
00:48:10,610 --> 00:48:14,120
因此，有很多所谓的互联网注册商
And so there are what are called internet registrars, much

935
00:48:14,119 --> 00:48:16,789
就像大学注册员一样，他的人生目标
like a university registrar, whose purpose in life

936
00:48:16,789 --> 00:48:21,709
实质上是允许人们每年租用域名。
is to allow people to essentially rent domain names on an annual basis.

937
00:48:21,710 --> 00:48:24,710
确实，当您购买域名时，它不是永久的。
And indeed, when you buy a domain name, it's not yours permanently.

938
00:48:24,710 --> 00:48:28,030
取而代之的是，您只需支付一次年费-
Instead, you're paying a yearly fee once--

939
00:48:28,030 --> 00:48:30,920
每隔一两年或三年等收取续订费。
a renewal fee every one or two or three years or the like.

940
00:48:30,920 --> 00:48:33,350
可能从几美元到几百美元不等
It might range from a couple of dollars to hundreds

941
00:48:33,349 --> 00:48:35,119
甚至数千美元。
or even thousands of dollars.

942
00:48:35,119 --> 00:48:38,299
我们可以深入探讨域名抢注问题，
We can go down the rabbit hole talking about domain name squatting, whereby

943
00:48:38,300 --> 00:48:41,600
如果您想到了一个很酷的词，然后购买了域名和某人
if you think of a really cool word and you buy the domain name and someone

944
00:48:41,599 --> 00:48:44,059
还有其他人想要它，有资本主义在起作用
else comes along and wants it, there's capitalism at play

945
00:48:44,059 --> 00:48:46,249
在那里，可能为您带来机会
there, potentially an opportunity for you

946
00:48:46,250 --> 00:48:48,410
将域名出售给其他人。
to sell a domain name to someone else.

947
00:48:48,409 --> 00:48:53,269
但在某种程度上，它可以帮助您准确规定哪些人可以注册
But in part, it helps just regulate exactly who can sign up

948
00:48:53,269 --> 00:48:55,789
域名，可能会带来一些下行压力
for domain names and presumably put some downward pressure

949
00:48:55,789 --> 00:48:59,329
如果您可以免费注册尽可能多的内容，那么所有这些内容都将消失
on all of them just disappearing if you could just sign up for free for as many

950
00:48:59,329 --> 00:49:00,649
如你所愿。
as you want.

951
00:49:00,650 --> 00:49:04,130
其他问题或澄清不只是
Other questions or clarifications on not just

952
00:49:04,130 --> 00:49:11,167
HTTP，还有TCP，IP，DNS或今天的字母汤中的其他内容？
HTTP but also TCP, IP, DNS, or anything else from today's alphabet soup?

953
00:49:11,166 --> 00:49:12,749
布莱恩·于：聊天中有一个问题。
BRIAN YU: A question came in the chat.

954
00:49:12,750 --> 00:49:15,479
如果您要从一个地方发送多个数据包
If you have multiple packets that you're trying to send from one place

955
00:49:15,480 --> 00:49:18,090
彼此，是否必须一个接一个地将它们发送出去，
to the other, do they have to be sent out one after the other,

956
00:49:18,090 --> 00:49:20,280
还是可以同时发送所有数据包？
or can you send all of the packets out at the same time?

957
00:49:20,280 --> 00:49:21,822
DAVID J. MALAN：很好的问题。
DAVID J. MALAN: Really good question.

958
00:49:21,822 --> 00:49:26,400
我们不认为我们的人类在编排方面可以很好地做到这一点
We did not think that we humans could do that very well choreographically using

959
00:49:26,400 --> 00:49:32,430
放大一下，所以我们一次通过教学人员发送了一个小包。
Zoom a bit ago, so we sent one packet a time through the teaching fellows.

960
00:49:32,429 --> 00:49:35,309
但是，是的，计算机通常会转储所有这些数据包
But yes, a computer would typically dump all of those packets

961
00:49:35,309 --> 00:49:36,369
在同一时间。
out at the same time.

962
00:49:36,369 --> 00:49:38,309
它们将一个接一个地序列化，
They would be serialized one after the other,

963
00:49:38,309 --> 00:49:39,759
但很快就会发生。
but it would happen very quickly.

964
00:49:39,760 --> 00:49:41,910
偶然地，他们可能都走同一条路
And by chance, they might all follow the same route

965
00:49:41,909 --> 00:49:44,069
通过教学人员作为路由器，或者
through the teaching fellows as routers, or they

966
00:49:44,070 --> 00:49:46,830
可能会朝着不同的方向前进，具体取决于拥挤程度
might go in different directions depending on just how congested

967
00:49:46,829 --> 00:49:49,619
或当时互联网的繁忙程度。
or how busy the internet is at that moment in time.

968
00:49:49,619 --> 00:49:52,319
他们可能会乱序到达，但实际上，那是
They might arrive out of order, but indeed, that's

969
00:49:52,320 --> 00:49:54,690
为什么Brian需要知道序列号是什么
why Brian needs to know what the sequence number is

970
00:49:54,690 --> 00:49:59,290
在信封的外面，这样他就可以按照正确的顺序重新排列它们。
on the outside of the envelope so he can rearrange them in the correct order.

971
00:49:59,289 --> 00:50:02,229
你还有其他事吗，布莱恩？
Anything else on your end, Brian?

972
00:50:02,230 --> 00:50:04,150
布莱恩·于：养根人怎么知道
BRIAN YU: How do the rooters know which way

973
00:50:04,150 --> 00:50:05,738
发送任何特定的数据包？
to send any particular packet of data?

974
00:50:05,737 --> 00:50:07,279
DAVID J. MALAN：很好的问题。
DAVID J. MALAN: Really good question.

975
00:50:07,280 --> 00:50:08,280
路由器如何知道？
How do the routers know?

976
00:50:08,280 --> 00:50:13,240
所以回到过去-在某些情况下，它实际上是硬编码的。
So back in the day-- and in some cases, it's literally hardcoded.

977
00:50:13,239 --> 00:50:16,779
您可以认为路由器本质上是一个Excel电子表格
You can think of a router as having essentially an Excel spreadsheet

978
00:50:16,780 --> 00:50:20,050
在其内存中至少有两列，其中一列
in its memory with at least two columns, one of which

979
00:50:20,050 --> 00:50:24,400
是一个IP地址，另一个是它应该发出的方向，
is an IP address, the other of which is the direction it should go out on,

980
00:50:24,400 --> 00:50:25,893
像右，左，上和下。
like right, left, up and down.

981
00:50:25,893 --> 00:50:28,810
就像，电缆不会在四个不同的方向上走，
Like, the cables aren't going in four different directions, certainly,

982
00:50:28,809 --> 00:50:31,239
但您可以通过这种方式来隐喻地思考它。
but you can think of it in-- metaphorically, in that way.

983
00:50:31,239 --> 00:50:35,299
它告诉路由器，如果您收到此IP地址的数据，
It tells the router that if you receive data for this IP address,

984
00:50:35,300 --> 00:50:37,807
通过此电缆将其发送出去，或者如果用于此IP地址，
send it out on this cable, or if it's for this IP address,

985
00:50:37,806 --> 00:50:38,889
通过电缆将其发送出去。
send it out on that cable.

986
00:50:38,889 --> 00:50:41,859
所有这些电缆都连接到其他路由器
And all of these cables are connected to other routers

987
00:50:41,860 --> 00:50:44,680
在同一个城市，在不同的城市，在大洋彼岸，
in the same city, in different cities, across an ocean,

988
00:50:44,679 --> 00:50:46,329
到其他端点。
to some other endpoint.

989
00:50:46,329 --> 00:50:48,339
但是，如果人类
That would be very painful, though, if humans

990
00:50:48,340 --> 00:50:51,200
必须手动配置所有互连
had to manually configure all of the interconnections

991
00:50:51,199 --> 00:50:53,269
我们刚刚在麻省理工学院的地图上看到的。
we saw on MIT's map just a bit ago.

992
00:50:53,269 --> 00:50:55,082
因此，事实证明还有其他协议
And so it turns out there's other protocols

993
00:50:55,083 --> 00:50:57,250
在那里我们不会花时间在这堂课上，
out there that we won't spend time on in this class,

994
00:50:57,250 --> 00:51:02,110
但是路由器要依靠它才能动态适应。
but that routers rely on in order to dynamically adapt.

995
00:51:02,110 --> 00:51:04,150
长话短说，有些协议
So long story short, there are protocols that

996
00:51:04,150 --> 00:51:07,060
会突然发现我的包裹
will figure out if all of a sudden my packets

997
00:51:07,059 --> 00:51:09,279
没有联系布莱恩，我要去
are not getting through to Brian, I'm going

998
00:51:09,280 --> 00:51:11,230
开始围绕它动态地路由，
to start routing around that, dynamically,

999
00:51:11,230 --> 00:51:12,940
路由器会找出来，那不是
and the routers are going to figure out, that does not

1000
00:51:12,940 --> 00:51:15,880
似乎是个好去处，因为我没有收到任何回应，
seem to be a good destination because I'm not getting any response,

1001
00:51:15,880 --> 00:51:18,150
否则会花很长时间才能听到回音。
or it's just taking way too long to hear back.

1002
00:51:18,150 --> 00:51:19,900
因此，有一些协议可以控制您
So there are protocols that govern how you

1003
00:51:19,900 --> 00:51:24,280
可以决定是否开始动态更改那些所谓的路由
can decide whether to start dynamically changing those so-called routing

1004
00:51:24,280 --> 00:51:28,210
表格，这是我之前提到的电子表格。
tables, the spreadsheet to which I referred earlier.

1005
00:51:28,210 --> 00:51:31,750
好吧，现在我们已经有了一个已知的基础架构
All right, so we have now, at this point, an infrastructure known

1006
00:51:31,750 --> 00:51:35,350
作为允许我们从A点发送信息包的互联网
as the internet that allows us to send packets of information from point A

1007
00:51:35,349 --> 00:51:38,042
通过写地址和端口号指向B点
to point B by writing addresses and port numbers

1008
00:51:38,043 --> 00:51:39,460
在那些信封的外面。
on the outside of those envelopes.

1009
00:51:39,460 --> 00:51:42,820
我们还有另一种称为HTTP的协议
We have another protocol called HTTP which is specifically

1010
00:51:42,820 --> 00:51:46,960
用于Web浏览器和Web服务器，与视频会议分开
used for web browsers and web servers, separate from videoconferencing

1011
00:51:46,960 --> 00:51:49,780
和聊天，它们有自己的一套约定和协议，
and chat, which have their own set of conventions and protocols,

1012
00:51:49,780 --> 00:51:51,670
但我们有一种获取机制-
but we have a mechanism for get--

1013
00:51:51,670 --> 00:51:54,610
请求信息并以信息响应。
requesting information and responding with information.

1014
00:51:54,610 --> 00:51:59,020
我们从问题集4中知道如何与猫交往。
And we know from problem set 4 how you can respond with a cat.

1015
00:51:59,019 --> 00:52:00,909
无论是
It's just a sequence of bits, whether it's

1016
00:52:00,909 --> 00:52:03,759
位图或jpg或其他内容，但我们还没有
a bitmap or a jpg or something else, but we haven't yet

1017
00:52:03,760 --> 00:52:05,830
看到了实际页面的外观。
seen what an actual page looks like.

1018
00:52:05,829 --> 00:52:08,919
确实，如果我们在信封中看起来更深一点
And indeed, if we look a little deeper in the envelope

1019
00:52:08,920 --> 00:52:11,205
我要寄给Brian，而他要寄给我
that I'm sending to Brian and he's sending to me

1020
00:52:11,204 --> 00:52:14,079
我们从哈佛回来，我们从耶鲁回来，
and we're getting back from Harvard and we're getting back from Yale,

1021
00:52:14,079 --> 00:52:16,169
我们将完全看到另一种语言。
we're going to see another language altogether.

1022
00:52:16,170 --> 00:52:17,590
本质上，它不是编程语言。
It's not a programming language, per se.

1023
00:52:17,590 --> 00:52:19,540
这就是所谓的标记语言
It's what's known as a markup language, which

1024
00:52:19,539 --> 00:52:22,309
只是意味着它更多地是关于美学，而不是逻辑。
just means it's more about aesthetics than it is about logic.

1025
00:52:22,309 --> 00:52:25,351
还有另外几种其他语言，CSS，
And there's going to be a couple of other languages tucked in there, CSS,

1026
00:52:25,351 --> 00:52:28,509
级联样式表，JavaScript，这是一种适当的编程语言。
Cascading Style Sheets, JavaScript, which is a proper programming language.

1027
00:52:28,510 --> 00:52:30,718
但是，让我们继续前进，在这里休息五分钟。
But let's go ahead and take a five-minute break here.

1028
00:52:30,717 --> 00:52:34,829
当我们回来时，我们将学习如何制作网页。
And when we come back, we'll learn to make web pages themselves.

1029
00:52:34,829 --> 00:52:35,679
好的。
All right.

1030
00:52:35,679 --> 00:52:40,919
因此，当您访问一个请求主页或特定文件的网站时
So when you visit a website requesting the home page or a specific file

1031
00:52:40,920 --> 00:52:44,460
在网站上，实际上是虚拟信封中的内容
on the website, exactly what is inside of the virtual envelope

1032
00:52:44,460 --> 00:52:47,340
在HTTP标头下方更深一点
a little deeper down below the HTTP headers

1033
00:52:47,340 --> 00:52:48,810
你从服务器回来了吗？
that you get back from the server?

1034
00:52:48,809 --> 00:52:52,057
嗯，这种语言被称为HTML，超文本标记
Well, that language is known as HTML, HyperText Markup

1035
00:52:52,057 --> 00:52:53,849
语言，实际上不是编程语言
Language, which indeed is not a programming

1036
00:52:53,849 --> 00:52:55,649
语言，这意味着没有循环。
language, which means there's no loops.

1037
00:52:55,650 --> 00:52:56,790
没有条件
There's no conditions.

1038
00:52:56,789 --> 00:52:59,009
本身没有函数或变量。
There's no functions or variables per se.

1039
00:52:59,010 --> 00:53:03,220
只是文字从浏览器的顶部到底部相当整洁地告诉浏览器，
It's just text that tells a browser fairly pedantically, top to bottom,

1040
00:53:03,219 --> 00:53:06,269
从左到右，显示什么以及如何显示。
left to right, what to display and how.

1041
00:53:06,269 --> 00:53:08,109
因此，让我们看一些示例。
So let's take a look at some examples.

1042
00:53:08,110 --> 00:53:12,210
HTML页面中实际上将包含两个不同的概念，
An HTML page is going to contain really two different concepts inside of it,

1043
00:53:12,210 --> 00:53:15,635
我们称之为标签或元素以及属性的东西。
what we'll call tags or elements, and also attributes.

1044
00:53:15,635 --> 00:53:16,510
好吧，那是什么？
Well, what are those?

1045
00:53:16,510 --> 00:53:19,530
好吧，这也许是我们可以制作的最简单的网页。
Well, here is perhaps the simplest web page we can make.

1046
00:53:19,530 --> 00:53:21,600
这就是HTML本身。
And this is HTML itself.

1047
00:53:21,599 --> 00:53:25,499
您会看到它以一种对称的方式构造。
And you'll see that it's structured in kind of a symmetric way.

1048
00:53:25,500 --> 00:53:28,484
缩进一些东西，就像使用正确的编程语言一样，
Some things are indented like in a proper programming language,

1049
00:53:28,485 --> 00:53:30,610
但是这里发生的事情有些对称。
but there is some symmetry to what's going on here.

1050
00:53:30,610 --> 00:53:34,380
因此，让我们从上至下逐一地逗弄我们在这里要看的内容。
So let's tease apart top to bottom exactly what we're looking at here.

1051
00:53:34,380 --> 00:53:37,920
这第一行称为文档类型声明。
This very first line is known as a document type declaration.

1052
00:53:37,920 --> 00:53:40,410
长话短说，每当制作现代网页时，
Long story short, whenever making a modern web page,

1053
00:53:40,409 --> 00:53:44,099
无论如何，这都应该只是文件的第一行。
this should just be the very first line of your file, no matter what.

1054
00:53:44,099 --> 00:53:46,319
它表示您和我正在使用最新的
It signifies that you and I are using the latest

1055
00:53:46,320 --> 00:53:48,570
HTML版本，即版本5。
version of HTML, which is version 5.

1056
00:53:48,570 --> 00:53:52,440
将来，这行可能会随着HTML本身，语言，
In the future, this line will probably change as HTML itself, the language,

1057
00:53:52,440 --> 00:53:55,110
随着人类为其添加越来越多的功能而不断发展。
evolves as humans add more and more features to it.

1058
00:53:55,110 --> 00:53:59,070
请注意，在此之下是一对我们称之为标签的东西。
Below that, notice, is a pair of what we're going to call tags.

1059
00:53:59,070 --> 00:54:04,230
标签是括号之间的东西，以HTML之类的词开头
Tags are things between open brackets that start with a word like HTML

1060
00:54:04,230 --> 00:54:06,810
或诸如此类的简洁短语
or some succinct phrase like that, optionally

1061
00:54:06,809 --> 00:54:09,029
像这个词和等号
with something like this word and an equal sign

1062
00:54:09,030 --> 00:54:10,960
在那之后可能还有引号。
and maybe something in quotes after that.

1063
00:54:10,960 --> 00:54:14,550
但是这里以黄色突出显示的是我们的第一个HTML标签。
But highlighted in yellow here is the first of our HTML tags.

1064
00:54:14,550 --> 00:54:17,940
碰巧的是，这个标签是HTML标签。
And coincidentally, this tag is the HTML tag.

1065
00:54:17,940 --> 00:54:19,620
其工作方式如下。
And the way it works is as follows.

1066
00:54:19,619 --> 00:54:23,669
当浏览器收到包含这样的文本的信封时，
When a browser receives an envelope containing text like this,

1067
00:54:23,670 --> 00:54:28,320
它首先读取第一行并说“确定”，该文件包含HTML版本5。
it first reads that first line and says OK, this file contains HTML version 5.

1068
00:54:28,320 --> 00:54:30,010
会发生什么呢？
What comes after it?

1069
00:54:30,010 --> 00:54:33,000
哦，这是网页的内容。
Oh, here is the content of the web page.

1070
00:54:33,000 --> 00:54:35,759
它说，嘿，浏览器，这里有一些HTML。
It says, hey, browser, here comes some HTML.

1071
00:54:35,760 --> 00:54:38,890
请注意，此处与该声明相反。
Notice down here is the opposite of that statement.

1072
00:54:38,889 --> 00:54:42,719
当您到达该文件的末尾时，您会看到一个外观类似的标签，
When you get to the end of this file, you'll see a similar-looking tag,

1073
00:54:42,719 --> 00:54:46,049
但是同一单词HTML前面有一个斜杠。
but there's a forward slash front of the same word, HTML.

1074
00:54:46,050 --> 00:54:49,830
如果我们将其称为开放标签，则将其称为封闭标签。
That's what we'll call a close tag if we think of this as an open tag.

1075
00:54:49,829 --> 00:54:52,649
或者，如果您将其视为开始标签，则这是结束标签。
Or if you think of this as a start tag, this is an end tag.

1076
00:54:52,650 --> 00:54:56,280
而且大多数标签确实具有这种对称性，因此当您打开它们一次时，
And most tags indeed have that symmetry whereby when you open them once,

1077
00:54:56,280 --> 00:54:59,800
您最终应该以适当的顺序关闭它们。
you should eventually close them, ideally in the appropriate order.

1078
00:54:59,800 --> 00:55:01,950
请注意，您不必重复其他内容。
Notice that you don't have to repeat other stuff.

1079
00:55:01,949 --> 00:55:04,229
关闭标签时，您刚刚提到了名称
When you close a tag, you just mentioned the name

1080
00:55:04,230 --> 00:55:06,000
标签以使其相当简洁。
of the tag to keep it fairly succinct.

1081
00:55:06,000 --> 00:55:08,879
这就是说，浏览器，就是HTML的代码。
And that means, hey, browser, that's it for the HTML.

1082
00:55:08,880 --> 00:55:10,290
好吧，里面有什么？
All right, what's inside of that?

1083
00:55:10,289 --> 00:55:13,719
如果我们往下看，您会发现这里有东西，
If we look down below this, you'll see that there's this thing here,

1084
00:55:13,719 --> 00:55:15,719
这就是所谓的属性。
which is what's going to be called an attribute.

1085
00:55:15,719 --> 00:55:18,509
属性往往是简短，简洁的短语，
Attributes tend to be short, succinct phrases that

1086
00:55:18,510 --> 00:55:21,000
该特定标签具有某些特殊含义。
have some special meaning for that particular tag.

1087
00:55:21,000 --> 00:55:24,299
如果您阅读了该语言的文档，则此特殊属性
This particular attribute, if you read the documentation for the language

1088
00:55:24,300 --> 00:55:29,130
HTML，会说，如果您添加lang = quote-unquote“ something”
HTML, will say that if you add lang= quote-unquote "something"

1089
00:55:29,130 --> 00:55:32,670
到您的HTML标记，这将是浏览器的提示，“嘿，
to your HTML tag, that's going to be a clue to the browser that says, hey,

1090
00:55:32,670 --> 00:55:35,670
浏览器，HTML来了，顺便说一句，
browser, here comes HTML, and by the way,

1091
00:55:35,670 --> 00:55:38,910
该网页的内容将使用英语，
the contents of this web page are going to be in English,

1092
00:55:38,909 --> 00:55:41,279
至少在这种情况下，默认情况下，对于en。
at least in this case, by default, for en.

1093
00:55:41,280 --> 00:55:44,610
世界上每种语言都有自己的两位数或三位数-三
Every language in the world has its own two-digit or three-digit-- three

1094
00:55:44,610 --> 00:55:46,980
字符-两个字符或三个字符的代码
character-- two-character or three-character code

1095
00:55:46,980 --> 00:55:50,963
可以放置在这些引号内，从而准确地进行标准化
that can be placed inside these quotes that will standardize exactly

1096
00:55:50,963 --> 00:55:52,380
浏览器将其解释为什么。
what the browser interprets it as.

1097
00:55:52,380 --> 00:55:55,500
这几天很有用，如果您在浏览器中启用了翻译功能。
Useful these days if you have translation enabled in your browser.

1098
00:55:55,500 --> 00:55:57,629
它知道页面是用哪种语言编写的
It knows what language the page is written in so

1099
00:55:57,630 --> 00:56:00,660
它可以帮助您将其翻译成您自己的口头语言。
that it can help you translate it to your own spoken language.

1100
00:56:00,659 --> 00:56:03,779
好吧，在那下面有两套
All right, below that, there's two sets--

1101
00:56:03,780 --> 00:56:07,540
两对标签，此处为head标签，此处为body标签。
two pairs of tags, the head tag here and the body tag here.

1102
00:56:07,539 --> 00:56:09,539
我同时强调了他们两个，
And I've highlighted them both at the same time,

1103
00:56:09,539 --> 00:56:13,749
因为您可以将它们视为HTML标记的两个子代。
because you can think of these as both children of the HTML tag.

1104
00:56:13,750 --> 00:56:18,669
因此，如果我们在这里借用家谱和某种层次结构的隐喻。
So if we borrow our metaphor of a family tree and some kind of hierarchy here.

1105
00:56:18,670 --> 00:56:23,340
如果您认为HTML标记像父标记，那么可以这么说，
If you think of the HTML tag as being like the parent, so to speak,

1106
00:56:23,340 --> 00:56:27,690
这个父母有两个孩子，一个是头标签，另一个是身体标签，每个孩子
this parent has two children, a head tag and a body tag, each of which

1107
00:56:27,690 --> 00:56:29,460
分别打开和关闭。
is respectively opened and closed.

1108
00:56:29,460 --> 00:56:31,470
让我们考虑第一个，即head标签。
Let's consider the first one, the head tag.

1109
00:56:31,469 --> 00:56:33,489
可以这么说吗？
What's inside of that, so to speak?

1110
00:56:33,489 --> 00:56:37,589
里面是标题标签，您现在可能已经猜到了
Inside of that is the title tag which as you might guess by now

1111
00:56:37,590 --> 00:56:40,530
将代表我们正在编写的网页的标题。
is going to represent the title of the web page we're writing.

1112
00:56:40,530 --> 00:56:43,410
具体来说，该网页的标题将字面上是-
Specifically, the title of this web page is going to be literally--

1113
00:56:43,409 --> 00:56:45,029
只是愚蠢地-
and just goofily--

1114
00:56:45,030 --> 00:56:46,530
你好逗号标题。
hello comma title.

1115
00:56:46,530 --> 00:56:49,620
这就是您在此页面的标签中看到的内容。
So that's what you would see in the tab of this page.

1116
00:56:49,619 --> 00:56:53,339
让我们备份一下，现在来看一下HTML标记的第二个子项，
Let's back up a little bit and look now with the second child of the HTML tag,

1117
00:56:53,340 --> 00:56:54,600
所谓的身体标签。
the so-called body tag.

1118
00:56:54,599 --> 00:56:57,749
这将是网页的大矩形区域，
This is going to be the big, rectangular region of the web page,

1119
00:56:57,750 --> 00:56:59,729
否则称为主体或视口。
otherwise known as the body or viewport.

1120
00:56:59,730 --> 00:57:03,600
在这里，我们看到页面的矩形区域的内容
And here, we see that the contents of that rectangular region of the page

1121
00:57:03,599 --> 00:57:06,009
字面上将是逗号您好。
is going to be literally hello comma body.

1122
00:57:06,010 --> 00:57:11,820
这就是说这是一个相当简单的页面的HTML，其标题栏
So that is to say this is the HTML for a fairly simplistic page whose title bar

1123
00:57:11,820 --> 00:57:14,460
在选项卡中是您好逗号标题及其
in the tab is hello comma title and whose

1124
00:57:14,460 --> 00:57:19,380
大矩形区域中的body只是简单的问号逗号。
body in the big rectangular region is quite simply hello comma body.

1125
00:57:19,380 --> 00:57:22,800
现在明确指出可能会有所帮助
And it's perhaps helpful now to call out explicitly

1126
00:57:22,800 --> 00:57:26,520
我们可以在大约第5周将其视为真正的数据结构。
that we can think of this, a la week 5, as really a data structure.

1127
00:57:26,519 --> 00:57:30,059
即使只是信封中的文字也可以阅读
Even though it's just text inside of that envelope that gets read top

1128
00:57:30,059 --> 00:57:33,029
从下到左，从左到右，实际上是什么浏览器
to bottom, left to right, what the browser is actually

1129
00:57:33,030 --> 00:57:35,680
打算在笔记本电脑，台式机或手机上使用
going to do on your laptop or desktop or phone

1130
00:57:35,679 --> 00:57:38,199
实际上是在内存中建立数据结构。
is actually build a data structure in memory.

1131
00:57:38,199 --> 00:57:40,809
因此，撰写Edge的Microsoft或Google，
So Microsoft, who wrote Edge, or Google, who

1132
00:57:40,809 --> 00:57:44,379
写了Chrome，或者写了Safari的Apple，写了
wrote Chrome, or Apple who wrote Safari, wrote

1133
00:57:44,380 --> 00:57:48,910
从上到下，从左到右读取HTML的代码，例如长而大的字符串，
code that reads HTML top to bottom, left to right, like a big, long string,

1134
00:57:48,909 --> 00:57:52,689
解析它（即分析它）并建立到计算机的内存中
parses it-- that is, analyzes it-- and builds up into the computer's memory

1135
00:57:52,690 --> 00:57:56,050
像这样的树状数据结构，非常类似于问题集5，
a tree-like data structure like this, much like for problem set 5,

1136
00:57:56,050 --> 00:57:59,860
您在内存中建立了自己的哈希表，否则
you built up your own hash table in memory for what was otherwise

1137
00:57:59,860 --> 00:58:02,260
只是一个很大的文字文件。
just a big text file of words.

1138
00:58:02,260 --> 00:58:03,830
因此，您可以在此处查看层次结构。
So you can see the hierarchy here.

1139
00:58:03,829 --> 00:58:06,459
如果您认为整个文件都是所谓的文档，
If you think of the whole file as being a so-called document,

1140
00:58:06,460 --> 00:58:09,580
可以这么说，我们将在此树中绘制一个节点。
we'll draw a node, so to speak, in this tree here.

1141
00:58:09,579 --> 00:58:12,819
HTML标记是它的第一个也是唯一的子标记。
The very first and only child of that is the HTML tag.

1142
00:58:12,820 --> 00:58:15,580
实际上，每个页面都必须以该HTML标记开头。
Indeed, every page has to start with that HTML tag.

1143
00:58:15,579 --> 00:58:19,279
正如我所建议的，它有两个孩子，分别是头部和身体。
It has two children, as I proposed, head and body respectively.

1144
00:58:19,280 --> 00:58:23,990
然后头有一个有头衔的孩子，而这个孩子本身也有一个孩子，
And then head has a title child, and that has a child itself,

1145
00:58:23,989 --> 00:58:24,999
这只是文字。
which is just text.

1146
00:58:25,000 --> 00:58:28,600
为了有点挑剔，我特意画了这些节点
And just to be a little nit-picky, I've deliberately drawn these nodes

1147
00:58:28,599 --> 00:58:33,879
以稍微不同的形状表示HTML，标题，标题，
in slightly different shapes just to connote that HTML, head, title,

1148
00:58:33,880 --> 00:58:38,680
和主体确实都是打开和关闭的标签。
and body are indeed all tags, opened and closed.

1149
00:58:38,679 --> 00:58:41,109
这些椭圆形只是文字。
These ovals here are just text.

1150
00:58:41,110 --> 00:58:42,970
那些不在-
Those are not inside of--

1151
00:58:42,969 --> 00:58:44,499
这些本身不是标签。
those are not tags themselves.

1152
00:58:44,500 --> 00:58:46,540
这只是这里和这里的原始文本。
That's just raw text here and here.

1153
00:58:46,539 --> 00:58:48,969
然后文档节点是一个随机的节点。
And then the document node is the one random one.

1154
00:58:48,969 --> 00:58:52,629
这是唯一从感叹号开始的事情，
This is the only thing that's going to start with an exclamation point,

1155
00:58:52,630 --> 00:58:55,240
通常，除非您有我们所谓的评论
typically, unless you have what we'll call comments

1156
00:58:55,239 --> 00:58:58,689
在HTML中，这只是我们在C和Python中看到的关于self的注释。
in HTML, which are just notes to self that we saw in C and in Python.

1157
00:58:58,690 --> 00:59:01,250
这些有类似的语法。
There's similar syntax for those.

1158
00:59:01,250 --> 00:59:01,750
好的。
All right.

1159
00:59:01,750 --> 00:59:05,500
话虽如此，如果这是我们可以制作的最简单的网页，
With that said, if this is the simplest web page we can make,

1160
00:59:05,500 --> 00:59:06,580
我们在哪里做？
where do we make it?

1161
00:59:06,579 --> 00:59:07,329
我们如何做到的？
How do we make it?

1162
00:59:07,329 --> 00:59:09,999
因此，您当然可以打开Mac或PC
So you could certainly just open up your Mac or PC

1163
00:59:10,000 --> 00:59:12,910
并打开诸如Text Edit或Notepad.exe之类的文件
and open up something like Text Edit or Notepad.exe

1164
00:59:12,909 --> 00:59:15,399
然后输入，复制并粘贴，保存文件，
and type this out, copy and paste it, save the file,

1165
00:59:15,400 --> 00:59:16,630
并在浏览器中将其打开。
and open it in your browser.

1166
00:59:16,630 --> 00:59:18,797
但这并不是那么有趣，因为如果您只是
But that's not that interesting, because if you just

1167
00:59:18,797 --> 00:59:22,120
将HTML文件保存在Mac或PC上，
save an HTML file on your Mac or PC, you are

1168
00:59:22,119 --> 00:59:25,039
实际上将是世界上唯一可以访问它的人。
going to be literally the only one in the world who can visit it.

1169
00:59:25,039 --> 00:59:28,269
因此，理想情况下，您需要一台可以在其上进行写入和保存的服务器
So ideally, you want a server on which you can write and save

1170
00:59:28,269 --> 00:59:31,539
您的HTML，以便其他人，您的用户，您的客户，
your HTML so that other people, your users, your customers,

1171
00:59:31,539 --> 00:59:34,269
可以通过互联网访问文件。
can visit the file via the internet.

1172
00:59:34,269 --> 00:59:36,369
现在，值得庆幸的是，我们所有人都可以使用工具
Now, thankfully, we all have access to a tool

1173
00:59:36,369 --> 00:59:41,379
已经被称为CS50 IDE，它本身是基于网络的代码编写工具，
already called CS50 IDE, which itself is a web-based tool for writing code,

1174
00:59:41,380 --> 00:59:44,598
而我们现在开始编写的代码恰好是HTML。
and the code we'll start writing now just happens to be in HTML.

1175
00:59:44,597 --> 00:59:45,889
因此，让我继续执行该操作。
So let me go ahead and do that.

1176
00:59:45,889 --> 00:59:48,469
让我继续打开一个新文件。
Let me go ahead and open up a new file.

1177
00:59:48,469 --> 00:59:52,814
我会继续打这个电话，例如hello.html，
I'll go ahead and call this, say, hello.html,

1178
00:59:52,815 --> 00:59:55,960
dot html是常规的文件扩展名，让我继续
dot html being the conventional file extension, and let me just go ahead

1179
00:59:55,960 --> 00:59:57,010
并重新输入。
and retype.

1180
00:59:57,010 --> 01:00:01,150
就是这样！DOCTYPE HTML表示，嘿，浏览器，这是第五版。
That so !DOCTYPE HTML says, hey, browser, here comes version five.

1181
01:00:01,150 --> 01:00:03,850
html lang =“ zh-CN”。
html lang="en".

1182
01:00:03,849 --> 01:00:05,829
现在，请注意IDE正在为我做什么。
And now notice what the IDE is doing for me.

1183
01:00:05,829 --> 01:00:08,467
不论好坏，视您的喜好而定，
For better or for worse, depending on your preferences,

1184
01:00:08,467 --> 01:00:11,259
它会尝试为您完成您的想法，以便您可以
it's going to try to complete your thoughts for you so you can just

1185
01:00:11,260 --> 01:00:11,920
少输入。
type less.

1186
01:00:11,920 --> 01:00:15,760
这越来越成为IDE，集成开发环境，
This is increasingly a feature of IDEs, Integrated Development Environments,

1187
01:00:15,760 --> 01:00:18,005
因为现在我可以输入大约一半的文字。
because now I can type roughly half as much.

1188
01:00:18,005 --> 01:00:20,380
现在，我将继续打开页面的顶部。
Now, I'm going to go ahead and open the head of the page.

1189
01:00:20,380 --> 01:00:22,240
请注意，它已自动关闭。
Notice it got automatically closed.

1190
01:00:22,239 --> 01:00:24,549
我将继续打开页面标题。
I'm going to go ahead and open the title of the page.

1191
01:00:24,550 --> 01:00:27,470
那也将自动关闭。
That will automatically close as well.

1192
01:00:27,469 --> 01:00:30,579
让我继续，然后做一些诸如hello，title之类的事情。
And let me go ahead and just do something like hello, title.

1193
01:00:30,579 --> 01:00:34,989
然后在这里，在头部标签之外，我将贴上我的身体标签
And then down here, outside of the head tag, I'll do my body tag

1194
01:00:34,989 --> 01:00:37,089
并用逗号打个招呼
and do hello comma body.

1195
01:00:37,090 --> 01:00:41,290
现在，严格来说，这种缩进是没有必要的。
Now, strictly speaking, this indentation is not necessary.

1196
01:00:41,289 --> 01:00:44,619
如果我想更简洁一点，而不用那么多行，
If I wanted to be a little more terse and not use this many lines,

1197
01:00:44,619 --> 01:00:46,137
这也是完全合理的。
this is totally reasonable as well.

1198
01:00:46,137 --> 01:00:47,929
在某种程度上，这可能是合理的。
And it's probably reasonable up to a point.

1199
01:00:47,929 --> 01:00:51,669
如果我有一个疯狂的长标题，我可能应该将其移至自己的一行。
If I had a crazy long title, I probably should move it to a line of its own.

1200
01:00:51,670 --> 01:00:54,692
但是同样，这些细节对于计算机而言并不重要，
But again, these details are not going to matter to the computer,

1201
01:00:54,692 --> 01:00:56,650
浏览器阅读此内容，但他们肯定
to the browser reading this, but they certainly

1202
01:00:56,650 --> 01:00:58,570
让我，人类变得更漂亮，更轻松
make it prettier and easier for me, the human,

1203
01:00:58,570 --> 01:01:00,560
大概您也阅读。
and presumably you to read as well.

1204
01:01:00,559 --> 01:01:02,419
因此，我继续并保存了此文件。
So I've gone ahead and saved this file.

1205
01:01:02,420 --> 01:01:05,170
过去，我会像make那样使用C
And in the past, I would have used like make for C

1206
01:01:05,170 --> 01:01:08,530
或将python用于python，但这些都不是
or would have used python for Python, but neither of those

1207
01:01:08,530 --> 01:01:11,200
适用，因为我们不编写或运行代码。
is applicable, because we're not writing or running code.

1208
01:01:11,199 --> 01:01:13,479
我现在想访问该网页。
I now want to visit this web page.

1209
01:01:13,480 --> 01:01:14,660
那我该怎么做呢？
And how do I do that?

1210
01:01:14,659 --> 01:01:16,599
好吧，我需要一个浏览器，并且已经全部安装好了。
Well, I need a browser, and I'm all set there.

1211
01:01:16,599 --> 01:01:19,419
显然，我可以在自己的Mac上使用Chrome，Safari。
Obviously, I can use Chrome, Safari, whatever on my own Mac.

1212
01:01:19,420 --> 01:01:20,740
但是我还需要一台服务器。
But I also need a server.

1213
01:01:20,739 --> 01:01:25,779
事实证明，CS50 IDE早已是一个网络
And it turns out that CS50 IDE, insofar as it is already a web

1214
01:01:25,780 --> 01:01:29,200
我们用来编写代码的服务器，我们可以将其用作网络服务器
server that we use to write code, we can use it as a web server

1215
01:01:29,199 --> 01:01:31,459
同时提供我们的HTML。
to serve our HTML as well.

1216
01:01:31,460 --> 01:01:35,120
不久前，当我扮演网络服务器的角色时，
So a little bit ago, when I played the role of a web server,

1217
01:01:35,119 --> 01:01:37,239
我基本上需要在IDE中实现
I need to essentially implement in the IDE

1218
01:01:37,239 --> 01:01:39,909
同样的想法，只是一些程序
that same notion, of some program that's just

1219
01:01:39,909 --> 01:01:43,209
去听，听，听，就像我在等待布莱恩一样，
going to listen and listen and listen, like I was waiting for Brian,

1220
01:01:43,210 --> 01:01:46,270
每当我收到来自任何人的浏览器的HTTP请求时，
and any time I get an HTTP request from anyone's browser,

1221
01:01:46,269 --> 01:01:48,227
我将使用适当的文件进行响应。
I'm going to respond with the appropriate file.

1222
01:01:48,228 --> 01:01:50,603
现在，我们不会自己实现Web服务器。
Now, we're not going to implement a web server ourselves.

1223
01:01:50,603 --> 01:01:52,510
如今，Web服务器已成为一种商品。
Web servers are kind of commodity these days.

1224
01:01:52,510 --> 01:01:55,210
任何人都可以下载或付款并使用其中之一。
Anyone can just download or pay for one and use one.

1225
01:01:55,210 --> 01:02:00,530
实际上，IDE附带了一个非常简单的http服务器。
And indeed, the IDE comes with one quite simply called http-server.

1226
01:02:00,530 --> 01:02:03,130
因此，这是一个预先安装在IDE中的程序。
So this is a program preinstalled in the IDE.

1227
01:02:03,130 --> 01:02:04,270
它是免费和开源的。
It's free and open source.

1228
01:02:04,269 --> 01:02:06,609
您也可以在Linux，Mac或PC上使用它。
You can use it on Linux or Macs or PCs as well.

1229
01:02:06,610 --> 01:02:08,260
但是它已预先安装在IDE中。
But it's preinstalled in the IDE.

1230
01:02:08,260 --> 01:02:11,530
当我运行它时，对我来说就是开始
And when I run it, what it's going to do for me is start,

1231
01:02:11,530 --> 01:02:13,960
奇怪的是，第二台Web服务器。
curiously, a second web server.

1232
01:02:13,960 --> 01:02:18,230
由于IDE本身已经在CS50自己的Web服务器上运行，
Because the IDE itself is already running on CS50's own web server,

1233
01:02:18,230 --> 01:02:20,950
我现在需要运行自己的服务器。
I need to now run my own server.

1234
01:02:20,949 --> 01:02:23,419
但是为了区分彼此，
But in order to distinguish one from the other,

1235
01:02:23,420 --> 01:02:25,180
我将使用其他端口。
I'm just going to use a different port.

1236
01:02:25,179 --> 01:02:29,769
默认情况下，CS50 IDE使用的端口是此8080。
And by default, the port that the CS50 IDE uses is this one 8080.

1237
01:02:29,769 --> 01:02:33,219
同样，默认情况下，世界上大多数Web服务器
So again, by default, most web servers in the world

1238
01:02:33,219 --> 01:02:38,159
如果不安全，则使用端口80；如果安全，则使用端口443。
use port 80 if insecure and port 443 if secure.

1239
01:02:38,159 --> 01:02:40,989
但是，不幸的是，CS50 IDE已经使用了那些
But those are, unfortunately, already used by CS50 IDE

1240
01:02:40,989 --> 01:02:43,809
本身，已经在CS50的Web服务器上运行。
itself, which is running already on CS50's web server.

1241
01:02:43,809 --> 01:02:48,299
因此，如果我想使用同一台服务器，云中的同一台计算机，
So if I want to use the same server, the same computer in the cloud,

1242
01:02:48,300 --> 01:02:51,480
听我自己的其他要求，我是
to listen for other requests of my own, I'm

1243
01:02:51,480 --> 01:02:54,567
只是要同时启动我自己的第二台Web服务器
just going to start my own second web server in parallel

1244
01:02:54,567 --> 01:02:56,400
只是让它在其他端口上监听。
and just have it listen on a different port.

1245
01:02:56,400 --> 01:02:59,220
只是为了您和我可以运行我们自己的网站
And that's just so that you and I can run our own web

1246
01:02:59,219 --> 01:03:02,219
服务器，即使我们无法控制IDE
server even though we don't have control over the IDE

1247
01:03:02,219 --> 01:03:04,109
本身不在我们自己的帐户之内。
itself outside of our own accounts.

1248
01:03:04,110 --> 01:03:07,020
现在，如果可以的话，这是一个看起来很神秘的主机名。
Now, it's a pretty cryptic looking hostname, if you will.

1249
01:03:07,019 --> 01:03:11,679
这是随机的东西，0cda3813，依此类推。
It's this random thing, 0cda3813 and so forth.

1250
01:03:11,679 --> 01:03:14,429
但归根结底，这只是一个URL。
But at the end of the day, it's just a URL.

1251
01:03:14,429 --> 01:03:18,779
请注意，它以CS50.xyz结尾，这是我们购买的域名
Notice that it ends in CS50.xyz, which is a domain name that we bought

1252
01:03:18,780 --> 01:03:23,670
并且我们仅出于此目的在CS50 IDE上运行Web服务器。
and we use solely for this purpose of running web servers on CS50 IDE.

1253
01:03:23,670 --> 01:03:27,270
因此，如果我继续单击并单击“打开”，瞧，
So if I go ahead and click that and click Open, voila,

1254
01:03:27,269 --> 01:03:32,579
现在，我将看到所有文件的相当神秘的文本列表
I will now see a fairly arcane textual listing of all of the files

1255
01:03:32,579 --> 01:03:35,294
在我刚运行HTTP服务器的文件夹中。
in the folder in which I just ran HTTP server.

1256
01:03:35,295 --> 01:03:37,170
让我继续放大一点，
And let me go ahead and zoom in a little bit,

1257
01:03:37,170 --> 01:03:39,253
您会看到那里只有一个文件
and you'll see that there's only one file on there

1258
01:03:39,253 --> 01:03:41,400
到目前为止，我们已经编写了hello.html。
thus far that we've written, hello.html.

1259
01:03:41,400 --> 01:03:43,500
因此，让我继续单击该文件。
So let me go ahead and click on that file.

1260
01:03:43,500 --> 01:03:46,657
瞧，这是我的第一页，正文。
And voila, there it is, hello, body, my very first page.

1261
01:03:46,657 --> 01:03:49,740
我处于全屏模式，因此看不到标题，但让我继续
I don't see the title because I'm in full-screen mode, but let me go ahead

1262
01:03:49,739 --> 01:03:52,179
并取消全屏显示我自己，当然，
and un-full-screen myself, and sure enough,

1263
01:03:52,179 --> 01:03:58,299
如果我放大此页面标签中的标题，则为逗号逗号。
if I zoom in on the title in the tab of this page, it's hello comma title.

1264
01:03:58,300 --> 01:03:59,760
那么刚刚发生了什么？
So what has just happened?

1265
01:03:59,760 --> 01:04:02,910
我碰巧使用CS50 IDE只是因为它很方便。
I happened to be using CS50 IDE just because it's convenient.

1266
01:04:02,909 --> 01:04:04,739
您和我已经有帐户了。
You and I already have accounts on it.

1267
01:04:04,739 --> 01:04:07,019
我们正在运行我们自己的Web服务器，
We're running our own web server, implementing

1268
01:04:07,019 --> 01:04:10,559
我以前扮演的角色的软件版本。
the software version of the role I was humanly playing earlier.

1269
01:04:10,559 --> 01:04:14,759
我使用的是Chrome浏览器，就像Brian是故事中的浏览器一样
I'm using Chrome as my browser, just like Brian was our browser in the story

1270
01:04:14,760 --> 01:04:15,420
前。
before.

1271
01:04:15,420 --> 01:04:20,340
因此，当我在浏览器栏中访问该长网址时，服务器会告诉我
And so when I visit this long URL in my browser's bar that the server told me

1272
01:04:20,340 --> 01:04:24,840
要访问，请注意它以/hello.html结尾。
to visit, notice that it ends with /hello.html.

1273
01:04:24,840 --> 01:04:29,535
因此，在一个环境中，我都在提供网页并请求网页。
So all in one environment, I'm serving web pages and requesting web pages.

1274
01:04:29,534 --> 01:04:32,159
这是完美的，因为这是真实世界中的软件
And this is perfect, because this is what a real-world software

1275
01:04:32,159 --> 01:04:35,849
开发人员在构建自己的网站或Web应用程序时会做的事情。
developer would do when building their own websites or web applications.

1276
01:04:35,849 --> 01:04:38,549
他们实际上希望将所有内容保留在本地并进行处理
They want to actually keep everything local and work on it

1277
01:04:38,550 --> 01:04:42,360
并继续努力，直到他们准备将其发布给全世界为止。
and work on it until they're ready to release it to the world.

1278
01:04:42,360 --> 01:04:46,560
好吧，让我继续这里，并在此处的标签中指出一件事。
Well, let me go ahead here and point out one thing in the tab here.

1279
01:04:46,559 --> 01:04:49,319
实际上，你们中的一些人非常聪明-实际上，令人惊讶的是，
And in fact, some of you very cleverly are-- actually, amazingly,

1280
01:04:49,320 --> 01:04:52,830
抄录了该URL，因为我现在看到更多的HTTP请求
transcribed that URL, because I'm seeing more HTTP requests coming in right now

1281
01:04:52,829 --> 01:04:53,399
居住。
live.

1282
01:04:53,400 --> 01:04:58,290
请注意，在我运行HTTP服务器的IDE的终端窗口中，
Notice that in the terminal window of my IDE where I ran HTTP server,

1283
01:04:58,289 --> 01:05:02,519
我正在逐行看到请求的到来。
I'm seeing, row by row, the requests coming in.

1284
01:05:02,519 --> 01:05:05,639
所以这有点像日志，因为我的Web服务器仍在运行，
And so this is kind of a log, because my web server is still running,

1285
01:05:05,639 --> 01:05:08,849
如果您真的想再次输入相同的网址，
and if any of you actually want to type out that same URL again,

1286
01:05:08,849 --> 01:05:13,304
如果您在视频中及时倒带，您实际上可以访问我的hello.html文件
if you rewind in time in the video, you can actually visit my hello.html file

1287
01:05:13,304 --> 01:05:15,929
现在在互联网上，假设您正在观看讲座
right now on the internet, assuming you're watching the lecture

1288
01:05:15,929 --> 01:05:19,659
实时运行，并且您可以在此处看到新行出现在我的输出中。
live, and you can see new rows appearing in my output here.

1289
01:05:19,659 --> 01:05:22,101
但这只是说它在诊断上对我们很有用。
But that's just to say it's useful for us diagnostically.

1290
01:05:22,101 --> 01:05:24,809
但是，让我继续执行一下，在这里做一件事。
But let me go ahead and do something else here for just a moment.

1291
01:05:24,809 --> 01:05:27,989
我要继续，稍后，创建另一个文件，
I'm going to go ahead, and in a moment, create another file,

1292
01:05:27,989 --> 01:05:30,969
这次演示其他一些HTML标签。
this time to demonstrate some other HTML tags.

1293
01:05:30,969 --> 01:05:35,849
所以，让我们回到这里，在我的-
So let's go back here and in my--

1294
01:05:35,849 --> 01:05:37,679
我将继续运行终端窗口，
and I'll keep my terminal window running,

1295
01:05:37,679 --> 01:05:39,209
但是我现在并不在乎输出，
but I don't really care about the output now,

1296
01:05:39,210 --> 01:05:41,585
所以我将继续将其最小化。
so I'm just going to go ahead and minimize it down there.

1297
01:05:41,585 --> 01:05:46,140
我将继续在这里创建另一个文件，称为parass.html。
I'm going to go ahead and create another file up here called paragraphs.html.

1298
01:05:46,139 --> 01:05:48,989
让我们看看我们是否不能引入HTML的其他功能。
And let's see if we can't introduce some other features of HTML.

1299
01:05:48,989 --> 01:05:52,199
我将继续输入与以前相同的名称！DOCTYPE HTML，
I'll go ahead and type out the same as before, !DOCTYPE HTML,

1300
01:05:52,199 --> 01:05:55,949
我的HTML标记以及我的lang（英语属性）。
my HTML tag with my lang for English attributes.

1301
01:05:55,949 --> 01:05:59,339
坦白说，有时候，如果我开始思考，IDE会变得很困惑，
Sometimes, admittedly, the IDE will get confused if I start a thought,

1302
01:05:59,340 --> 01:06:01,650
不要完成我的想法，然后尝试再次完成它。
don't finish my thought, then try to finish it again.

1303
01:06:01,650 --> 01:06:02,380
很好。
And that's fine.

1304
01:06:02,380 --> 01:06:05,220
您可能只需要清理IDE试图为您做的事情
You might just have to clean up what the IDE is trying to do for you

1305
01:06:05,219 --> 01:06:06,214
会有所帮助。
to be helpful.

1306
01:06:06,215 --> 01:06:08,340
我将继续在此处创建head标签。
I'm going to go ahead and create the head tag here.

1307
01:06:08,340 --> 01:06:09,923
我要在这里给自己一个标题。
I'm going to give myself a title here.

1308
01:06:09,922 --> 01:06:11,249
我将这个页面称为段落。
I'll call this page paragraphs.

1309
01:06:11,250 --> 01:06:13,500
为了简洁起见，我将其全部放在一行中。
I'll keep it all in one line just to keep it succinct.

1310
01:06:13,500 --> 01:06:15,270
我打开身体。
I'll open up my body.

1311
01:06:15,269 --> 01:06:20,009
现在我要继续输入五个拉丁文本段落
And now I'm going to go ahead and type out five paragraphs of Latin text

1312
01:06:20,010 --> 01:06:22,350
我将继续前进并放在这里。
that I'll just go ahead and put right here.

1313
01:06:22,349 --> 01:06:24,599
让我继续，好好缩进一下
And let me go ahead and indent this nicely just

1314
01:06:24,599 --> 01:06:26,159
使其美观和可读。
to make it nice and readable.

1315
01:06:26,159 --> 01:06:30,179
这是您的lorem ipsum文本，就像拉丁文的废话一样。
This is your lorem ipsum text, which is just Latin-like nonsense.

1316
01:06:30,179 --> 01:06:32,694
现在我有五段文字。
And here I have five paragraphs of text now.

1317
01:06:32,695 --> 01:06:33,570
所以这是不同的。
So this is different.

1318
01:06:33,570 --> 01:06:35,470
不仅是你好，身体。
It's way more than just hello, body.

1319
01:06:35,469 --> 01:06:37,659
因此，让我继续保存该文件。
So let me go ahead and save this file.

1320
01:06:37,659 --> 01:06:40,049
让我回到这里的其他标签。
Let me go back to my other tab here.

1321
01:06:40,050 --> 01:06:43,410
请注意，直到我单击，一切都没有改变
Notice that nothing has changed until I click

1322
01:06:43,409 --> 01:06:47,429
重新加载，这将显示我的文件夹的最新内容。
reload, which will reveal the latest contents of my folder.

1323
01:06:47,429 --> 01:06:49,409
因此，让我单击paragraphs.html，我应该
So let me click paragraphs.html, and I should

1324
01:06:49,409 --> 01:06:53,195
参见类似拉丁文字的五个段落。
see five paragraphs of Latin-like text.

1325
01:06:53,195 --> 01:06:59,839
嗯，不，那是一个很大的烂摊子，一段很长很长。
Huh, no, that's just a big mess, one massive, long paragraph.

1326
01:06:59,840 --> 01:07:03,980
对这里的错误可能有什么直觉？
Any instincts for what the bug here might be?

1327
01:07:03,980 --> 01:07:08,650
关于聊天或举手有什么想法吗？
Any thoughts on the chat or with a raised hand?

1328
01:07:08,650 --> 01:07:10,807
是的，交给瑞安。
Yeah, over to Ryan.

1329
01:07:10,806 --> 01:07:12,639
听众：至少从它的设置方式来看，
AUDIENCE: At least from the way it's set up,

1330
01:07:12,639 --> 01:07:17,139
默认情况下，HTML看起来没有自动行距，
it doesn't look like HTML has auto line spacing by default,

1331
01:07:17,139 --> 01:07:20,469
所以它将全部收集到这个大字符串中
so it's going to collect them all into this one big string

1332
01:07:20,469 --> 01:07:23,879
除非您以某种方式在每个段落之间创建一个空格。
unless you somehow create a space in between each paragraph.

1333
01:07:23,880 --> 01:07:24,880
戴维·J·马兰（David J. MALAN）：好的。
DAVID J. MALAN: Exactly.

1334
01:07:24,880 --> 01:07:28,960
HTML，就像大多数其他计算机语言一样，无论是编程还是其他方式，
HTML, like most any computer language, programming or otherwise,

1335
01:07:28,960 --> 01:07:31,630
从字面上带你去，如果你不告诉
is going to take you literally, and if you don't tell it

1336
01:07:31,630 --> 01:07:34,490
在HTML情况下，如何使用这些标记，
what to do using, in HTML cases, these tags,

1337
01:07:34,489 --> 01:07:37,369
它只会执行一些默认行为。
it's just going to do some default behavior instead.

1338
01:07:37,369 --> 01:07:41,289
因此，让我实际上回到CS50 IDE上-
So let me actually go back to CS50 IDE--

1339
01:07:41,289 --> 01:07:41,949
而且你知道？
and you know?

1340
01:07:41,949 --> 01:07:43,559
让我在这里介绍另一个标签。
Let me introduce another tag here.

1341
01:07:43,559 --> 01:07:45,759
事实证明，有一个称为段落标签的标签。
It turns out there's a tag called the paragraph tag.

1342
01:07:45,760 --> 01:07:48,910
简写形式很简单
And the shorthand notation for that is quite simply

1343
01:07:48,909 --> 01:07:50,514
打开支架p关闭支架。
open bracket p closed bracket.

1344
01:07:50,514 --> 01:07:52,389
IDE会尽力完成我的想法，
The IDE is going to try to finish my thought,

1345
01:07:52,389 --> 01:07:54,097
但是因为我已经有了该段，
but because I already have the paragraph,

1346
01:07:54,097 --> 01:07:56,149
我需要自己手动修复此问题。
I'm going to need to manually fix this myself.

1347
01:07:56,150 --> 01:07:57,860
因此，让我继续打开它。
So let me go ahead and open it there.

1348
01:07:57,860 --> 01:08:00,530
现在让我继续，只插入其中一些。
And let me go ahead now and just insert a few of these.

1349
01:08:00,530 --> 01:08:03,828
所以一个在那里，一个在那里，一个在那里，一个在那里。
So one there, one there, one there, one there.

1350
01:08:03,827 --> 01:08:05,619
让我继续复制close标签。
And let me go ahead and copy the close tag.

1351
01:08:05,619 --> 01:08:09,009
一个在那里，一个在那里，一个在那里，一个在那里。
One there, one there, one there, and one there.

1352
01:08:09,010 --> 01:08:12,190
现在，就风格而言，让我进一步缩进。
And now, let me just, for style's sake, indent further.

1353
01:08:12,190 --> 01:08:14,440
我几乎每隔一周都知道
And I know that pretty much in every past week

1354
01:08:14,440 --> 01:08:16,899
我声称复制粘贴不好-
I've claimed that copy paste is bad--

1355
01:08:16,899 --> 01:08:20,529
HTML并非如此，因为如果您想要多个段落，
not really the case with HTML, because if you want multiple paragraphs,

1356
01:08:20,529 --> 01:08:21,850
没有循环的概念。
there's no notion of a loop.

1357
01:08:21,850 --> 01:08:25,720
您不能仅凭HTML来创建五个类似拉丁文字的段落，
You can't create five paragraphs of Latin-like text with HTML alone,

1358
01:08:25,720 --> 01:08:29,060
因此，在这种情况下，复制粘贴是正确的解决方案。
so copy paste, in this case, is the right solution.

1359
01:08:29,060 --> 01:08:29,560
好的。
All right.

1360
01:08:29,560 --> 01:08:34,038
现在让我继续并返回其他选项卡，然后单击重新加载。
Let me go ahead now and go back to my other tab and now hit reload.

1361
01:08:34,037 --> 01:08:35,829
直到你告诉了一切，一切都不会改变
Nothing's going to change until you tell it

1362
01:08:35,829 --> 01:08:39,309
就像您要重新加载普通网站一样，让我重新加载自己的网站。
to, so just like you would reload a normal website, let me reload my own.

1363
01:08:39,310 --> 01:08:43,479
瞧，我们解决了Ryan现在明确使用的问题
And voila, we fixed the problem that Ryan identified by now explicitly using

1364
01:08:43,479 --> 01:08:44,830
HTML的段落标记。
HTML's paragraph tag.

1365
01:08:44,829 --> 01:08:48,549
这是故意的p标签，因为HTML标签往往很简洁。
And it's deliberately the p tag because HTML tags tend to be succinct.

1366
01:08:48,550 --> 01:08:50,080
输入的字符更少。
It's fewer characters to type.

1367
01:08:50,079 --> 01:08:51,759
我怎么知道它是p标签？
And how do I know it's the p tag?

1368
01:08:51,760 --> 01:08:55,120
您只需要在某个时候，在一堂课，一本书，一个网站中学习它即可。
You just have to learn it at some point, in a class, in a book, in a website.

1369
01:08:55,119 --> 01:08:57,818
确实，就像Python和C一样，
And indeed, much like with Python, as with C, we're

1370
01:08:57,819 --> 01:09:03,310
不想向您教HTML标签的清单
not going to aspire to teach you the laundry list of HTML tags

1371
01:09:03,310 --> 01:09:06,790
和属性，但今天要特别关注
and attributes that are out there, but focus today particularly

1372
01:09:06,789 --> 01:09:08,919
关于概念和基本原理，以便您可以
on concepts and fundamentals so that you can

1373
01:09:08,920 --> 01:09:12,700
通过任意数量的在线资源将您的词汇快速添加到您的词汇表中
add to your vocabulary quite quickly via any number of online resources

1374
01:09:12,699 --> 01:09:13,726
我们会为您指出。
that we'll point you to.

1375
01:09:13,726 --> 01:09:15,309
好吧，让我们继续吧。
All right, let's go ahead and do this.

1376
01:09:15,310 --> 01:09:17,602
让我继续前进，而不是从头开始。
Rather than do everything from scratch, let me go ahead

1377
01:09:17,601 --> 01:09:21,489
并将其复制并创建另一个文件，我将其称为headings.html。
and copy this and create another file that I'll call headings.html.

1378
01:09:21,489 --> 01:09:24,739
当写论文或写或读书时，
When writing a paper or when writing or reading a book,

1379
01:09:24,739 --> 01:09:28,478
有章标题或小节或小节是很常见的
it's very common to have chapter headings or section or subsection

1380
01:09:28,479 --> 01:09:31,265
标题，实际上，您也可以使用HTML来完成此操作。
headings, and indeed, you can do this in HTML as well.

1381
01:09:31,265 --> 01:09:33,640
因此，我将继续介绍更多标签
So I'm going to go ahead and introduce a couple more tags

1382
01:09:33,640 --> 01:09:37,995
在这里，就是H1标签，就像最大的标题标签一样。
here, namely the H1 tag, which is like the biggest heading tag.

1383
01:09:37,994 --> 01:09:40,869
为了保持简单，我将在此处写一个。
And I'm just going to write the word one here just to keep it simple.

1384
01:09:40,869 --> 01:09:43,839
在这里，我要做H2，我要说两个。
Over here, I'm going to do H2, and I'll say two.

1385
01:09:43,840 --> 01:09:47,290
在这里，我要继续说H3，我要说三个。
Down here, I'm going to go ahead and say H3, and I'll say three.

1386
01:09:47,289 --> 01:09:52,599
然后在这里，我将做H4，然后是四个。
And down here, I'll do H4, and then four.

1387
01:09:52,600 --> 01:09:55,630
然后在这里，我将进行H5--
And then down here, I'll do H5--

1388
01:09:55,630 --> 01:09:57,370
在这里，五个。
here, five.

1389
01:09:57,369 --> 01:09:59,899
然后在这里，我已经用完了几段，
And then down here, I've ran out of paragraphs,

1390
01:09:59,899 --> 01:10:03,309
但是有六个，所以我要继续给自己一个副本
but there is a six, so I'm going to go ahead and give myself one duplicated

1391
01:10:03,310 --> 01:10:07,180
只是为了演示的目的，所以我们这里有六个
paragraph just for demonstration's sake so that we have all six here

1392
01:10:07,180 --> 01:10:10,280
并继续保存在那里。
and go ahead and save it there.

1393
01:10:10,279 --> 01:10:10,779
好的。
All right.

1394
01:10:10,779 --> 01:10:15,249
因此，如果我现在回到浏览器并重新加载，它看起来-
So if I go back now to my browser and reload, it's looking--

1395
01:10:15,250 --> 01:10:18,160
因为我输入的文件不正确，所以什么也不会发生，但是如果我返回，
nothing happens because I'm in the wrong file, but if I go back,

1396
01:10:18,159 --> 01:10:20,589
我现在有一个名为headings.html的文件。
I now have a file called headings.html.

1397
01:10:20,590 --> 01:10:21,640
让我们点击它。
Let's click that.

1398
01:10:21,640 --> 01:10:24,790
内容是一样的，但是现在变得更漂亮了，对吗？
And it's the same content, but now, it's getting a little prettier, right?

1399
01:10:24,789 --> 01:10:28,329
这是一个大胆的标题，一，二，三，四-注意
It's big and bold headings, one, two, three, four-- notice

1400
01:10:28,329 --> 01:10:30,319
这些标题越来越小，
those headings are getting smaller and smaller,

1401
01:10:30,319 --> 01:10:32,859
但这是一本书或学术论文中的惯例
but that's the convention in a book or an academic paper

1402
01:10:32,859 --> 01:10:35,679
您的板块，子板块和子板块在哪里
where your sections and subsections and subsubsections, get

1403
01:10:35,680 --> 01:10:36,550
越来越小。
smaller and smaller.

1404
01:10:36,550 --> 01:10:38,800
我们可以根据需要自定义此选项，但是
And we can customize this if we really want, but out

1405
01:10:38,800 --> 01:10:41,740
HTML框使我们能够对事物进行格式化
of the box HTML gives us the ability to even format things

1406
01:10:41,739 --> 01:10:44,249
像这样的标题。
like headings like that as well.

1407
01:10:44,250 --> 01:10:45,860
好吧，我们还能用HTML做什么？
Well, what else can we do in HTML?

1408
01:10:45,859 --> 01:10:47,739
好吧，让我回到我的IDE。
Well, let me go back to my IDE.

1409
01:10:47,739 --> 01:10:50,979
让我继续并复制粘贴其中的一些内容只是为了节省时间。
Let me go ahead and copy paste some of this just to save some time.

1410
01:10:50,979 --> 01:10:55,629
让我创建另一个文件，例如list.html。
And let me create another file called, say, list.html.

1411
01:10:55,630 --> 01:10:58,240
事实证明，HTML使得编写列表变得非常容易。
Turns out HTML makes it really easy to write lists.

1412
01:10:58,239 --> 01:11:00,562
因此，在这里，让我将标题更改为列表。
So here, let me change my title to lists.

1413
01:11:00,563 --> 01:11:02,980
在这里，如果我想列出三件事，
And down here, if I wanted to have a list of three things,

1414
01:11:02,979 --> 01:11:07,269
像foo，bar和baz，它们是通用的计算机科学术语，无论
like foo, bar, and baz, which are generic computer science terms whatever

1415
01:11:07,270 --> 01:11:10,810
您只需要在数学，foo，bar和baz中使用占位符，例如x，y和z
you just need placeholders like x, y, and z in math, foo, bar, and baz

1416
01:11:10,810 --> 01:11:12,250
是人们倾向于追求的目标。
are what people tend to reach for.

1417
01:11:12,250 --> 01:11:14,600
好吧，我那里有一个干净的清单。
All right, I have a nice clean list there.

1418
01:11:14,600 --> 01:11:18,590
让我回到其他标签，回到我的目录索引，
Let me go back to my other tab, go back to my directory index here,

1419
01:11:18,590 --> 01:11:20,075
还有list.html。
and there's list.html.

1420
01:11:20,074 --> 01:11:20,949
我点击一下。
Let me click on that.

1421
01:11:20,949 --> 01:11:24,129
瞧，和赖安（Ryan）所发现的问题一样。
And voila, same problem as Ryan identified.

1422
01:11:24,130 --> 01:11:27,700
同样，如果我不认真地告诉浏览器，请启动一个列表，
Again, if I don't pedantically tell the browser, start a list,

1423
01:11:27,699 --> 01:11:30,069
继续清单，继续前进，结束清单，
continue the list, keep going, end the list,

1424
01:11:30,069 --> 01:11:33,519
只是假设我只想要一大块文字。
it's just going to assume that I just want one big block of text.

1425
01:11:33,520 --> 01:11:35,320
实际上，它保留了空白。
In fact, it preserved white space.

1426
01:11:35,319 --> 01:11:39,189
它将所有这些新行和制表符折叠为单个空格。
It collapsed all of those new lines and tabs into single spaces.

1427
01:11:39,189 --> 01:11:40,669
但这不是我想要的。
But that's not what I want.

1428
01:11:40,670 --> 01:11:41,960
那么我该如何解决呢？
So how can I fix this?

1429
01:11:41,960 --> 01:11:43,430
我需要某种附加标签。
I need some kind of additional tag.

1430
01:11:43,430 --> 01:11:45,430
事实证明，有两种方法。
And it turns out there's a couple of approaches.

1431
01:11:45,430 --> 01:11:49,890
有无序列表标记，例如ul，对于无序列表，
There's the unordered list tag, so ul, for Unordered List,

1432
01:11:49,890 --> 01:11:51,140
这意味着它没有编号。
which means it's not numbered.

1433
01:11:51,140 --> 01:11:58,030
然后，在其中可以包含称为li或List Item的子标记。
And then inside of that, you can have child tags called the li, or List Item.

1434
01:11:58,029 --> 01:12:03,579
Foo，让我再给自己一个吧，再给我一个吧，巴兹。
Foo, let me give myself another one, bar, and give myself another one, baz.

1435
01:12:03,579 --> 01:12:05,709
因此，输入的内容更多，而且肯定有
So it's more to type, and definitely there's

1436
01:12:05,710 --> 01:12:08,260
HTML几乎与红色字符一样多
almost as many red characters, the HTML, which

1437
01:12:08,260 --> 01:12:10,990
在IDE中为我很好地突出了语法，
is just being nicely syntax highlighted for me by the IDE,

1438
01:12:10,989 --> 01:12:13,059
而不是实际内容，foo，bar，baz。
than there is actual content, foo, bar, baz.

1439
01:12:13,060 --> 01:12:16,830
但是，如果我现在回到这里重新加载，我会得到一个更加整洁的项目符号列表。
But if I now go back here and reload, I get a much cleaner, bulleted list.

1440
01:12:16,829 --> 01:12:18,579
如果您浏览了该课程的网站，
And if you looked at the course's website,

1441
01:12:18,579 --> 01:12:21,819
实际上，我们大量使用项目符号列表来显示内容和缩进
we actually make heavy use of bulleted lists for content and indentation

1442
01:12:21,819 --> 01:12:22,929
等等。
and so forth.

1443
01:12:22,930 --> 01:12:25,540
我们只是使用了一堆ul标签。
We're just using a whole bunch of ul tags.

1444
01:12:25,539 --> 01:12:28,464
相比之下，如果您希望计算机为您提供更多东西，
If, by contrast, you wanted the computer to number of things for you,

1445
01:12:28,465 --> 01:12:32,573
您当然可以这样1,2,3
you could certainly do it like this, 1, 2, 3,

1446
01:12:32,573 --> 01:12:34,990
但您可以想象很快就会有点烦人
but you can imagine that getting a little annoying quickly

1447
01:12:34,989 --> 01:12:37,779
如果您想重新排序或在两者之间添加内容。
if you want to reorder things or add things in between.

1448
01:12:37,779 --> 01:12:40,309
因此，计算机确实擅长于完成乏味的工作。
So computers are really good at doing tedious things.

1449
01:12:40,310 --> 01:12:45,350
因此，让我使用ol将此无序列表更改为有序列表。
So let me change this unordered list to an ordered list using ol instead.

1450
01:12:45,350 --> 01:12:49,900
如果我回到另一个标签，请重新加载，瞧，现在是1，2，3，
And if I go back to the other tab, reload, voila, now it's 1, 2, 3,

1451
01:12:49,899 --> 01:12:51,649
并自动为我编号。
and it's automatically numbered for me.

1452
01:12:51,649 --> 01:12:54,109
我完全不用担心。
I don't have to worry about it at all.

1453
01:12:54,109 --> 01:12:56,859
好吧，让我们互相讨论一下页面的结构。
Well, let's do one other that speaks to the structure of the page.

1454
01:12:56,859 --> 01:12:59,049
让我继续复制我的出发点，你好，
Let me go ahead and copy my starting point, hello,

1455
01:12:59,050 --> 01:13:02,740
并创建一个名为table.html的文件。
and create a file called table.html.

1456
01:13:02,739 --> 01:13:07,149
如果您想在具有行和列的地方布置表格数据
If you ever want to layout tabular data where you have rows and columns

1457
01:13:07,149 --> 01:13:10,539
因为您想了解一些财务信息，或者只是
because you want to make sense of some financial information or just

1458
01:13:10,539 --> 01:13:13,119
类似于您自己网站中的电子表格的内容-
something akin to a spreadsheet in your own website--

1459
01:13:13,119 --> 01:13:14,409
好吧，我们该怎么做？
well, how can we do this?

1460
01:13:14,409 --> 01:13:16,359
我继续打电话给这张桌子。
Let me go ahead and call this table.

1461
01:13:16,359 --> 01:13:19,599
在我的身体下面，让我介绍一下桌子标签。
And down here in my body, let me introduce the table tag.

1462
01:13:19,600 --> 01:13:21,850
而表标签则涉及更多
And the table tag is a little more involved

1463
01:13:21,850 --> 01:13:24,610
因为您必须定义所谓的表行。
because you have to define what are called table rows.

1464
01:13:24,609 --> 01:13:26,899
所以我可以在那里做一个tr标签。
So I can do a tr tag there.

1465
01:13:26,899 --> 01:13:31,329
然后在表行中我可以有数据，所以td为表数据。
And then inside of table rows I can have data, so td for Table Data.

1466
01:13:31,329 --> 01:13:32,956
我只列出第一名。
Let me just put the number one.

1467
01:13:32,957 --> 01:13:36,040
让我继续做-让我模仿一些有点熟悉的东西，
And let me go ahead and make-- let me mock up something a little familiar,

1468
01:13:36,039 --> 01:13:39,039
例如电话键盘，2和3。
like a phone keypad, 2, and 3.

1469
01:13:39,039 --> 01:13:41,739
然后让我继续复制一次
Then let me go ahead and copy this once more

1470
01:13:41,739 --> 01:13:47,139
再给我自己一行例如4、5、6，然后让我
and give myself another row with, say, 4, 5, 6, and let me

1471
01:13:47,140 --> 01:13:53,350
再给我自己一个，分别是7、8、9。
give myself one more of those with, how about, 7, 8, 9.

1472
01:13:53,350 --> 01:13:57,430
最后，还有一个只是为了给自己
And then lastly, one more of those just to give myself

1473
01:13:57,430 --> 01:14:01,120
等效于小键盘并执行星号然后为零
the equivalent of a keypad and do the asterisk and then zero

1474
01:14:01,119 --> 01:14:02,499
然后按井号键。
and then the pound key.

1475
01:14:02,500 --> 01:14:10,169
让我保存一下，转到其他浏览器标签，打开table.html，瞧，
Let me save this, go to my other browser tab, open up table.html, and voila,

1476
01:14:10,170 --> 01:14:13,860
您会看到类似于老式电话键盘的内容。
you see something akin to an old-school phone keypad there.

1477
01:14:13,859 --> 01:14:15,899
并且有隐式的行和列。
And there is implicit rows and columns.

1478
01:14:15,899 --> 01:14:19,469
如果需要，可以使用实际的线条或边框使其更漂亮
If I wanted to, I can make it a little prettier with actual lines or borders

1479
01:14:19,470 --> 01:14:21,270
在这些事物之间和周围。
in between and around these things.

1480
01:14:21,270 --> 01:14:26,910
但是HTML使我能够使用trs为表格行布置表格数据
But HTML gives me the ability to lay out tabular data using trs for table rows

1481
01:14:26,909 --> 01:14:29,579
以及其中的列的tds。
and tds for the columns therein.

1482
01:14:29,579 --> 01:14:32,699
好吧，这完全是无聊的文字，实际上不是网络
All right this is all pretty boring and textual, and really not the web

1483
01:14:32,699 --> 01:14:35,667
你和我都知道，所以让我回到这里，
that you and I all know, so let me go back here,

1484
01:14:35,667 --> 01:14:37,709
让我们做一些更有趣的事情。
and let's do something a little more interesting.

1485
01:14:37,710 --> 01:14:42,480
让我继续，开始一个名为image.html的文件。
Let me go ahead and start off a file called maybe image.html.

1486
01:14:42,479 --> 01:14:45,359
让我继续，像以前一样开始我们的样板。
And let me go ahead and start with our boilerplate as before.

1487
01:14:45,359 --> 01:14:47,459
我将重命名该标题图像。
I'll rename this title image.

1488
01:14:47,460 --> 01:14:51,760
在这里，让我继续做这样的事情。
And down here, let me go ahead and do something like this.

1489
01:14:51,760 --> 01:14:54,150
让我继续做形象-
Let me go ahead and do image--

1490
01:14:54,149 --> 01:14:58,469
来源等于“ quote-unquote“ harvard.jpg”。
how about source equals quote-unquote "harvard.jpg".

1491
01:14:58,470 --> 01:15:02,518
事实证明，我在IDE中附带了哈佛的图片。
It turns out I came with an image of Harvard in my IDE.

1492
01:15:02,518 --> 01:15:04,560
让我继续描述它。
And let me go ahead and describe it as much, too.

1493
01:15:04,560 --> 01:15:07,605
让我在这里添加这个alt属性，哈佛大学。
Let me add this alt attribute here, Harvard University.

1494
01:15:07,604 --> 01:15:09,729
一会儿，我们将回到这意味着什么，
And we'll come back to what this means in a moment,

1495
01:15:09,729 --> 01:15:14,399
但到目前为止，这里有第二个标签，实际上向我们显示了
but here we have this second tag thus far that actually shows us

1496
01:15:14,399 --> 01:15:16,829
如何自定义标签的行为。
how to customize the behavior of a tag.

1497
01:15:16,829 --> 01:15:20,819
因此lang属性可以更早地自定义整个网页的行为
So the lang attribute earlier customized the behavior of the whole web page

1498
01:15:20,819 --> 01:15:24,269
通过告诉浏览器，这是一个用英语编写的网页。
by telling the browser here comes a web page written in English.

1499
01:15:24,270 --> 01:15:27,540
在这里，我们有两个属性alt，
And down here, we have two attributes, alt,

1500
01:15:27,539 --> 01:15:31,169
在等号后有一个值，然后是src，SRC，
which has a value after the equal sign, and then src, S-R-C,

1501
01:15:31,170 --> 01:15:33,760
它本身在等号后有一个值。
which itself has a value after the equal sign.

1502
01:15:33,760 --> 01:15:38,970
您可以使用单引号或双引号，但应保持一致。
You can use single quotes or double quotes, but you should be consistent.

1503
01:15:38,970 --> 01:15:41,220
但是这些属性中的每一个都应有一个等号
But each of these attributes should have an equal sign

1504
01:15:41,220 --> 01:15:44,120
在键和值之间。
in between the key and the value there.

1505
01:15:44,119 --> 01:15:45,639
那么我该怎么做呢？
So how might I go about doing this?

1506
01:15:45,640 --> 01:15:48,900
好吧，让我继续并立即打开此文件。
Well, let me go ahead and open up this file now.

1507
01:15:48,899 --> 01:15:51,239
让我继续并重新加载。
Let me go ahead and reload.

1508
01:15:51,239 --> 01:15:54,479
现在我们应该看到image.html和Harvard.jpg，
We should see now image.html and Harvard.jpg,

1509
01:15:54,479 --> 01:15:56,159
我刚刚从我的IDE中抢了下来。
which I just grabbed from my IDE.

1510
01:15:56,159 --> 01:15:59,669
瞧，image.html是原始绘画
And voila, image.html is the original painting

1511
01:15:59,670 --> 01:16:02,833
过去几周在这里装饰的背景。
of what's adorned our backdrop here for the past several weeks.

1512
01:16:02,832 --> 01:16:03,749
这很有趣。
So that's interesting.

1513
01:16:03,750 --> 01:16:06,330
您可以像这样链接到特定的图像。
You can link to a specific image like that.

1514
01:16:06,329 --> 01:16:08,259
alt属性的作用是什么？
And what's the role of the alt attribute?

1515
01:16:08,260 --> 01:16:10,110
所以alt属性太被忽略了
So the alt attribute is all too overlooked

1516
01:16:10,109 --> 01:16:12,449
无论是新手还是经验丰富的程序员，
by new and experienced programmers alike,

1517
01:16:12,449 --> 01:16:13,979
但这说明了可访问性。
but this speaks to accessibility.

1518
01:16:13,979 --> 01:16:17,699
并非所有人都能看到并听到媒体并与之互动
Not all of us can necessarily see and hear and interact with media

1519
01:16:17,699 --> 01:16:21,329
以与其他人相同的方式，因此那些视力或视力有困难的人
in the same way as others, and so those who have difficulty with sight or with

1520
01:16:21,329 --> 01:16:25,889
声音之类的东西，alt属性非常强大且如此简单
sound or the like, the alt attribute is a wonderfully powerful and so simple

1521
01:16:25,890 --> 01:16:29,730
包含在您的图片标签上的机制，该标签实际上只是描述
mechanism to include on your image tags that literally just describes

1522
01:16:29,729 --> 01:16:34,079
用英语或您自己的口头语言讲，人类是什么
in English or your own spoken language what it is a human would otherwise be

1523
01:16:34,079 --> 01:16:37,707
看着，即使他们可能是盲人而实际上看不见
looking at, even if they are perhaps blind and cannot actually see

1524
01:16:37,707 --> 01:16:38,249
什么东西在那里。
what's there.

1525
01:16:38,250 --> 01:16:41,000
如果他们有屏幕阅读器，那么实际上已经安装了软件
And if they have a screen reader, installed software that actually

1526
01:16:41,000 --> 01:16:44,279
可以在屏幕上发声，这非常有用
can vocalize text on the screen, this incredibly usefully

1527
01:16:44,279 --> 01:16:48,359
帮助人们了解您和我的意思，否则
helps people hear what it is that you and I might otherwise only

1528
01:16:48,359 --> 01:16:49,359
在看。
be looking at.

1529
01:16:49,359 --> 01:16:51,359
因此，请务必注意这些类型的标签，
So be sure to be mindful of those kinds of tags,

1530
01:16:51,359 --> 01:16:54,239
而且您只会再上一堂课就知道这些标签存在，
and you would only know that these tags exist by, again, taking a class,

1531
01:16:54,239 --> 01:16:56,239
读书，看我们的网上参考。
reading a book, looking at our online reference.

1532
01:16:56,239 --> 01:17:00,102
我们才刚刚开始增加词汇量。
We're just beginning to add to now our vocabulary.

1533
01:17:00,103 --> 01:17:03,270
实际上，让我们更进一步，做更多的事情
And in fact, let's take this one step further and do something a little more

1534
01:17:03,270 --> 01:17:05,490
强大而又熟悉。
powerfully and familiar still.

1535
01:17:05,489 --> 01:17:08,519
让我继续创建一个名为link.html的文件。
Let me go ahead and create a file called link.html.

1536
01:17:08,520 --> 01:17:10,080
让我在此处粘贴我的起点。
Let me paste my starting point there.

1537
01:17:10,079 --> 01:17:11,849
我将其重新命名为链接。
I'll retitle this as link.

1538
01:17:11,850 --> 01:17:14,430
当然，网络上充满了链接，
The web, of course, is filled with links,

1539
01:17:14,430 --> 01:17:19,510
实际上，超文本标记语言是关于超文本的，
and indeed, HyperText Markup Language is all about hypertext,

1540
01:17:19,510 --> 01:17:21,780
这是对链接的神秘暗示。
which is an arcane allusion to links.

1541
01:17:21,779 --> 01:17:25,419
超文本是具有链接到其他位置的链接的文本。
Hypertext is text with links that link elsewhere.

1542
01:17:25,420 --> 01:17:27,870
那么如何在网页中实现链接？
So how might I implement a link in a web page?

1543
01:17:27,869 --> 01:17:30,599
好吧，让我继续，在此页面中，最初只是鼓励
Well, let me go ahead and, in this page, initially just encourage

1544
01:17:30,600 --> 01:17:32,820
人们参观哈佛时期。
people to visit Harvard, period.

1545
01:17:32,819 --> 01:17:37,139
让我回到其他浏览器窗口，现在打开link.html。
Let me go back to my other browser window, open up now link.html.

1546
01:17:37,140 --> 01:17:39,510
当然，这实际上并没有做任何事情。
And of course, this does not really do anything.

1547
01:17:39,510 --> 01:17:42,870
我无法点击访问哈佛或进行其他任何活动，
I can't click on visit Harvard or anything else and have it do anything,

1548
01:17:42,869 --> 01:17:44,679
因为它显然只是文本。
because it's obviously just text.

1549
01:17:44,680 --> 01:17:48,000
那么，我该如何实际将用户链接到某个目的地？
So how can I actually link the user to some destination?

1550
01:17:48,000 --> 01:17:50,850
好吧，我们需要另一个标签。
Well, we need another tag.

1551
01:17:50,850 --> 01:17:55,440
它称为锚标记，缩写为一个字母a，
It is called the anchor tag, abbreviated with a single letter a,

1552
01:17:55,439 --> 01:17:58,379
它具有超链接的href属性。
it has an attribute of href, for Hyper Reference.

1553
01:17:58,380 --> 01:18:01,123
超引用只是意味着，您想链接到什么？
And hyper reference just means, what do you want to link to?

1554
01:18:01,122 --> 01:18:02,789
好吧，让我们继续保持简单。
Well, let's go ahead and keep it simple.

1555
01:18:02,789 --> 01:18:07,049
让我们链接到我已经创建的文件image.html。
Let's link to a file I already created, image.html.

1556
01:18:07,050 --> 01:18:10,050
我想链接的词实际上是哈佛。
And the word I want to link is literally Harvard.

1557
01:18:10,050 --> 01:18:14,910
因此，在“哈佛”一词的左侧，我有一个href =“ image.html”，
So on the left of the word "Harvard," I have a href="image.html",

1558
01:18:14,909 --> 01:18:17,139
在哈佛大学的右边，我有关闭标签。
on the right of Harvard, I have the close tag.

1559
01:18:17,140 --> 01:18:19,677
再说一遍，只是因为我有一个属性
And again, notice just because I had an attribute

1560
01:18:19,676 --> 01:18:22,259
标签上的内容并不意味着您需要冗余复制粘贴它
on the tag does not mean you need to redundantly copy paste it

1561
01:18:22,260 --> 01:18:23,460
在关闭标记中。
in the close tag.

1562
01:18:23,460 --> 01:18:26,820
仅关闭标签名称就足够了。
It suffices to close only the name of the tag.

1563
01:18:26,819 --> 01:18:29,399
让我保存文件，现在返回此页面。
Let me save the file, go back to this page now.

1564
01:18:29,399 --> 01:18:31,649
让我放大一点并重新加载。
Let me zoom in a little bit and reload.

1565
01:18:31,649 --> 01:18:35,219
瞧，现在您可以看到熟悉的超链接
And voila, now you see the familiar hyperlink

1566
01:18:35,220 --> 01:18:38,130
您可能会在许多带有下划线的网页上看到它。
that you might see on many web pages where it's actually underlined.

1567
01:18:38,130 --> 01:18:41,210
的确，如果我将鼠标悬停在该位置上，
And indeed, if I hover over that--

1568
01:18:41,210 --> 01:18:44,570
如果我将鼠标悬停在上面，然后单击，瞧，
if I hover over that and then click, voila,

1569
01:18:44,569 --> 01:18:48,439
我们将在1792年进入哈佛大学，
we'll find ourself at Harvard University back in 1792,

1570
01:18:48,439 --> 01:18:51,379
因为现在我正在查看的是image.html。
because now what I'm looking at is image.html.

1571
01:18:51,380 --> 01:18:54,440
实际上，让我离开全屏模式片刻
And in fact, let me go out of full screen mode for just a moment to make

1572
01:18:54,439 --> 01:18:58,309
清除故事中此刻的网址，我只看到了访问哈佛
clear that the URL at this point in the story where I see just Visit Harvard

1573
01:18:58,310 --> 01:19:02,240
在页面中，是something / link.html。
in the page, is something/link.html.

1574
01:19:02,239 --> 01:19:04,399
您的网址与我的网址不同，但是我的网址会发生
You URL will differ from mine, but mine happens

1575
01:19:04,399 --> 01:19:09,169
这么长的神秘字符串，因为这是我的帐户斜线link.html。
to be this long, cryptic string, because it's my account slash link.html.

1576
01:19:09,170 --> 01:19:13,820
不过，当我点击链接时，请注意，我最终进入了image.html，
When I click on the link, though, notice that I end up at image.html,

1577
01:19:13,819 --> 01:19:18,822
从而带我到一个相对URL，该URL是我自己帐户中的文件。
thereby taking me to a relative URL that is a file in my own account.

1578
01:19:18,823 --> 01:19:20,990
但是，如果我不想链接到该文件，也许
If I don't want to link to that file, though-- maybe

1579
01:19:20,989 --> 01:19:22,999
我想链接到哈佛本身。
I want to link to Harvard itself.

1580
01:19:23,000 --> 01:19:25,430
仅做Harvard.edu是不够的。
It's not sufficient to just do Harvard.edu.

1581
01:19:25,430 --> 01:19:26,800
那不是URL。
That is not a URL.

1582
01:19:26,800 --> 01:19:28,910
www不是URL。
www is not a URL.

1583
01:19:28,909 --> 01:19:33,799
我需要我的协议，可以说是HTTP，或者更好的是HTTPS。
I need my protocol, so to speak, either HTTP, or, better yet, HTTPS.

1584
01:19:33,800 --> 01:19:37,760
如果我现在保存该文件并重新加载并返回此处，
If I save that file now and reload and go back here,

1585
01:19:37,760 --> 01:19:42,710
文字看起来完全一样，但是请注意，如果我将鼠标悬停在上方，
the text looks exactly the same, but notice, if I hover over it,

1586
01:19:42,710 --> 01:19:46,340
有一个微小的，微小的，微小的，微小的视觉线索
there's a tiny, tiny, tiny, tiny little visual clue

1587
01:19:46,340 --> 01:19:49,430
在屏幕底部，显示我将要结束的位置。
at the bottom of the screen that says where I'm going to end up.

1588
01:19:49,430 --> 01:19:53,810
实际上，如果我现在单击此按钮，请注意，我的网址栏没有显示
And indeed, if I click this now, notice that my URL bar is not going

1589
01:19:53,810 --> 01:19:57,140
保持为我的IDE斜线link.html。
to stay as my IDE slash link.html.

1590
01:19:57,140 --> 01:19:59,930
它将把我带到实际的Harvard.edu。
It's going to whisk me away to the actual Harvard.edu.

1591
01:19:59,930 --> 01:20:04,490
在这里，值得注意的是Chrome，Safari和浏览器
And here, it's worth noting that Chrome and Safari and browsers, for better

1592
01:20:04,489 --> 01:20:07,009
或者更糟的是，越来越简化
or for worse, are increasingly simplifying

1593
01:20:07,010 --> 01:20:09,540
用户体验或浏览器的UX。
the user experience or UX of browsers.

1594
01:20:09,539 --> 01:20:11,404
我并不是从哈佛大学毕业的。
I am not literally at Harvard.edu.

1595
01:20:11,404 --> 01:20:14,669
如果您单击或双击地址栏，
If you click or double-click on the address bar,

1596
01:20:14,670 --> 01:20:16,520
您会看到自己的实际位置。
you'll see where you actually are.

1597
01:20:16,520 --> 01:20:18,860
对于开发人员来说，这是一个更糟的情况。
And this is, for developers, a worse.

1598
01:20:18,859 --> 01:20:22,879
对于普通用户，仅查看域名可能更干净。
For regular users, it's probably cleaner just to see the domain name.

1599
01:20:22,880 --> 01:20:25,010
但是所有的信息确实都在那里
But all of the information is indeed there

1600
01:20:25,010 --> 01:20:27,830
如果你挖一点的话。
if you dig for it just a little bit.

1601
01:20:27,829 --> 01:20:31,219
但是这里有一种可能的利用方式。
But there's kind of an exploit here, possible.

1602
01:20:31,220 --> 01:20:33,080
这里有一种利用。
There's kind of an exploit here.

1603
01:20:33,079 --> 01:20:36,829
如果我要像这样恶意地做某事怎么办。
What if I were to do something somewhat maliciously, like this.

1604
01:20:36,829 --> 01:20:42,559
就像，让我将其更改为Yale.edu，使“哈佛”一词保持不变吗？
Like, let me change this to Yale.edu leave the word "Harvard" unchanged?

1605
01:20:42,560 --> 01:20:45,290
如果我现在回到其他标签并重新加载，
If I go back now to my other tab and reload,

1606
01:20:45,289 --> 01:20:48,601
目前它看起来有所不同，因为它是蓝色而不是紫色。
it looks different at the moment because it's blue instead of purple.

1607
01:20:48,601 --> 01:20:50,809
默认情况下，紫色表示我曾经去过那里
Purple by default means I've been there before, which

1608
01:20:50,810 --> 01:20:52,010
我们是几分钟前。
we were a few minutes ago.

1609
01:20:52,010 --> 01:20:53,570
蓝色表示我以前没有去过。
Blue means I haven't visited before.

1610
01:20:53,569 --> 01:20:55,279
但是，如果我没有真正注意到这种微妙之处，
But if I don't really notice that subtlety,

1611
01:20:55,279 --> 01:20:58,321
我可能会很想，哦，这是我想去的大学。
I might very well think that, oh, this is the university I want to go to.

1612
01:20:58,322 --> 01:21:02,000
但是，瞧，当我点击那个错误的地方时。
But voila, when I click on that, wrong place.

1613
01:21:02,000 --> 01:21:07,759
好的，愚蠢的例子，但这确实可以用于不良目的。
All right, silly example, but this can really be exploited for ill purposes.

1614
01:21:07,760 --> 01:21:11,000
想到什么，或想到什么威胁
What comes to mind, or what threats come to mind

1615
01:21:11,000 --> 01:21:14,660
用这个非常简单的机制？
with this very simple mechanism?

1616
01:21:14,659 --> 01:21:17,389
对，现在您已经可以制作网页了，
Right, now that you have the ability to make web pages,

1617
01:21:17,390 --> 01:21:20,750
你有能力说你要去一个地方
you have the ability to say you're going one place

1618
01:21:20,750 --> 01:21:22,530
但确实将用户带到其他地方。
but really lead the user elsewhere.

1619
01:21:22,529 --> 01:21:24,319
您可以看到如何滥用它吗？
Can you see how this might be abused?

1620
01:21:24,319 --> 01:21:25,339
圣地亚哥？
Santiago?

1621
01:21:25,340 --> 01:21:30,310
听众：我认为可能由所谓的黑客使用
AUDIENCE: I think it maybe could be used by so-called hackers who

1622
01:21:30,310 --> 01:21:34,185
可以闯入并将恶意软件插入您的计算机？
can break in and insert malicious software into your computer?

1623
01:21:34,185 --> 01:21:35,060
DAVID J. MALAN：是的。
DAVID J. MALAN: Yeah.

1624
01:21:35,060 --> 01:21:37,005
听众：他们诱骗您这样做。
AUDIENCE: And they trick you into doing that.

1625
01:21:37,005 --> 01:21:37,880
DAVID J. MALAN：是的。
DAVID J. MALAN: Yeah.

1626
01:21:37,880 --> 01:21:39,320
而“把戏”是有效的词。
And "trick" is the operative word.

1627
01:21:39,319 --> 01:21:43,039
我的意思是，我们大多数人可能都不习惯开放-
I mean, most of us are probably not in the habit of opening up--

1628
01:21:43,039 --> 01:21:47,129
在点击链接之前，像我刚才一样，将鼠标悬停在该链接上，
before clicking on a link, hovering over it, like I did a moment ago,

1629
01:21:47,130 --> 01:21:51,758
然后非常偏执，低头看这里-
and then very paranoiacly, looking down here to see if--

1630
01:21:51,757 --> 01:21:53,299
我真的去正确的地方了吗？
am I really going to the right place?

1631
01:21:53,300 --> 01:21:55,070
甚至这也可以被欺骗。
And even this can be spoofed.

1632
01:21:55,069 --> 01:21:58,159
您可以诱骗用户以为他们会去正确的地方
You can trick the user into thinking they're going to the right place

1633
01:21:58,159 --> 01:22:00,179
但仍会覆盖此行为。
but still override this behavior.

1634
01:22:00,180 --> 01:22:05,152
因此，如果您曾经是网络钓鱼攻击的受害者或附近的受害者，
And so if you've ever been the victim of or the near victim of phishing attack,

1635
01:22:05,152 --> 01:22:07,490
网络钓鱼-
P-H-I-S-H-I-N-G--

1636
01:22:07,489 --> 01:22:11,509
如圣地亚哥所说，“网络钓鱼”是指欺骗人类，
"phishing" refers to trying to trick humans, as Santiago says,

1637
01:22:11,510 --> 01:22:13,880
通过社会工程学去做某事
via social engineering into doing something

1638
01:22:13,880 --> 01:22:15,560
他们实际上并没有打算。
that they didn't actually intend.

1639
01:22:15,560 --> 01:22:19,910
因此，您可以想象在您的电子邮件收件箱中收到垃圾邮件，其中说：
And so you can imagine receiving spam in your email inbox that says,

1640
01:22:19,909 --> 01:22:22,309
单击此链接访问PayPal.com，因为您
click this link to visit PayPal.com, because you

1641
01:22:22,310 --> 01:22:24,620
需要验证您的密码，或单击此处
need to verify your password, or click here

1642
01:22:24,619 --> 01:22:26,609
告诉我们您的社会保险号。
to tell us your social security number.

1643
01:22:26,609 --> 01:22:29,449
这些天来电子邮件很普遍
This is so common these days to get emails

1644
01:22:29,449 --> 01:22:33,049
这些天本身就是-如果它们不只是文字，
which themselves these days are-- if they're not just text,

1645
01:22:33,050 --> 01:22:34,940
它们本身就是HTML。
they are HTML itself.

1646
01:22:34,939 --> 01:22:36,979
当您查看Gmail中的任何电子邮件时
When you're looking at any email in Gmail that

1647
01:22:36,979 --> 01:22:39,739
包含可点击的链接或图片，即该电子邮件
has clickable links or images, that email

1648
01:22:39,739 --> 01:22:42,259
包含我们在此处编写的HTML。
contains HTML like we're writing here.

1649
01:22:42,260 --> 01:22:47,120
诱骗用户进入某个地方是微不足道的
It is trivial to trick users into going places

1650
01:22:47,119 --> 01:22:48,632
他们实际上并没有打算。
that they didn't actually intend.

1651
01:22:48,632 --> 01:22:51,049
因此，在今天的外卖中，除了机械之外
And so among the takeaways for today, beyond the mechanics

1652
01:22:51,050 --> 01:22:53,133
如何做这些事情，应该考虑
of how to do these things, should be consideration

1653
01:22:53,132 --> 01:22:57,019
为了您自己的人身安全，以及如何不信任您
for your own personal security, as to how distrusting you

1654
01:22:57,020 --> 01:23:01,160
应该真正属于网站，因为这些机制非常简单
should really be of websites because of how simple these mechanisms are

1655
01:23:01,159 --> 01:23:04,219
以及它们如何将您带到错误的地方。
and how they can lead you, indeed, to the wrong place.

1656
01:23:04,220 --> 01:23:08,000
回想一下，我们之前写了这个link.html示例，其中
And recall that a bit ago, we wrote this link.html example, which

1657
01:23:08,000 --> 01:23:13,129
在正确的版本中，有一个指向www.Harvard.edu的链接，其文本为单词
had, in the correct version, a link to www.Harvard.edu whose text was the word

1658
01:23:13,130 --> 01:23:13,880
“哈佛”。
"Harvard".

1659
01:23:13,880 --> 01:23:16,640
现在假设我们要覆盖浏览器的默认设置
Suppose now that we want to override the browser's default

1660
01:23:16,640 --> 01:23:21,890
链接的样式化-回想一下，如果我现在在另一个标签中访问link.html，
stylization of links-- which, recall, if I now visit in my other tab, link.html,

1661
01:23:21,890 --> 01:23:22,760
很无聊。
is pretty boring.

1662
01:23:22,760 --> 01:23:26,720
默认情况下，这已经有20年的历史了，链接通常是蓝色的
By default, and this has been true for like 20 years, links tend to be blue

1663
01:23:26,720 --> 01:23:30,500
并在您访问它们之前加下划线，或者紫色并加下划线
and underlined before you visit them, or purple and underlined

1664
01:23:30,500 --> 01:23:33,859
在您至少拜访了他们一次之后，便有了视觉提示。
after you visited them at least once, a visual cue.

1665
01:23:33,859 --> 01:23:36,379
但是当今大多数网站，包括CS50自己的网站，
But most websites today, including CS50's own,

1666
01:23:36,380 --> 01:23:40,380
对网页上的链接使用不同的颜色和不同的外观，
use different colors and different aesthetics for links on a web page,

1667
01:23:40,380 --> 01:23:42,870
带有或不带有下划线的不同颜色，甚至
with or without underlining, different colors, maybe even

1668
01:23:42,869 --> 01:23:44,036
不同的背景颜色。
different background colors.

1669
01:23:44,037 --> 01:23:46,960
您可以使用CSS通过多种方式设置样式。
You can style these things using CSS in bunches of ways.

1670
01:23:46,960 --> 01:23:47,980
那么我们该怎么做呢？
So how might we do this?

1671
01:23:47,979 --> 01:23:51,239
好吧，让我们继续在这里公平地说，说“访问哈佛”，
Well, let's go ahead and be fair here and say Visit Harvard,

1672
01:23:51,239 --> 01:23:57,539
或者，例如，href =“ http://www.yale.edu”
or, for instance, a href="http://www.yale.edu"

1673
01:23:57,539 --> 01:23:59,009
问号 -
question mark--

1674
01:23:59,010 --> 01:24:01,590
不，不，请关闭支架耶鲁。
no, nope, close bracket Yale.

1675
01:24:01,590 --> 01:24:04,075
让我们给自己两个链接，当然，如果我重新加载，
Let's give myself two links that, of course, if I reload,

1676
01:24:04,074 --> 01:24:04,949
看起来像这样
just looks like this.

1677
01:24:04,949 --> 01:24:08,009
他们两个现在都很无聊和紫色，因为我们去过两个地方
Both of them are now boring and purple because we've been to both places

1678
01:24:08,010 --> 01:24:08,800
已经。
already.

1679
01:24:08,800 --> 01:24:12,000
因此，让我继续在此处添加样式标签。
So let me go ahead and add a style tag up here.

1680
01:24:12,000 --> 01:24:15,299
为了使我们保持在同一文件中，我将返回使用样式标签
Just to keep us in the same file, I'm going to go back to using a style tag

1681
01:24:15,300 --> 01:24:17,650
而不是引入单独的文件。
rather than introduce a separate file.

1682
01:24:17,649 --> 01:24:19,889
因此，为了简化我的样式标签，
So to keep things simple in my style tag,

1683
01:24:19,890 --> 01:24:24,120
让我继续进行更改，例如，更改这些链接的颜色为-
let me go ahead and change these links, for instance, to have a color of--

1684
01:24:24,119 --> 01:24:29,099
也许让我们一开始将它们全部变成红色，ff0000。
maybe let's make them all red initially, ff0000.

1685
01:24:29,100 --> 01:24:31,050
让我们继续保存。
And let's go ahead and save that.

1686
01:24:31,050 --> 01:24:34,230
让我重新加载，现在您将看到两个链接
Let me reload, and you'll see that now both of the links

1687
01:24:34,229 --> 01:24:35,709
为红色并带有下划线。
are red and underlined.

1688
01:24:35,710 --> 01:24:38,290
我不太喜欢下划线，所以让我们摆脱它。
I don't really like the underline, so let's get rid of that.

1689
01:24:38,289 --> 01:24:41,511
让我们将a标签的文本修饰方式更改为无。
Let's change the text decoration of my a tags to be none.

1690
01:24:41,511 --> 01:24:43,469
再说一次，您只会知道这些属性
And again, you would only know these properties

1691
01:24:43,470 --> 01:24:45,150
从某种形式的参考存在。
exist from some form of reference.

1692
01:24:45,149 --> 01:24:47,439
但同样，只是增加了我们的词汇量。
But again, just adding to our vocabulary.

1693
01:24:47,439 --> 01:24:48,479
让我们现在重新加载。
Let's reload now.

1694
01:24:48,479 --> 01:24:50,369
现在，下划线消失了。
And now the underlines are gone.

1695
01:24:50,369 --> 01:24:52,739
但这会很酷，例如某些网站，
But it would be kind of cool, like some websites,

1696
01:24:52,739 --> 01:24:56,609
如果您将鼠标悬停在链接上（至少在笔记本电脑或台式机上），
if when you hover over the link-- at least on a laptop or desktop--

1697
01:24:56,609 --> 01:25:00,249
然后，该链接会突出显示，从而更加引起您的注意。
the link then underlines, drawing your attention all the more to it.

1698
01:25:00,250 --> 01:25:01,510
我们该怎么做？
How can we do that?

1699
01:25:01,510 --> 01:25:06,450
好吧，事实证明，您可以使用所谓的伪选择器，
Well, it turns out that you can use what are called pseudo selectors, which

1700
01:25:06,449 --> 01:25:07,769
是-像这样工作。
are-- work like this.

1701
01:25:07,770 --> 01:25:10,140
如果我想更改标签的行为
If I want to change the behavior of the a tag

1702
01:25:10,140 --> 01:25:12,450
但只有当我们的用户将鼠标悬停在它上面时，
but only when our user is hovering over it,

1703
01:25:12,449 --> 01:25:15,479
您可以从字面上写上标记冒号悬停的名称。
you literally write the name of the tag colon hover.

1704
01:25:15,479 --> 01:25:18,449
然后在这个区块中，我要继续说
And then inside of this block, I'm going to go ahead and say

1705
01:25:18,449 --> 01:25:21,749
文字装饰下划线。
text-decoration underline.

1706
01:25:21,750 --> 01:25:27,070
因此，这就是说，将所有内容设为红色，并且默认情况下不带下划线，
So this will say, make everything red and not underlined by default,

1707
01:25:27,069 --> 01:25:30,599
但是当用户悬停时，请继续进行下划线装饰。
but when the user hovers, go ahead and decorate it with an underline.

1708
01:25:30,600 --> 01:25:33,150
因此，让我们在保存，重新加载后返回文件。
So let's go back to the file after saving, reload.

1709
01:25:33,149 --> 01:25:35,639
在我将光标移到此处之前，还没有视觉上的改变，
No visual change yet until I move my cursor up here,

1710
01:25:35,640 --> 01:25:39,690
瞧，现在越来越像现代网站了。
and voila, now it's getting a little more like modern websites.

1711
01:25:39,689 --> 01:25:42,749
现在，这对耶鲁来说并不公平，因为两个链接都是红色的，
Now, this isn't quite fair to Yale that both of the links are red,

1712
01:25:42,750 --> 01:25:45,990
那么，如果我们更改不同类型链接的颜色怎么办？
so what if we change the colors of different types of links?

1713
01:25:45,989 --> 01:25:49,259
好吧，让我下去这里，我需要区分这些链接
Well, let me go down here, and I need to distinguish these links

1714
01:25:49,260 --> 01:25:50,350
以不同的方式。
in different ways.

1715
01:25:50,350 --> 01:25:52,150
我可以为此使用类。
And I could use classes for that.

1716
01:25:52,149 --> 01:25:54,839
但是如果我只有一个哈佛链接和一个耶鲁链接，
But if I've only got one Harvard link and one Yale link,

1717
01:25:54,840 --> 01:25:56,880
我也可以唯一地标识它们。
I might as well uniquely identify them.

1718
01:25:56,880 --> 01:26:00,690
让我继续添加一个名为id的quote-unquote Harvard的属性，
Let me go ahead and add an attribute called id of quote-unquote Harvard,

1719
01:26:00,689 --> 01:26:03,549
我将其全部保留为小写，有点像一个变量。
and I'll keep it all lowercase, kind of like a variable.

1720
01:26:03,550 --> 01:26:06,270
那我在这里要说id =“ yale”。
And that then here I'm going to say id="yale".

1721
01:26:06,270 --> 01:26:08,220
我可以随便叫这些东西，
I could call these things anything I want,

1722
01:26:08,220 --> 01:26:10,720
但是因为只有一个哈佛链接和一个耶鲁链接，
but because there's only one Harvard link and one Yale link,

1723
01:26:10,720 --> 01:26:14,430
我将在HTML中添加一个属性，该属性只允许我口头上
I'm going to add an attribute in HTML that just lets me verbally

1724
01:26:14,430 --> 01:26:18,100
唯一地标识每个链接。
uniquely identify each of those links.

1725
01:26:18,100 --> 01:26:20,790
但是在这里，请注意我现在可以做什么。
But up here, notice what I can do now.

1726
01:26:20,789 --> 01:26:24,059
让我继续删除这里的颜色
Let me go ahead and remove the color from here

1727
01:26:24,060 --> 01:26:28,380
让我改为对任何具有以下特征的标签说：
and let me instead say that for any tag that--

1728
01:26:28,380 --> 01:26:35,160
对于ID为Harvard的代码，请继续并将其颜色设置为ff0000，
for the tag that has an ID of Harvard, go ahead and color it as ff0000,

1729
01:26:35,159 --> 01:26:42,959
但是如果它的ID为耶鲁，请继续操作并使用0000ff颜色，
but if it has an ID of Yale, go ahead and have a color of 0000ff,

1730
01:26:42,960 --> 01:26:45,930
这样就可以给我蓝色的RGB
so that should give me my blue in RGB.

1731
01:26:45,930 --> 01:26:48,520
并注意这里的新符号是哈希符号。
And notice the new symbol here is the hash symbol.

1732
01:26:48,520 --> 01:26:51,660
因此，在CSS的世界中，单词前的哈希符号
So in the world of CSS, a hash symbol before a word

1733
01:26:51,659 --> 01:26:55,679
表示唯一标识符“哈佛”或唯一标识符“耶鲁”。
means the unique identifier Harvard or the unique identifier Yale.

1734
01:26:55,680 --> 01:26:59,220
单词前的点表示班级居中，
A dot before a word means the class centered,

1735
01:26:59,220 --> 01:27:01,810
大，中，小一类。
the class large or medium or small.

1736
01:27:01,810 --> 01:27:06,120
而且，如果您在单词之前没有任何符号，例如哈希或小圆点，
And if you don't have any symbol before the word, like a hash or a dot,

1737
01:27:06,119 --> 01:27:09,569
字面上的意思是称为a或字面上的标签
means literally the tag called a or literally

1738
01:27:09,569 --> 01:27:12,929
将标签悬停在其上时，该标签称为a。
the tag called a when it's being hovered over it.

1739
01:27:12,930 --> 01:27:14,490
再说一遍，一些语法。
So again, a few pieces of syntax.

1740
01:27:14,489 --> 01:27:18,089
这不是编程代码，而是此处的某种代码。
It's not programming code, but it is code of some sort here.

1741
01:27:18,090 --> 01:27:18,960
让我保存一下。
Let me save this.

1742
01:27:18,960 --> 01:27:20,760
让我回到我的标签页并重新加载。
Let me go back to my tab and reload.

1743
01:27:20,760 --> 01:27:25,200
瞧，现在我有了一个更漂亮的网站，
And voila, now I have the beginnings of a prettier website where

1744
01:27:25,199 --> 01:27:28,409
我用红色和耶鲁的下划线来区分哈佛
I'm distinguishing Harvard with its underline in red and Yale

1745
01:27:28,409 --> 01:27:32,109
其下划线为蓝色，但仅在某些特定条件下才可以。
with its underline in blue, but only under those certain conditions.

1746
01:27:32,109 --> 01:27:37,379
因此，我们可以使用CSS进行更精确的控制
So we have with CSS the ability to much more precisely control

1747
01:27:37,380 --> 01:27:40,200
我们网页的美感。
the aesthetics of our web pages.

1748
01:27:40,199 --> 01:27:43,469
好吧，让我们继续澄清一下这里的几件事。
All right, let's go ahead and clarify just a couple of things here.

1749
01:27:43,470 --> 01:27:48,630
让我来看一个最后的例子，看看现在是否可以
Let me go up to one final example and see if we can't now

1750
01:27:48,630 --> 01:27:50,960
回到用户输入的想法。
come back to that idea of user input.

1751
01:27:50,960 --> 01:27:53,040
所以让我回到这里的IDE
So let me go back to the IDE here and let

1752
01:27:53,039 --> 01:27:57,059
我像以前一样从我的hello文件中获取了一些入门代码
me grab a little bit of starter code from my hello file as before

1753
01:27:57,060 --> 01:28:02,758
并在此处创建一个名为search.html的最终示例，该示例确实是纯HTML。
and create one final example here called search.html that's purely HTML indeed.

1754
01:28:02,757 --> 01:28:04,799
我要命名此事物搜索，然后
I'm going to name this thing search, and then I'm

1755
01:28:04,800 --> 01:28:08,910
接下来，在页面的正文中，使用另一个新标签。
going to go, down in my body of the page, use another new tag.

1756
01:28:08,909 --> 01:28:13,229
原来HTML也支持一个form标签，并且那个form标签
Turns out HTML also supports a form tag, and that form tag

1757
01:28:13,229 --> 01:28:16,539
可以具有几个属性，其中之一就是动作。
can take a couple of attributes, one of which is action.

1758
01:28:16,539 --> 01:28:20,529
这就是您希望表单引导用户的地方。
And this is where you want to have the form lead the user.

1759
01:28:20,529 --> 01:28:23,079
我将继续讲一会儿。
I'm going to go ahead and come back to that in just a moment.

1760
01:28:23,079 --> 01:28:26,359
另一个是method，该方法是要使用的HTTP动词。
The other is method, and the method is the HTTP verb to use.

1761
01:28:26,359 --> 01:28:27,609
现在，我将使用get。
For now, I'm going to use get.

1762
01:28:27,609 --> 01:28:31,379
而且，即使我们之前已经在这里，它也应该是小写的
And here, inconsistently, it should be lowercase, even though we've previously

1763
01:28:31,380 --> 01:28:32,730
看到它是大写的。
seen it in uppercase.

1764
01:28:32,729 --> 01:28:35,969
在表单标签内，我将有几个输入，一个输入
Inside of the form tag, I'm going to have a couple of inputs, an input

1765
01:28:35,970 --> 01:28:41,790
其名称将为q，其类型将为search。
whose name is going to be q and whose type is going to be search.

1766
01:28:41,789 --> 01:28:43,919
然后在这里，我将有另一个输入
And then down here, I'm going to have another input

1767
01:28:43,920 --> 01:28:47,670
其类型将要提交，其值将要
whose type is going to be submit and whose value is going

1768
01:28:47,670 --> 01:28:49,945
也可以使用引号-取消引号“搜索”。
to be quote-unquote "search" as well.

1769
01:28:49,944 --> 01:28:51,069
它们有些不同。
They're a little different.

1770
01:28:51,069 --> 01:28:54,359
我故意省略了该名称，因为它不是绝对必要的。
I'm deliberately omitting the name because it's not strictly necessary.

1771
01:28:54,359 --> 01:28:56,379
但是我要去哪里呢？
But where am I going with this?

1772
01:28:56,380 --> 01:28:59,280
好吧，我实际上还没有实现搜索引擎。
Well, I haven't actually implemented a search engine.

1773
01:28:59,279 --> 01:29:02,489
我目前正在做的是实现搜索的前端
All I'm doing at the moment is implementing a front end to a search

1774
01:29:02,489 --> 01:29:04,384
引擎，是google.com的前端。
engine, a front end to google.com.

1775
01:29:04,385 --> 01:29:07,260
我将让Google自己进行实际搜索的艰苦工作
I'm going to let Google itself do the hard work of actually searching

1776
01:29:07,260 --> 01:29:09,000
数据-我的互联网。
the data-- the internet for me.

1777
01:29:09,000 --> 01:29:14,440
因此，我将指定一个www.google.com/search的操作。
So I'm going to specify an action of www.google.com/search.

1778
01:29:14,439 --> 01:29:18,779
因此，这里我们将要形成一个表单，
So here we have what is about to be a form,

1779
01:29:18,779 --> 01:29:21,779
用户可以与之交互的文本框和按钮，
text boxes and buttons that the user can interact with,

1780
01:29:21,779 --> 01:29:27,479
其操作将是使用get将用户发送到该URL。
the action of which is going to be to send the user to this URL using get.

1781
01:29:27,479 --> 01:29:31,229
但是该网址将自动添加
But that URL is going to have automatically added

1782
01:29:31,229 --> 01:29:35,759
可以说是我的浏览器使用的一个HTTP参数
to it by my browser one HTTP parameter, so to speak,

1783
01:29:35,760 --> 01:29:38,250
称为q的各种变量。
a variable of sorts, called q.

1784
01:29:38,250 --> 01:29:39,030
那为什么呢？
And why this?

1785
01:29:39,029 --> 01:29:42,409
好吧，回想一下，当我访问google.com时，
Well, recall earlier that when I visited google.com,

1786
01:29:42,409 --> 01:29:45,209
我能够通过字面上的模拟搜索
I was able to simulate a search by literally

1787
01:29:45,210 --> 01:29:52,230
转到https://www.google.com/search?q=cats。
going to https://www.google.com/search?q=cats.

1788
01:29:52,229 --> 01:29:56,279
我声称Google是由那里的软件工程师设计的
I claimed that Google is designed by the software engineers there

1789
01:29:56,279 --> 01:29:58,559
通过URL接受用户输入。
to take user input via the URL.

1790
01:29:58,560 --> 01:30:02,340
好吧，您和我不会通过输入长网址来搜索内容
Well, you and I do not search for things by typing out long URLs

1791
01:30:02,340 --> 01:30:04,200
像这样，q等于任何东西。
like that with q equals anything.

1792
01:30:04,199 --> 01:30:06,149
那将是非常糟糕的经历。
That would be incredibly poor experience.

1793
01:30:06,149 --> 01:30:09,659
您和我只是在搜索框或表格中输入内容。
You and I just type things into search boxes or forms.

1794
01:30:09,659 --> 01:30:14,729
因此，的确，如果我现在在此处进入search.html的其他标签，
So indeed, if I now go into my other tab here for search.html,

1795
01:30:14,729 --> 01:30:18,269
你不会对我的形式美学印象深刻
you're not going to be very impressed by the aesthetics of my form right

1796
01:30:18,270 --> 01:30:22,230
现在-只是一个矩形文本框和一个搜索按钮。
now-- it's just a rectangular text box and a search button.

1797
01:30:22,229 --> 01:30:23,579
但是请注意会发生什么。
But watch what happens.

1798
01:30:23,579 --> 01:30:27,539
目前，我的网址以search.html结尾。
My URL at the moment ends in search.html.

1799
01:30:27,539 --> 01:30:30,959
我将继续输入像猫一样的字眼。
I'm going to go ahead and type in something literally like cats.

1800
01:30:30,960 --> 01:30:35,520
现在注意，如果我按Enter键或手动单击“搜索”按钮，
And now notice, if I hit Enter or manually click on the Search button,

1801
01:30:35,520 --> 01:30:38,250
我的网页，其中包含HTML表单-
my web page, which contains an HTML form--

1802
01:30:38,250 --> 01:30:42,389
因为它的操作是Google的网址和获取方法，
because it has an action that's Google's URL and a method of get,

1803
01:30:42,390 --> 01:30:47,460
我的浏览器会将其转换为相应的HTTP请求
my browser is going to convert that into the corresponding HTTP request

1804
01:30:47,460 --> 01:30:50,580
然后依次输入网址，以便用户自动
and in turn URL so that the user is automatically

1805
01:30:50,579 --> 01:30:54,929
发送到（如果我双击它的话）此完整URL。
sent to, if I double-click on it, this full URL here.

1806
01:30:54,930 --> 01:31:00,660
浏览器会自动通过以下方式将用户的输入附加到URL：
And the user's input is automatically by the browser appended to the URL via

1807
01:31:00,659 --> 01:31:02,909
问题q = cat。
question q=cat.

1808
01:31:02,909 --> 01:31:04,049
不只是猫。
And it's not just cats.

1809
01:31:04,050 --> 01:31:06,570
现在，我们有了自己非常简单的Google搜索引擎
We now have our own very simple Google search engine

1810
01:31:06,569 --> 01:31:08,649
如果需要，我们也可以在这里搜索狗。
where we can search for dogs, too, if we want.

1811
01:31:08,649 --> 01:31:13,379
并请注意，此处的URL更改为？= dogs。
And notice that the URL here changes to be ?=dogs.

1812
01:31:13,380 --> 01:31:16,202
因此，这就是网络现在的工作方式。
So, like, this is how the web now works.

1813
01:31:16,202 --> 01:31:18,160
我们之前谈到了互联网的运作方式，
We talked earlier about how the internet works,

1814
01:31:18,159 --> 01:31:21,359
您如何从A点获取原始数据，零和一，信息包
how you just get raw data, zeros and ones, packets of info from point A

1815
01:31:21,359 --> 01:31:23,339
指向B。这就是网络的工作方式。
to point B. This is now how the web works.

1816
01:31:23,340 --> 01:31:25,230
当您访问网站而不仅仅是
When you visit a website and don't just want

1817
01:31:25,229 --> 01:31:29,459
您想要搜索猫或狗的特定图片，例如猫或狗，
a specific picture of a cat or a dog, you want to search for cats or dogs,

1818
01:31:29,460 --> 01:31:33,450
或者您要登录网站，或者要退出amazon.com，
or you want to log into a website, or you want to check out of amazon.com,

1819
01:31:33,449 --> 01:31:38,009
提供用户输入，您总是在填写HTML表单
providing user input, you are always filling out HTML forms

1820
01:31:38,010 --> 01:31:40,890
看起来基本上就是这样
which look essentially just like this.

1821
01:31:40,890 --> 01:31:44,400
他们可能会有更多的投入，并且可能会更复杂一些，
They might have more inputs and they might be a little more complicated,

1822
01:31:44,399 --> 01:31:47,839
但它们是amazon.com，Facebook.com上的表单标签，
but they are form tag on amazon.com, on Facebook.com,

1823
01:31:47,840 --> 01:31:50,850
在任何具有一个或多个输入的网站上，
on any website with one or more inputs, that when

1824
01:31:50,850 --> 01:31:55,620
可以说是通过单击Enter或单击Submit或Search提交的
submitted, so to speak, via you hitting Enter or clicking Submit or Search

1825
01:31:55,619 --> 01:31:59,519
或任何带有按钮的标签，这就是下一个请求的获取方式
or whatever the button is labeled, that's how the next request gets

1826
01:31:59,520 --> 01:32:03,216
提交给服务器。
submitted to the server.

1827
01:32:03,216 --> 01:32:04,550
ew。
Whew.

1828
01:32:04,550 --> 01:32:07,610
这很多，而且还不是所有的HTML标记，
So that's a lot, and that's not all the HTML tags out there,

1829
01:32:07,609 --> 01:32:09,549
但这就是HTML的全部思想，对不对？
but that's all the ideas of HTML, right?

1830
01:32:09,550 --> 01:32:12,910
确实就像打开标签和关闭标签，其中一些
It really is like open tags and close tags, some of which

1831
01:32:12,909 --> 01:32:16,239
可以具有零个或多个属性，并且仅仅了解
can have zero or more attributes, and just understanding

1832
01:32:16,239 --> 01:32:18,819
那个心理模型，现在，通过表格，我们
that mental model, and now, via forms, we

1833
01:32:18,819 --> 01:32:21,249
具有提交机制，可以这么说，
have the mechanism for submitting, so to speak,

1834
01:32:21,250 --> 01:32:25,149
用户输入以搜索网站，Web服务器。
user input to search to websites, to web servers.

1835
01:32:25,149 --> 01:32:27,519
只是在这里叫其他动词，
And just to call out that other verb here,

1836
01:32:27,520 --> 01:32:31,150
事实证明Google只支持将get用作其搜索程序。
turns out Google only supports get for its search program.

1837
01:32:31,149 --> 01:32:36,559
在www.google.com/search上，您只能使用get，但是POST也很常见。
At www.google.com/search, you can only use get, but POST is also very common.

1838
01:32:36,560 --> 01:32:38,327
实际上，POST是一个不同的动词，
And in fact, POST is a different verb that

1839
01:32:38,327 --> 01:32:39,910
可以塞进那个信封里
can be tucked inside of that envelope.

1840
01:32:39,909 --> 01:32:46,389
POST实际上会更改浏览器中发生的情况，从而使q = cats
And POST actually changes what happens in the browser so that q=cats

1841
01:32:46,390 --> 01:32:50,470
并且q = dogs不会显示在URL中，因为这实际上是彼此
and q=dogs does not show up in the URL, because this is actually one other

1842
01:32:50,470 --> 01:32:51,728
威胁到我们的隐私，对不对？
threat to our privacy, right?

1843
01:32:51,728 --> 01:32:54,520
如果您小的兄弟姐妹会转到您的浏览器或您的父母
If you're little sibling comes over to your browser or your parents

1844
01:32:54,520 --> 01:32:56,353
在网上搜索后，他们
after you've been searching on the web, they

1845
01:32:56,353 --> 01:32:59,650
可以滚动浏览您浏览器的整个历史记录。
can scroll through, often, your entire history of your browser.

1846
01:32:59,649 --> 01:33:00,189
为什么？
Why?

1847
01:33:00,189 --> 01:33:02,979
因为从字面上看，您在Google或Bing上搜索的所有内容
Because literally everything you search for on Google or Bing

1848
01:33:02,979 --> 01:33:06,399
或由于这种机制而最终出现在URL中的内容。
or whatever ended up in the URL because of this mechanism.

1849
01:33:06,399 --> 01:33:08,679
为了方便用户，您的浏览器倾向于
And for user convenience, your browser tends

1850
01:33:08,680 --> 01:33:11,170
来缓存或保存所有这些URL。
to cache or save all of those URLs.

1851
01:33:11,170 --> 01:33:13,720
现在，这一定程度上是侵入性的，
Now, that's marginally intrusive, certainly,

1852
01:33:13,720 --> 01:33:16,840
当您有喜欢的室友或类似的家庭成员时，
when you have roommates or family members of the like to your privacy,

1853
01:33:16,840 --> 01:33:20,080
但是特别要注意的是，如果您正在注册网站
but it's especially concerning if you are registering for websites

1854
01:33:20,079 --> 01:33:22,899
或使用用户名，密码和信用卡签出
or checking out with usernames and passwords and credit card

1855
01:33:22,899 --> 01:33:25,239
数字和更敏感的事物。
numbers and things that are even more sensitive.

1856
01:33:25,239 --> 01:33:28,869
长话短说，POST，这只是您可以使用的另一个动词
Long story short, POST, which is just a different verb that you can use

1857
01:33:28,869 --> 01:33:32,919
在HTTP中，隐藏了q = cats。
in HTTP, that hides the q=cats.

1858
01:33:32,920 --> 01:33:35,320
那隐藏的信用卡号就等于这个。
That hides the credit card number equals this.

1859
01:33:35,319 --> 01:33:39,129
从本质上讲，这隐含了等于等于更深的密码
That hides the password equals that, essentially, metaphorically, deeper

1860
01:33:39,130 --> 01:33:39,820
在信封里。
in the envelope.

1861
01:33:39,819 --> 01:33:42,759
它没有将其放入URL栏中，但仍将其发送给它
It does not put it into the URL bar, but it still sends it

1862
01:33:42,760 --> 01:33:46,150
私下访问服务器。
to the server a little more privately.

1863
01:33:46,149 --> 01:33:46,959
好的。
All right.

1864
01:33:46,960 --> 01:33:48,350
好多
That was a lot.

1865
01:33:48,350 --> 01:33:52,600
大量的标签同时使这种能力达到了顶峰-
That was a lot of tags all at once culminating in this ability to get--

1866
01:33:52,600 --> 01:33:53,560
提交用户输入。
to submit user input.

1867
01:33:53,560 --> 01:33:57,460
但是，关于思想，语法的任何问题，
But any questions, then, on the ideas, the syntax,

1868
01:33:57,460 --> 01:34:02,600
还是用这种语言HTML制作网页的含义？
or the implications of making web pages with this language HTML?

1869
01:34:02,600 --> 01:34:04,025
没什么，布莱恩？
Nothing from you, Brian?

1870
01:34:04,024 --> 01:34:05,069
布莱恩·于：很好。
BRIAN YU: All good here.

1871
01:34:05,069 --> 01:34:06,559
DAVID J. MALAN：好吧，我有点
DAVID J. MALAN: All right, well, I'm kind of

1872
01:34:06,560 --> 01:34:09,768
迄今为止我所做的所有工作都使我感到尴尬，因为所有这些页面
embarrassed by all of the work I've done thus far, because all of these pages

1873
01:34:09,768 --> 01:34:13,520
令人难以置信的无聊，非常令人动容，而且无处可去
are incredibly boring and very underwhelming and nowhere close

1874
01:34:13,520 --> 01:34:17,210
您和我日常所熟悉的那种用户界面
to the sort of user interfaces that you and I are familiar with day-to-day

1875
01:34:17,210 --> 01:34:18,830
在使用实际网络时。
when using the actual web.

1876
01:34:18,829 --> 01:34:22,279
因此，让我继续并关闭这些标签中的大多数标签，让我们过渡
So let me go ahead and close most of these tabs, and let's transition

1877
01:34:22,279 --> 01:34:24,949
不专注于网页的结构
to not focusing on the structure of web pages

1878
01:34:24,949 --> 01:34:28,009
一个人，但现在专注于网络美学
alone, but now focusing on the aesthetics of web

1879
01:34:28,010 --> 01:34:32,570
页面，网页的样式化，现在您可以在其中进行艺术创作
pages, the stylization of web pages, where now your artistic flair can

1880
01:34:32,569 --> 01:34:33,499
真的出来了
really come out.

1881
01:34:33,500 --> 01:34:36,919
我们可以最终开始重新创建用户界面
And we can begin to recreate user interfaces ultimately

1882
01:34:36,920 --> 01:34:39,350
更像我们从头开始的世界
more like our world of scratch, where you actually see

1883
01:34:39,350 --> 01:34:43,980
颜色，形状，图像和声音，但仍使用这些基本建筑
colors and shapes and images and sounds, but still using these basic building

1884
01:34:43,979 --> 01:34:44,479
块。
blocks.

1885
01:34:44,479 --> 01:34:48,679
为此，我们需要一种称为CSS或层叠样式表的语言。
And for this, we need a language called CSS or Cascading Style Sheets.

1886
01:34:48,680 --> 01:34:53,060
这也不是编程语言，而是另一种语言
This, too, not a programming language, but it is an additional language

1887
01:34:53,060 --> 01:34:57,860
您可以将其与HTML结合使用以对页面进行样式化
that you can use in conjunction with HTML in order to stylize your pages

1888
01:34:57,859 --> 01:34:59,329
并使它们更漂亮。
and make them prettier.

1889
01:34:59,329 --> 01:35:02,509
CSS归结为使用所谓的属性。
CSS boils down to the use of what we'll call properties.

1890
01:35:02,510 --> 01:35:06,110
属性在本质上与变量相似，或更笼统地说，
Properties are similar in spirit to variables, or more generally,

1891
01:35:06,109 --> 01:35:07,729
它们只是更多的键值对。
they're just more key value pairs.

1892
01:35:07,729 --> 01:35:09,619
再一次，请注意这个重复出现的主题。
And again, notice this recurring theme.

1893
01:35:09,619 --> 01:35:13,909
就像我们在几周前在Python中引入了字典或字典一样。
Like, we introduced dictionaries or dicts in Python a couple of weeks ago.

1894
01:35:13,909 --> 01:35:17,299
这些只是哈希表形式的键值对的集合，
Those are just collections of key value pairs in the form of a hash table,

1895
01:35:17,300 --> 01:35:18,110
本质上。
essentially.

1896
01:35:18,109 --> 01:35:21,109
刚才我们看到了HTML中的属性
We saw just a moment ago attributes in HTML

1897
01:35:21,109 --> 01:35:23,149
本质上是键值对。
which essentially are key value pairs.

1898
01:35:23,149 --> 01:35:28,819
q = cats是一个键，等于一个值。 q = dogs是一个键，等于一个值。
q=cats is a key equals a value. q=dogs is a key equals a value.

1899
01:35:28,819 --> 01:35:32,569
CSS有相同的想法，但是由于不同的人发明了这个想法，
CSS has the same idea, but because different people invented this,

1900
01:35:32,569 --> 01:35:35,449
他们称这些东西为属性而不是属性。
they call these things properties instead of attributes.

1901
01:35:35,449 --> 01:35:38,059
但这是相同的想法，只是词汇不同。
But it's the same idea, just a different vocabulary.

1902
01:35:38,060 --> 01:35:40,730
而且会有不同的申请方式
And there's going to be different ways to apply

1903
01:35:40,729 --> 01:35:44,299
不同的属性，例如颜色和字体大小以及位置，
different properties, like color and font size and positioning,

1904
01:35:44,300 --> 01:35:48,330
使用CSS的HTML标签。
to HTML tags using CSS.

1905
01:35:48,329 --> 01:35:49,469
那么我们如何到达那里？
So how do we get there?

1906
01:35:49,470 --> 01:35:51,710
好吧，事实证明CSS是一种语言
Well, it turns out that CSS is a language

1907
01:35:51,710 --> 01:35:55,370
您可以将其与HTML结合使用，
that you can use in conjunction with HTML,

1908
01:35:55,369 --> 01:35:57,589
也就是说，您可以从HTML页面开始
which is to say you can start with an HTML page

1909
01:35:57,590 --> 01:36:00,830
像这样，就像我们已经创建的那样，问好，标题，问好，正文，
like this, like we've already created, saying hello, title and hello, body,

1910
01:36:00,829 --> 01:36:03,529
但您可以添加一些其他属性
but you can add some additional attributes

1911
01:36:03,529 --> 01:36:06,439
和/或对其进行标记以开始对其进行样式化。
and/or tags to it to begin to stylize it.

1912
01:36:06,439 --> 01:36:10,579
您实际上可以在网页顶部添加样式标签，
You can actually add a style tag in the head of the web page,

1913
01:36:10,579 --> 01:36:14,269
在这里，如图，这是我们可以放在脑海中的另一件事，
here, pictured here, which is another thing we could put inside the head,

1914
01:36:14,270 --> 01:36:17,130
尽管严格来说，它也可以进入人体其他部位。
though strictly speaking, it can go elsewhere in the body as well.

1915
01:36:17,130 --> 01:36:20,420
或者，您可以链接到单独文件中的文件。
Alternatively, you can link to a file in a separate file.

1916
01:36:20,420 --> 01:36:22,920
因此，在那里我们将看到几种不同的方法。
And so we'll see a couple of different approaches there.

1917
01:36:22,920 --> 01:36:26,630
但是在我们这样做之前，让我们通过一些具体的例子使之更加真实。
But before we do that, let's make this more real with some concrete examples.

1918
01:36:26,630 --> 01:36:28,460
让我继续前进，举一个新的例子
Let me go ahead and whip up a new example

1919
01:36:28,460 --> 01:36:33,590
这里是一个名为css.html的文件，目的只是为了演示这种新语言。
here in a file called css.html just to demonstrate this new language.

1920
01:36:33,590 --> 01:36:37,460
让我像往常一样，从我的原始HTML开始，
Let me go ahead and start, as always, with just my raw HTML,

1921
01:36:37,460 --> 01:36:39,560
和我的！DOCTYPE html。
with my !DOCTYPE html.

1922
01:36:39,560 --> 01:36:42,620
让我继续并做我的html lang = zh-CN。
Let me go ahead and do my html lang=en.

1923
01:36:42,619 --> 01:36:45,859
然后在这里，我将做页面的标题，即页面的标题。
Then down here, I'll do the head of my page, the title of my page.

1924
01:36:45,859 --> 01:36:48,019
我只是将其命名为CSS。
I'll just title it simply css.

1925
01:36:48,020 --> 01:36:51,680
我的网页的正文-现在让我们实际做一些有趣的事情。
The body of my web page-- and now let's actually do something interesting.

1926
01:36:51,680 --> 01:36:56,240
让我介绍一些其他可用语言的HTML标记。
Let me introduce a few more HTML tags that are available in the language.

1927
01:36:56,239 --> 01:36:57,486
一种称为标头。
One is called header.

1928
01:36:57,487 --> 01:37:00,320
在这里，我将继续讲约翰·哈佛（John Harvard）之类的话。
And here, I'm going to go ahead and say something like John Harvard.

1929
01:37:00,319 --> 01:37:03,949
我将为哈佛大学的创始人约翰·哈佛大学做一个主页。
I'm going to make a homepage for John Harvard, the founder of Harvard.

1930
01:37:03,949 --> 01:37:07,129
让我继续这里并做页面的主要部分。
And let me go ahead here and do a main section of my page.

1931
01:37:07,130 --> 01:37:10,460
我要说欢迎来到我的主页。
And I'm going to say welcome to my home page.

1932
01:37:10,460 --> 01:37:12,890
然后在这里，我将拥有一个所谓的页脚。
And then down here, I'm going to have a so-called footer.

1933
01:37:12,890 --> 01:37:15,830
在这里，我要说的是版权，
And inside of here, I'm going to say copyright,

1934
01:37:15,829 --> 01:37:18,619
我会写版权符号John Harvard。
and I'll write copyright symbol John Harvard.

1935
01:37:18,619 --> 01:37:20,959
如此简单的网页，三行。
So super simple web page, three lines.

1936
01:37:20,960 --> 01:37:22,640
这是三个新的HTML标签。
And just here's three new HTML tags.

1937
01:37:22,640 --> 01:37:25,890
同样，您只会从一堂课，一本书或在线参考资料中知道这一点，
You would only know this, again, from a class, a book, or an online reference,

1938
01:37:25,890 --> 01:37:29,240
但有些标签称为页眉，主要和页脚
but there are tags called header, main, and footer

1939
01:37:29,239 --> 01:37:30,769
没什么特别的。
that don't do anything special.

1940
01:37:30,770 --> 01:37:35,030
它们不会像标题标签H1到H6那样使事情变得大胆。
They don't make things big and bold like the heading tags did, H1 through H6.

1941
01:37:35,029 --> 01:37:37,519
它们就是所谓的语义标签。
They are just what are called semantic tags.

1942
01:37:37,520 --> 01:37:40,138
它们不只是通用段落标签，
They are more than generic paragraph tags,

1943
01:37:40,137 --> 01:37:41,929
但是他们可以帮助您，程序员，他们
but they help you, the programmer, and they

1944
01:37:41,930 --> 01:37:44,880
帮助浏览器知道哦，这是页面的标题。
help the browser know that, oh, this is the header of your page.

1945
01:37:44,880 --> 01:37:46,380
这是页面的主要部分。
This is the main part of your page.

1946
01:37:46,380 --> 01:37:48,050
这是页脚，可以再次提供帮助，
This is the footer, which can help, again,

1947
01:37:48,050 --> 01:37:51,050
借助屏幕阅读器，区分页面上真正重要的内容。
with screen readers, distinguishing what's really important on the page.

1948
01:37:51,050 --> 01:37:53,470
它可以提供翻译工具（例如Google Translate）的帮助，
It can help with translation tools, like Google Translate,

1949
01:37:53,470 --> 01:37:55,220
知道您实际要翻译的内容，
to know what you actually want translated,

1950
01:37:55,220 --> 01:37:58,340
像页面的主要部分一样重要的信息，
like the main part of the page and not less important info,

1951
01:37:58,340 --> 01:37:59,720
例如页眉或页脚。
like the header or footer.

1952
01:37:59,720 --> 01:38:03,270
所以只有三个HTTP标签，但是您可以将它们视为段落标签
So just three HTTP tags, but you can think of them like paragraph tags

1953
01:38:03,270 --> 01:38:06,090
但使用更具体的名称。
but with more specific names.

1954
01:38:06,090 --> 01:38:06,590
好的。
All right.

1955
01:38:06,590 --> 01:38:10,130
因此，让我继续保存此文件，打开-而不是我的狗在这里，
So let me go ahead and save this file, open up-- not my dogs here,

1956
01:38:10,130 --> 01:38:11,300
但回到索引。
but go back to the index.

1957
01:38:11,300 --> 01:38:13,670
现在，我有了一个新文件css.html。
And now I have a new file, css.html.

1958
01:38:13,670 --> 01:38:15,650
让我们单击它，瞧。
Let's click it, and voila.

1959
01:38:15,649 --> 01:38:18,919
您知道，这确实让人难以理解，但它确实做到了。
You know, it's pretty underwhelming, but it does what it says.

1960
01:38:18,920 --> 01:38:20,780
此内容有三行内容。
It's got three lines with this content.

1961
01:38:20,779 --> 01:38:25,489
让我们开始对其进行样式化，并尝试使其更具吸引力。
Let's begin to stylize this and try to make it a little more inviting.

1962
01:38:25,489 --> 01:38:28,819
为此，让我继续添加样式属性
So to do this, let me go ahead and add a style attribute

1963
01:38:28,819 --> 01:38:30,346
等号引用取消引用。
with equals quote unquote.

1964
01:38:30,346 --> 01:38:32,179
现在，这里的事情变得有些奇怪了。
Now, here's where things get a little weird.

1965
01:38:32,180 --> 01:38:35,870
实际上，在HTML和CSS领域，
In the world of HTML and CSS, you do actually,

1966
01:38:35,869 --> 01:38:38,729
或者实际上可以将两种语言混合在一起。
or can actually, commingle the two languages.

1967
01:38:38,729 --> 01:38:40,099
我们已经看到了这一点。
And we kind of saw this already.

1968
01:38:40,100 --> 01:38:43,880
我们看到了其中带有SQL的Python代码。
We saw Python code with SQL inside of it.

1969
01:38:43,880 --> 01:38:47,780
今天，我们看到的是带有CSS的HTML代码。
Today, we're seeing HTML code with CSS inside of it.

1970
01:38:47,779 --> 01:38:49,669
因此，在这些引号中，我要输入
So inside of these quotes, I'm going to put

1971
01:38:49,670 --> 01:38:52,430
其中一些所谓的属性，键值对。
some of those so-called properties, key value pairs.

1972
01:38:52,430 --> 01:38:56,270
我继续将标题的字体大小更改为大
Let me go ahead and change the font size of my header to be large

1973
01:38:56,270 --> 01:38:59,570
让我继续，使文本居中对齐。
and let me go ahead and align the text as centered.

1974
01:38:59,569 --> 01:39:00,829
注意这里的模式。
Notice the pattern here.

1975
01:39:00,829 --> 01:39:01,549
这是新的。
It's new.

1976
01:39:01,550 --> 01:39:02,570
这不是等号。
It's not equal sign.

1977
01:39:02,569 --> 01:39:03,819
没有其他引号。
There's not additional quotes.

1978
01:39:03,819 --> 01:39:06,319
再次是因为左手没有和右手说话，
It's because, again, left hand wasn't talking to right hand,

1979
01:39:06,319 --> 01:39:09,309
从本质上讲，不同的人发明了HTML和CSS。
and different people invented HTML and CSS, essentially.

1980
01:39:09,310 --> 01:39:13,960
但是font-size是CSS属性的名称，是一种美学上的细节。
But font-size is the name of a CSS property, an aesthetic detail.

1981
01:39:13,960 --> 01:39:18,040
冒号是将键与值分开的东西，在这种情况下是值
Colon is what separates the key from the value, and the value in this case

1982
01:39:18,039 --> 01:39:18,639
大。
is large.

1983
01:39:18,640 --> 01:39:21,223
我选择大尺寸，因为它是可用的尺寸之一。
And I'm choosing large because it's one of the available ones.

1984
01:39:21,222 --> 01:39:24,649
您也有小型，中型，大型，特大号以及其他一系列。
You've got small, medium, large, extra large, and a bunch of others as well.

1985
01:39:24,649 --> 01:39:28,419
您也可以使用特定的字体大小或像素大小。
You can also use specific font sizes or pixel sizes as well.

1986
01:39:28,420 --> 01:39:32,030
text-align将在中间对齐文本冒号。
text-align is going to align text colon in the center.

1987
01:39:32,029 --> 01:39:34,209
现在，让我继续在这里做类似的事情。
Now, let me go ahead and do something similar here.

1988
01:39:34,210 --> 01:39:40,690
在主标签上，让我们设置中等字体大小，然后使文本居中对齐。
On the main tag, let's do font-size medium, and then text-align center.

1989
01:39:40,689 --> 01:39:45,069
然后在这里，让我们做style =“ font-size small，
And then down here, let's do style="font-size small,

1990
01:39:45,069 --> 01:39:46,069
因为它是页脚。
because it's the footer.

1991
01:39:46,069 --> 01:39:48,789
不那么重要。文本居中对齐。
It's less important. text-align center.

1992
01:39:48,789 --> 01:39:50,529
好的，保存文件。
All right, saving the file.

1993
01:39:50,529 --> 01:39:52,809
我很伤心地说分号回来了。
And I'm sad to say the semicolons are back.

1994
01:39:52,810 --> 01:39:54,890
并非在所有地方都严格要求它们，
They're not strictly necessary in all places,

1995
01:39:54,890 --> 01:39:56,290
但我这样做是为了保持一致性。
but I'm doing it for consistency.

1996
01:39:56,289 --> 01:40:00,129
在这里肯定需要它们来将键与其他键分开。
They're definitely needed here to separate keys from other keys.

1997
01:40:00,130 --> 01:40:01,570
让我再次打开此页面。
Let me open up this page again.

1998
01:40:01,569 --> 01:40:03,219
让我点击重新加载。
Let me hit reload.

1999
01:40:03,220 --> 01:40:05,480
瞧，这有点漂亮。
And voila, it's a little prettier.

2000
01:40:05,479 --> 01:40:07,419
没什么可写的，真的，
It's nothing to write home about, really,

2001
01:40:07,420 --> 01:40:10,900
但约翰·哈佛大学的“欢迎使用我的主页”与中型一样大，
but it has John Harvard as large, "Welcome to my home page" as medium,

2002
01:40:10,899 --> 01:40:13,629
和页脚很小。
and the footer as something small.

2003
01:40:13,630 --> 01:40:14,500
所以那还不错。
So that's not bad.

2004
01:40:14,500 --> 01:40:15,750
让我也清理一下。
And let me clean this up, too.

2005
01:40:15,750 --> 01:40:18,069
此开括号c闭括号
This open parentheses c close parentheses

2006
01:40:18,069 --> 01:40:19,869
不一定那么漂亮。
isn't necessarily that pretty.

2007
01:40:19,869 --> 01:40:24,069
我不知道该符号在屏幕上的什么位置，但让我继续前进
I don't know where the symbol is on my screen, but let me go ahead here

2008
01:40:24,069 --> 01:40:30,679
让我输入“＆”号169分号。
and let me type out this, ampersand hash 169 semicolon.

2009
01:40:30,680 --> 01:40:34,930
这很奇怪，但这是HTML的一项功能，称为HTML实体，该实体
This is weird, but this is a feature of HTML called an HTML entity, which

2010
01:40:34,930 --> 01:40:40,570
是一个数字代码，用于标识通常不是
is a numeric code that identifies a symbol that is often not

2011
01:40:40,569 --> 01:40:43,419
在键盘上，但您可能仍要显示。
on your keyboard but you might want to display anyway.

2012
01:40:43,420 --> 01:40:45,040
让我继续在这里重新加载。
Let me go ahead here and reload.

2013
01:40:45,039 --> 01:40:48,759
瞧，如果我放大一下，现在我们有一个适当的版权符号。
And voila, if I zoom in, now we have a proper copyright symbol.

2014
01:40:48,760 --> 01:40:52,180
还有其他用于其他符号的HTML实体
And there's other HTML entities for other symbols

2015
01:40:52,180 --> 01:40:54,650
同样，特别是如果您在键盘上看不到它们的话。
as well, especially if you can't see them on your keyboard.

2016
01:40:54,649 --> 01:40:55,149
好的。
All right.

2017
01:40:55,149 --> 01:40:56,469
此后会发生什么？
What happens after this?

2018
01:40:56,470 --> 01:41:00,110
不错，但是我觉得这里很优雅。
That's not bad, but I feel like there's an inelegance here.

2019
01:41:00,109 --> 01:41:02,619
谁能在我到目前为止编写的代码中认出，
Can anyone recognize in the code I've written thus far,

2020
01:41:02,619 --> 01:41:04,969
即使您以前从未看过HTML，
even if you've never seen HTML before--

2021
01:41:04,970 --> 01:41:08,660
是否有机会进行更好的设计？
is there an opportunity for better design?

2022
01:41:08,659 --> 01:41:12,259
我声称这是正确的，但请随时聊天。
I claim it's correct, but feel free to chime in the chat.

2023
01:41:12,260 --> 01:41:14,690
我可以改善设计吗？
Can I improve the design?

2024
01:41:14,689 --> 01:41:17,659
即使我之前说过复制粘贴是不好的，
And even though I said earlier that copy paste is bad,

2025
01:41:17,659 --> 01:41:19,669
这并不意味着我们不能-
that doesn't mean we can't--

2026
01:41:19,670 --> 01:41:22,460
或在HTML中是必需的，这并不意味着我们
or is necessary in HTML, that doesn't mean we

2027
01:41:22,460 --> 01:41:26,760
在某些地方无法解决。
can't chip away at it in some places.

2028
01:41:26,760 --> 01:41:29,575
布莱恩，有什么要跳出来的吗？
Brian, anything jumping out?

2029
01:41:29,574 --> 01:41:32,199
布莱恩·于：有人说您的风格属性是
BRIAN YU: Some people are saying that your style attributes are

2030
01:41:32,199 --> 01:41:33,969
开始变得很长。
starting to get very long.

2031
01:41:33,970 --> 01:41:36,640
DAVID J. MALAN：他们越来越长，我敢说多余。
DAVID J. MALAN: They are getting long, and I dare say redundant.

2032
01:41:36,640 --> 01:41:38,950
即使字体大小在变化，
Even though the font size is changing, so that

2033
01:41:38,949 --> 01:41:42,009
似乎是必需的，文本居中对齐，文本居中对齐，
seems kind of necessary, text-align center, text-align center,

2034
01:41:42,010 --> 01:41:44,510
文本居中对齐-似乎没有必要，对吧？
text-align center-- that seems unnecessary, right?

2035
01:41:44,510 --> 01:41:46,570
就像，为什么我要一遍又一遍呢？
Like, why am I doing that again and again?

2036
01:41:46,569 --> 01:41:49,239
但是这里就是CSS中C语言出现的地方。
But here's where the C in CSS comes in.

2037
01:41:49,239 --> 01:41:53,649
CSS是级联样式表，实际上是指瀑布
CSS is Cascading Style Sheets, which literally refers to a waterfall

2038
01:41:53,649 --> 01:41:55,572
这些属性的效果。
effect of these properties.

2039
01:41:55,573 --> 01:41:57,490
所以我真正能做的是-让我继续
So what I can actually do is-- let me go ahead

2040
01:41:57,489 --> 01:42:03,609
并从页眉，主页脚和页脚中删除文本对齐的中心。
and remove text-align center from each of header, main, and footer.

2041
01:42:03,609 --> 01:42:05,089
让我变得更聪明。
And let me be a little smarter.

2042
01:42:05,090 --> 01:42:08,350
让我谈谈我的身体标签，也就是所谓的父标签，
Let me go up to my body tag, which is the so-called parent tag,

2043
01:42:08,350 --> 01:42:13,270
对于这三个，在其中添加样式属性，并在其中放置文本对齐中心，
for those three, add a style attribute there, and put text-align center there,

2044
01:42:13,270 --> 01:42:17,200
并相信因为主体是父代，所以它的任何属性
and trust that because body is the parent, any properties it

2045
01:42:17,199 --> 01:42:20,949
将会下降到可以说是它的孩子，
has will cascade down onto, so to speak, its children,

2046
01:42:20,949 --> 01:42:24,609
因此，我可以将文本对齐定义在一个位置而不是三个位置。
thereby allowing me to define text-align in one place instead of three.

2047
01:42:24,609 --> 01:42:28,329
让我继续重新加载页面，瞧，什么都没有改变，
Let me go ahead and reload the page, and voila, nothing has changed,

2048
01:42:28,329 --> 01:42:31,479
但是我现在声称我的页面设计得更好
but I claim now that my page is better designed

2049
01:42:31,479 --> 01:42:35,169
因为我已经消除了多余的部分，并把我的台词写给了Brian
because I've eliminated that redundancy and made my lines, to Brian's

2050
01:42:35,170 --> 01:42:38,050
点，也要短一点。
point, a little shorter as well.

2051
01:42:38,050 --> 01:42:41,050
所以这很干净，但这似乎有点滑。
So that's pretty clean, but this seems a little bit of a slippery slope.

2052
01:42:41,050 --> 01:42:43,510
如果我想做一个更大的主页，那我肯定会
If I wanted to make a larger home page, which surely I

2053
01:42:43,510 --> 01:42:46,060
拥有更多这些内容，可能会拥有所有这些样式
might, with lots more content, having all of these style

2054
01:42:46,060 --> 01:42:48,470
各地的属性很快就会变得混乱。
attributes all over the place very quickly gets messy.

2055
01:42:48,470 --> 01:42:50,678
而在现实世界中，这让您和我都很难
And in the real world, it makes it hard for you and I

2056
01:42:50,677 --> 01:42:54,219
与比您或我更好的艺术家合作。
to collaborate with better artists than you or I might be.

2057
01:42:54,220 --> 01:42:56,560
对我们中的一个人来说，如果在团队中工作可能会很好，
It might be nice for one of us, if working on a team,

2058
01:42:56,560 --> 01:42:58,630
甚至对于CS50的最终项目来说-
maybe for even a CS50 final project--

2059
01:42:58,630 --> 01:43:01,720
我们一个人做HTML，我们一个人做CSS。
one of us does the HTML, one of us does the CSS.

2060
01:43:01,720 --> 01:43:04,240
如果你和我在尝试，那将是一团糟
This would be a mess if you and I were trying

2061
01:43:04,239 --> 01:43:06,799
在相同的文件上进行协作。
to collaborate on the same exact file.

2062
01:43:06,800 --> 01:43:11,050
因此，让我们看看我们是否无法采取措施将这些因素排除在外并保持
So let's see if we can't take a step toward factoring these out and keeping

2063
01:43:11,050 --> 01:43:12,770
HTML和CSS分开。
HTML and CSS separate.

2064
01:43:12,770 --> 01:43:14,150
那我该怎么办呢？
So how might I do this?

2065
01:43:14,149 --> 01:43:17,619
好吧，让我继续前进，摆脱掉所有这些。
Well, let me go ahead here and get rid of all of this.

2066
01:43:17,619 --> 01:43:20,259
让我摆脱所有这些样式属性，再次，
Let me get rid of all of these style attributes, which, again,

2067
01:43:20,260 --> 01:43:24,280
只是感觉不太容易维护，当然是因为我的页面越来越长。
just doesn't feel very maintainable, certainly as my page gets longer.

2068
01:43:24,279 --> 01:43:27,639
让我过渡到之前看过的预告片的其他格式，
And let me transition to that other format we saw a teaser for before,

2069
01:43:27,640 --> 01:43:29,470
样式标签。
a style tag.

2070
01:43:29,470 --> 01:43:33,490
不是属性，而是可以在此处放在网页顶部的标记。
Not an attribute, but a tag that can go in the head of the web page here.

2071
01:43:33,489 --> 01:43:36,739
让我继续，在这里做一些不同的事情。
And let me go ahead and do something a little different here.

2072
01:43:36,739 --> 01:43:44,019
让我继续说我的标题应该是文本对齐的中心。
Let me go ahead and say my header should be text-align center.

2073
01:43:44,020 --> 01:43:48,730
我的主要部分应该是文本对齐-
My main part should be text-align--

2074
01:43:48,729 --> 01:43:50,649
让我这样做，就像我们在C中所做的一样
let me do this just like we did in C--

2075
01:43:50,649 --> 01:43:52,719
文本居中对齐。
text-align center.

2076
01:43:52,720 --> 01:43:57,280
然后我的页脚将是文本对齐的中心。
And then my footer will be text-align center.

2077
01:43:57,279 --> 01:44:02,439
然后为了保持一致性，与以前一样，使用大字体。
And then just for consistency, with before, font-size large.

2078
01:44:02,439 --> 01:44:05,619
下面是主要的字体大小的媒体。
Down here in main, font-size medium.

2079
01:44:05,619 --> 01:44:09,427
在这里，字体小。
Down here, font-size small.

2080
01:44:09,427 --> 01:44:11,469
IDE无法识别所有这些关键字，
The IDE is not recognizing all of these keywords,

2081
01:44:11,470 --> 01:44:14,020
但可以肯定的是，有些是白色的，有些是蓝色的。
but it's OK that some are white, some are blue here.

2082
01:44:14,020 --> 01:44:17,740
因此，这里仍然有一些冗余，但是请注意我现在在做什么。
So there's still some redundancy here, but notice what I'm doing now.

2083
01:44:17,739 --> 01:44:22,989
在我的样式标签内，允许使用所谓的CSS选择器。
Inside of my style tag, it is allowed to use what's called a CSS selector.

2084
01:44:22,989 --> 01:44:26,199
而且选择器的类型不同，但现在我们看到的是
And there's different types of selectors, but the one we're seeing now

2085
01:44:26,199 --> 01:44:27,879
是所谓的类型选择器。
is what's called the type selector.

2086
01:44:27,880 --> 01:44:31,660
它的名字有点奥秘，但这只是意味着如果您要样式
And it's a bit arcanely named, but this just means that if you want to style

2087
01:44:31,659 --> 01:44:36,189
某个标签的每个实例，每个标头标签，每个主标签，
every instance of a certain tag, every header tag, every main tag,

2088
01:44:36,189 --> 01:44:40,029
每个页脚标签，从字面上看，您都可以在样式标签内，
every footer tag, you can literally, inside of a style tag,

2089
01:44:40,029 --> 01:44:44,919
贴上标签的名称，然后放一对大括号-表示歉意，
put the name of that tag, then a pair of curly braces-- apologies,

2090
01:44:44,920 --> 01:44:46,750
他们回来了CSS-
they are back for CSS--

2091
01:44:46,750 --> 01:44:48,729
然后在花括号里面，你只是
and then inside of those curly braces, you just

2092
01:44:48,729 --> 01:44:53,469
将这些键值对放入，属性之间用分号分隔。
put those key value pairs, the properties separated by semicolons.

2093
01:44:53,470 --> 01:44:55,900
我在单独的行上很好地将其样式化
And I'm stylizing it nice on separate lines

2094
01:44:55,899 --> 01:44:57,579
只是为了使它更具可读性。
just so that it's a lot more readable.

2095
01:44:57,579 --> 01:44:59,412
效果不会有任何不同。
The effect is not going to be any different.

2096
01:44:59,412 --> 01:45:02,709
如果我回到其他标签页并重新加载，则没有任何改变，
If I go back to my other tab and reload, nothing has changed,

2097
01:45:02,710 --> 01:45:07,300
但是我已经开始从其余页面中讲解CSS。
but I've begun to tease out the CSS from the rest of my page.

2098
01:45:07,300 --> 01:45:09,520
但是请注意，这里仍然有一些冗余，
But notice there's still some redundancy here,

2099
01:45:09,520 --> 01:45:12,940
例如，我可以从此处删除文本对齐中心，
and I could remove, for instance, text-align center from here,

2100
01:45:12,939 --> 01:45:15,429
从此处文本居中对齐，从此处文本居中对齐，
text-align center from here, text-align center from here,

2101
01:45:15,430 --> 01:45:17,530
并可能将其应用于身体。
and maybe apply it to the body instead.

2102
01:45:17,529 --> 01:45:19,599
但是我可以使用其他类型的选择器。
But there's other types of selectors I can use.

2103
01:45:19,600 --> 01:45:23,650
如果要以可重用的方式定义一个或多个属性
If you want to define one or more properties in a reusable way

2104
01:45:23,649 --> 01:45:27,279
这样您就可以在各种标签上使用它们，结果就是CSS
such that you can use them on all sorts of tags, turns out CSS

2105
01:45:27,279 --> 01:45:29,079
支持所谓的类。
supports what are called classes.

2106
01:45:29,079 --> 01:45:31,139
我将继续执行此操作。
And I'm going to go ahead and do this instead.

2107
01:45:31,140 --> 01:45:34,600
不仅仅是说我的标题的字体大，
Instead of just saying my header is going to have a font size of large,

2108
01:45:34,600 --> 01:45:37,240
我将介绍CSS中的所谓的类，
I'm going to introduce what's called a class in CSS,

2109
01:45:37,239 --> 01:45:42,019
语法是使用点，然后使用您自己选择的关键字。
the syntax for which is to use a dot and then a keyword of your own choice.

2110
01:45:42,020 --> 01:45:45,130
我将把这第一组属性称为.large，
And I'm going to call this first set of properties .large,

2111
01:45:45,130 --> 01:45:52,420
下一组属性.medium和下一组属性.small。
this next set of properties .medium, and this next set of properties .small.

2112
01:45:52,420 --> 01:45:55,000
从点开始是有点奇怪的。
And this is a little weird that it's starting with a dot.

2113
01:45:55,000 --> 01:45:57,339
那是因为人类决定了
That's just because humans decided that when

2114
01:45:57,340 --> 01:46:00,670
您定义了所谓的类，一组可重用的属性，
you define what's called a class, a reuseable set of properties,

2115
01:46:00,670 --> 01:46:02,440
您以一个点开始您的关键字。
you start your keyword with a dot.

2116
01:46:02,439 --> 01:46:04,231
我要给自己一个人。
And I'm going to give myself one other one.

2117
01:46:04,231 --> 01:46:08,979
.centered将是文本对齐的中心。
.centered is going to be text-align center.

2118
01:46:08,979 --> 01:46:13,719
因此，这些类都不是居中，大型，中型或小型
So none of these classes, centered, large, medium, or small

2119
01:46:13,720 --> 01:46:17,810
直到我现在将它们应用到我的HTML标记之前，它们一直在使用中。
are in use yet until I now apply them to my HTML tags.

2120
01:46:17,810 --> 01:46:20,170
因此，让我向下滚动到HTML
So let me scroll back down to my HTML where

2121
01:46:20,170 --> 01:46:22,810
我之前删除了所有这些样式属性，
I removed earlier all of those style attributes,

2122
01:46:22,810 --> 01:46:26,270
我将使用一个现在称为class的不同属性。
and I'm going to use a different attribute now called class.

2123
01:46:26,270 --> 01:46:33,940
我将继续添加到此标题大的中心。
I'm going to go ahead and add to this header centered large.

2124
01:46:33,939 --> 01:46:38,709
我将把类添加到主标签中作为居中的媒介。
I'm going to add class to the main tag as centered medium.

2125
01:46:38,710 --> 01:46:43,060
在这里，我要说的是class =“ centered small”。
And down here I'm going to say class="centered small".

2126
01:46:43,060 --> 01:46:47,260
因此，我可以在名为class的属性中包含一个值
So I can have inside of the attributes called class a value

2127
01:46:47,260 --> 01:46:49,540
那只是一个用空格分隔的单词列表。
that's just a space-separated list of words.

2128
01:46:49,539 --> 01:46:51,789
严格来说，它可以是任意数量的空格，
And strictly speaking, it can be any number of spaces,

2129
01:46:51,789 --> 01:46:53,581
但这看起来很愚蠢，
but that's just looks stupid and is stupid,

2130
01:46:53,582 --> 01:46:56,230
从样式上讲，一个空格就足够了。
stylistically, so just one space suffices.

2131
01:46:56,229 --> 01:47:01,059
但这意味着，嘿，浏览器要应用居中类和中型类
But this just means, hey, browser, apply the centered class and the medium class

2132
01:47:01,060 --> 01:47:02,530
到以下内容。
to the following contents.

2133
01:47:02,529 --> 01:47:06,399
再说一次，如果我回到标签页并重新加载，则仍然没有任何改变。
And again, if I go back to the tab and reload, nothing, still, has changed.

2134
01:47:06,399 --> 01:47:07,749
我只是在更改设计。
I'm just changing the design.

2135
01:47:07,750 --> 01:47:09,399
我希望改进设计。
I'm hopefully improving the design.

2136
01:47:09,399 --> 01:47:12,729
但是在这里，您也可能会注意到，一次又一次地使用居中
But here, too, you can probably note that using centered again and again

2137
01:47:12,729 --> 01:47:14,469
同样，又是愚蠢的。
is also, again, dumb.

2138
01:47:14,470 --> 01:47:16,330
让我删除该冗余。
Let me remove that redundancy.

2139
01:47:16,329 --> 01:47:18,789
让我在自己的身体中加入一类居中的方法。
Let me add to my body a class of centered.

2140
01:47:18,789 --> 01:47:20,739
现在事情变得有点紧张了。
And now things are getting a little tight.

2141
01:47:20,739 --> 01:47:23,184
就像，我重新介绍了一些属性，但是现在，
Like, I've reintroduced some attributes, but now,

2142
01:47:23,185 --> 01:47:25,060
如果我与某人合作，我可以说，
if I'm collaborating with someone, I can say,

2143
01:47:25,060 --> 01:47:28,180
您可以继续为大型文本，中型创建CSS类吗？
can you go ahead and create me CSS classes for large text, medium

2144
01:47:28,180 --> 01:47:29,020
文字，小文字？
text, small text?

2145
01:47:29,020 --> 01:47:31,390
我只是假设您会正确地做到这一点，
I'll just assume that you're going to do that correctly,

2146
01:47:31,390 --> 01:47:34,390
我可以只使用这些术语，这些类，
and I can just use those terms, those classes,

2147
01:47:34,390 --> 01:47:39,130
并假设您已经在CSS中定义了像这样的代码。
and assume that you have defined code in CSS like this stuff here.

2148
01:47:39,130 --> 01:47:39,880
但是你知道吗？
But you know what?

2149
01:47:39,880 --> 01:47:41,470
我可以做得更好。
I can do one step better.

2150
01:47:41,470 --> 01:47:44,680
我什至不需要您触摸相同的文件。
I don't need you to even touch this same file.

2151
01:47:44,680 --> 01:47:47,080
您和我可以很独立地工作。
You and I can work pretty independently.

2152
01:47:47,079 --> 01:47:49,089
实际上，让我继续提出这一建议。
In fact, let me go ahead and propose this.

2153
01:47:49,090 --> 01:47:53,800
让我突出显示我刚才在此处编写并剪切的所有代码。
Let me highlight all of the code I just wrote up here and cut it.

2154
01:47:53,800 --> 01:47:56,650
让我一起摆脱这个样式标签。
Let me get rid of this style tag all together.

2155
01:47:56,649 --> 01:48:02,649
让我创建一个名为styles.css的新文件，按照约定，
Let me create a new file called, let's say, styles.css, just by convention,

2156
01:48:02,649 --> 01:48:07,727
但我可以将其命名为任何我想要的.css，然后将其粘贴到其中并保存。
but I could call it anything I want .css, paste it into there, and save it.

2157
01:48:07,728 --> 01:48:08,770
让我继续前进-
And let me go ahead and--

2158
01:48:08,770 --> 01:48:10,603
我不再需要任何缩进，
I don't need any of the indentation anymore,

2159
01:48:10,603 --> 01:48:14,350
因此，让我使用精美的键盘快捷键将所有内容移到那儿。
so let me just shift everything over there using a fancy keyboard shortcut.

2160
01:48:14,350 --> 01:48:16,060
这可能是您正在处理的文件。
This could be the file you're working on.

2161
01:48:16,060 --> 01:48:19,180
您为我创建了所有这些属性和这些类
You create all of these properties and these classes for me

2162
01:48:19,180 --> 01:48:20,350
在一个单独的文件中。
in a separate file.

2163
01:48:20,350 --> 01:48:25,000
然后在我的HTML文件中，如果您和我正在协作，则可以使用链接标记-
Then in my HTML file, if you and I are collaborating, I can use a link tag--

2164
01:48:25,000 --> 01:48:30,129
styles.css的超参考值，其关系
a hyper reference value of styles.css, the relationship of which

2165
01:48:30,130 --> 01:48:32,965
是文件的样式表。
is that of stylesheet to your file.

2166
01:48:32,965 --> 01:48:35,590
现在，这里就是您必须举起双手的地方。
Now, here's where you just kind of have to throw up your hands.

2167
01:48:35,590 --> 01:48:39,190
在理想的情况下，我们将网页中的链接称为链接标记，
In an ideal world, we would have called links in web pages the link tag,

2168
01:48:39,189 --> 01:48:41,829
而且我们不会使用开括号a作为锚点。
and we wouldn't have used open bracket a for anchor.

2169
01:48:41,829 --> 01:48:43,959
这不是可点击意义上的链接。
This is not a link in the clickable sense.

2170
01:48:43,960 --> 01:48:47,620
这只是意味着将这个HTML文件链接到这个CSS文件
This just means link this HTML file to this CSS file

2171
01:48:47,619 --> 01:48:50,259
与样式表的关系。
with a relationship of stylesheet.

2172
01:48:50,260 --> 01:48:51,550
什么是样式表？
What is the stylesheet?

2173
01:48:51,550 --> 01:48:53,410
这是一个样式表。
It is a sheet of styles.

2174
01:48:53,409 --> 01:48:56,529
它是属性文件。
It is a file of properties.

2175
01:48:56,529 --> 01:49:02,919
这些属性可以在类型或类之内，也可以在不久的将来看到
And those properties can be inside of types or classes or what we'll soon see

2176
01:49:02,920 --> 01:49:05,540
也是唯一的ID。
are unique IDs as well.

2177
01:49:05,539 --> 01:49:07,792
还有其他类型。
And there's other types for that as well.

2178
01:49:07,792 --> 01:49:10,209
但是，现在我们可以说是设计最好的版本
But here we have, now, arguably, the best-designed version

2179
01:49:10,210 --> 01:49:12,190
因为它非常紧凑。
in that this is pretty compact.

2180
01:49:12,189 --> 01:49:13,269
非常简洁。
It's pretty succinct.

2181
01:49:13,270 --> 01:49:17,470
只有HTML和HTML值和属性，
There's only HTML and HTML values and attributes,

2182
01:49:17,470 --> 01:49:19,690
但所有CSS都在第二个文件中。
but all the CSS is in this second file.

2183
01:49:19,689 --> 01:49:23,709
现在，您和我可以真正独立地进行协作了。
Now you and I can really collaborate independently.

2184
01:49:23,710 --> 01:49:28,680
关于CSS的任何疑问以及我们可以如何处理？
Any questions then on CSS and what we can do with it?

2185
01:49:28,680 --> 01:49:32,940
到目前为止，我们仅涉及CSS的内容，但可以这样说-
We have only scratched the surface of CSS thus far, but suffice it to say--

2186
01:49:32,939 --> 01:49:35,909
实际上，只是为了逗弄我可能有多糟糕，
and actually, just to tease just how bad at this I might be,

2187
01:49:35,909 --> 01:49:38,849
假设您真的想拥有一个彩色背景。
suppose you really want to have a colorful background.

2188
01:49:38,850 --> 01:49:42,180
好吧，让我在这里进入我的CSS文件styles.css，
Well, let me go into my CSS file here, styles.css,

2189
01:49:42,180 --> 01:49:43,833
而且我不必只使用类。
and I don't have to use only classes.

2190
01:49:43,832 --> 01:49:45,749
我可以说，好吧，让我们继续吧
I can say something like, well, let's go ahead

2191
01:49:45,750 --> 01:49:50,790
并使我的身体标签具有-
and make my body tag have a background color of--

2192
01:49:50,789 --> 01:49:52,799
红色的分号怎么样？
how about red semicolon?

2193
01:49:52,800 --> 01:49:55,190
让我们回到浏览器，重新加载。
Let's go back to the browser, reload.

2194
01:49:55,189 --> 01:49:57,179
好吧，它变得越来越难看。
OK, it's getting ugly pretty fast.

2195
01:49:57,180 --> 01:49:59,700
让我继续更改文本的颜色
Let me go ahead and change the color of my text

2196
01:49:59,699 --> 01:50:02,549
也许要白色，以使其在红色上更加突出。
maybe to white to make it stand out a little more on the red.

2197
01:50:02,550 --> 01:50:03,540
重新加载。
Reload.

2198
01:50:03,539 --> 01:50:05,429
好吧，它又回到了那里。
All right, it's back to something there.

2199
01:50:05,430 --> 01:50:08,940
我可以将其更改为任何颜色，这里可能是一点点耶鲁蓝色。
I can change this to any color, maybe a little Yale blue over here.

2200
01:50:08,939 --> 01:50:09,519
重新加载。
Reload.

2201
01:50:09,520 --> 01:50:10,950
瞧，现在是蓝色。
Voila, it's now blue.

2202
01:50:10,949 --> 01:50:18,299
或者，如果您真的想花哨的话，每周四，我们将其设为00ff00，
Or if you really want to be fancy, per week four, how about we make it 00ff00,

2203
01:50:18,300 --> 01:50:22,110
十六进制，这当然会让我感到绿色
speaking hexadecimal, which, of course, is going to make it green for me

2204
01:50:22,109 --> 01:50:23,169
反而？
instead?

2205
01:50:23,170 --> 01:50:26,490
这就是说那里有很多不同的CSS属性。
So this is to say there's so many different CSS properties out there.

2206
01:50:26,489 --> 01:50:29,719
再说一次，我们只将重点放在列表上-
And again, we're focusing here only on the list--

2207
01:50:29,720 --> 01:50:30,630
的想法。
the ideas.

2208
01:50:30,630 --> 01:50:32,880
当真正使用这些属性时，
When it comes time to actually using these properties,

2209
01:50:32,880 --> 01:50:36,450
我们将为您提供适当的参考，以充实您的嗓音
we'll point you at the appropriate reference, just to flesh out your vocab

2210
01:50:36,449 --> 01:50:37,629
所有更多。
all the more.

2211
01:50:37,630 --> 01:50:38,130
好的。
All right.

2212
01:50:38,130 --> 01:50:47,480
那么，对CSS的功能及其与HTML的关系是否有疑问？
Any questions, then, on the capabilities of CSS and its relationship with HTML?

2213
01:50:47,479 --> 01:50:49,099
你有事吗，布莱恩？
Anything on your end, Brian?

2214
01:50:49,100 --> 01:50:50,100
布莱恩·于：很好。
BRIAN YU: All good here.

2215
01:50:50,100 --> 01:50:53,030
戴维·J·马兰（David J. MALAN）：所以我们今天完全没有做过的一件事
DAVID J. MALAN: So the one thing we haven't done any of today at all

2216
01:50:53,029 --> 01:50:54,019
正在编程。
is programming.

2217
01:50:54,020 --> 01:50:57,950
为此，我们实际上需要第三种也是最后一种语言，即JavaScript。
And for that, we actually need a third and final language, that of JavaScript.

2218
01:50:57,949 --> 01:51:00,589
在课程的过去几周中，
And in the past weeks of the course, we've

2219
01:51:00,590 --> 01:51:03,350
使用了我们所说的真正的服务器端编程。
used what we would describe as really server-side programming.

2220
01:51:03,350 --> 01:51:04,400
您已经编写了C代码。
You have written C code.

2221
01:51:04,399 --> 01:51:06,889
您已经在服务器上编写了Python代码，
You've written Python code on the server,

2222
01:51:06,890 --> 01:51:11,240
特别是在CS50 IDE（本质上是在云中，是服务器）上。
specifically on CS50 IDE, which is, by nature, in the cloud, a server.

2223
01:51:11,239 --> 01:51:13,879
但是事实证明，所有这些时间你并没有真正
But it turns out that all this time you haven't really

2224
01:51:13,880 --> 01:51:17,420
一直使用自己的Mac或PC或手机，
been using your own Mac or your own PC or your own phone,

2225
01:51:17,420 --> 01:51:21,770
为此，除了它只是一个非常昂贵的显示器，
for that matter, other than it's just a very expensive display, a very

2226
01:51:21,770 --> 01:51:22,880
昂贵的屏幕。
expensive screen.

2227
01:51:22,880 --> 01:51:25,040
所有的代码都写好了，所有的代码都写完了
All of the code is written, all of the code

2228
01:51:25,039 --> 01:51:27,259
在此后端服务器上正在运行。
is running, on this backend server.

2229
01:51:27,260 --> 01:51:30,830
那是一个错失的机会，因为您所有的用户，您所有的朋友，
And that's a missed opportunity, because all of your users, all of your friends,

2230
01:51:30,829 --> 01:51:35,629
如今，我们所有人都使用自己漂亮的Mac，PC或电话。
all of us are on our own pretty fancy Macs and PCs or phones these days.

2231
01:51:35,630 --> 01:51:37,880
这些设备全部都有点可惜
It's kind of a shame that those devices all

2232
01:51:37,880 --> 01:51:41,180
有CPU，RAM和存储空间，但我们没有
have CPUs and RAM and storage space, yet we're not

2233
01:51:41,180 --> 01:51:43,010
使用任何这些功能。
using any of those capabilities.

2234
01:51:43,010 --> 01:51:47,480
我们实际上只是在使用玻璃屏幕查看服务器上其他位置的内容。
We're really just using the glass screen to see what's elsewhere on a server.

2235
01:51:47,479 --> 01:51:49,759
但是有了JavaScript，我们有了另一种语言
But with JavaScript, we have another language

2236
01:51:49,760 --> 01:51:53,630
我们将看到一点，这将使我们能够编写代码，并将其保存
that we'll see in a bit that will allow us to write code, save it

2237
01:51:53,630 --> 01:51:57,680
在服务器上，但在用户计算机上运行
on the server, but run it on users' computers

2238
01:51:57,680 --> 01:52:00,320
并执行所谓的客户端编程，因此我们仍然
and do what's called client-side programming, so we'll still

2239
01:52:00,319 --> 01:52:03,979
保存我们在服务器上编写的代码，但是我们将包含代码
save the code we write on the server, but we're going to include the code

2240
01:52:03,979 --> 01:52:07,817
在用户浏览器下载的这些虚拟信封中，
inside of these virtual envelopes that get downloaded by users' browsers,

2241
01:52:07,818 --> 01:52:10,610
从上到下，从左到右，而不仅仅是阅读代码，
and instead of just reading the code, top to bottom, left to right,

2242
01:52:10,609 --> 01:52:13,789
并显示信息（与HTTP和CSS一样），
and displaying information, as is the case with HTTP and CSS,

2243
01:52:13,789 --> 01:52:18,109
此外，还将阅读信封中更深的JavaScript代码
will additionally read the JavaScript code deeper in the envelope

2244
01:52:18,109 --> 01:52:21,469
并在用户的Mac，PCS和电话上执行该操作。
and execute that on users' Macs and PCS and phones.

2245
01:52:21,470 --> 01:52:24,950
在这里，Web编程变得非常有趣，因为您现在
And here's where web programming gets really interesting, because you now

2246
01:52:24,949 --> 01:52:28,542
拥有一台成熟的计算机供您使用，甚至不是您自己的。
have a full-fledged computer at your disposal that's not even your own.

2247
01:52:28,542 --> 01:52:30,959
因此，让我们继续，在这里再休息五分钟，
So let's go ahead and take another five-minute break here,

2248
01:52:30,960 --> 01:52:34,770
当我们回来时，我们将以JavaScript结束。
and when we come back, we'll conclude with a look at JavaScript.

2249
01:52:34,770 --> 01:52:35,670
好的。
All right.

2250
01:52:35,670 --> 01:52:40,500
我们回来了，我们将要介绍一种控制Web的编程方式
We are back and we're about to introduce a programmatic way of controlling web

2251
01:52:40,500 --> 01:52:43,319
页面，甚至添加到网页并更改内容
pages and even adding to web pages and changing the content

2252
01:52:43,319 --> 01:52:46,829
用户看到的内容，从而使我们的网站不再仅仅是静态的-
users see, thereby making our websites no longer just static--

2253
01:52:46,829 --> 01:52:50,099
也就是说，一次写过，并且永远可以以相同的方式查看，
that is, written once and viewable the same way forever,

2254
01:52:50,100 --> 01:52:52,350
但动态，以某种方式改变
but dynamic, somehow changing in response

2255
01:52:52,350 --> 01:52:54,430
用户互动或用户输入。
to user interactions or user input.

2256
01:52:54,430 --> 01:52:57,990
让我们继续，现在考虑如何使页面更加动态
Let's go ahead and now consider how we can make our pages all the more dynamic

2257
01:52:57,989 --> 01:52:59,459
通过引入JavaScript。
by introducing JavaScript.

2258
01:52:59,460 --> 01:53:03,540
因此，让我们快速进行一下，仅介绍一些JavaScript语法。
So let's go ahead quickly and introduce just some of the syntax of JavaScript.

2259
01:53:03,539 --> 01:53:06,089
奇妙的是，JavaScript在语法上
And wonderfully, JavaScript syntactically

2260
01:53:06,090 --> 01:53:10,715
与C和Python非常相似，在语法上与C有点相似，
is pretty similar to C and Python, a little more syntactically similar to C,

2261
01:53:10,715 --> 01:53:12,090
但是没有内存管理。
but there's no memory management.

2262
01:53:12,090 --> 01:53:13,140
没有指针。
There's no pointers.

2263
01:53:13,140 --> 01:53:17,130
因此，这有点像介于C和Python语法之间的某个地方。
So it's kind of like somewhere in between C and Python syntax.

2264
01:53:17,130 --> 01:53:20,010
但这一切都应该变得很熟悉-
But it should all come fairly familiar--

2265
01:53:20,010 --> 01:53:21,210
现在相当容易。
fairly easily now.

2266
01:53:21,210 --> 01:53:23,460
在Scratch中，回想一下当我们有一个名为
In Scratch, recall when we had a variable called

2267
01:53:23,460 --> 01:53:27,150
计数器初始化为零，我们现在如何在JavaScript中声明相同的内容？
counter initialized to zero, how do we now declare the same in JavaScript?

2268
01:53:27,149 --> 01:53:28,447
它看起来像这样。
It's going to look like this.

2269
01:53:28,448 --> 01:53:29,490
所以它不是Python。
So it's not quite Python.

2270
01:53:29,489 --> 01:53:32,759
它不完全是C。您实际上使用了关键字let，该关键字
It's not quite C. You literally use the keyword let, which

2271
01:53:32,760 --> 01:53:35,280
表示让以下变量存在。
means let the following variable exist.

2272
01:53:35,279 --> 01:53:38,729
该变量的计数器= 0;。
The variable's called counter = 0;.

2273
01:53:38,729 --> 01:53:41,549
严格来说，这些分号并不总是必需的，
Strictly speaking, these semicolons aren't always necessary,

2274
01:53:41,550 --> 01:53:44,128
但是为了保持一致性，我将在这里继续使用它们。
but for consistency, I'll keep using them here.

2275
01:53:44,127 --> 01:53:46,169
假设您要将计数器更改为1，如下所示
Suppose you want to change the counter by one, as

2276
01:53:46,170 --> 01:53:47,730
在Scratch中加1。
in Scratch, incremented by one.

2277
01:53:47,729 --> 01:53:51,809
在JavaScript中，您可以像这样非常冗长地做到这一点。
In JavaScript, you can do it very verbosely like this.

2278
01:53:51,810 --> 01:53:55,350
您可以像这样在C语言中的Python中更简洁地完成此操作，
You can do it a little more succinctly like this, like in Python in C,

2279
01:53:55,350 --> 01:53:57,150
否则加号又回来了。
or the plus-plus is back.

2280
01:53:57,149 --> 01:54:01,739
因此，如果您在Python中一直想念它，就像尼古拉斯（Nicholas）那样，
So if you've been missing that in Python, the-- as Nicholas seems to be,

2281
01:54:01,739 --> 01:54:04,207
加号现在也回来了。
the plus-plus is now back as well.

2282
01:54:04,207 --> 01:54:05,999
这样的情况如何？
How about something like this, a condition?

2283
01:54:06,000 --> 01:54:08,879
因此，如果您想说x是否小于y，那么在JavaScript中，
So if you want to say if x less than y, in JavaScript,

2284
01:54:08,880 --> 01:54:10,800
它会说x是否小于y。
it's going to say if x less than y.

2285
01:54:10,800 --> 01:54:13,170
所以在这里，花括号又回来了。
So here, we have the curly braces are back.

2286
01:54:13,170 --> 01:54:14,490
括号又回来了。
The parentheses are back.

2287
01:54:14,489 --> 01:54:16,679
但是想法还是一样的。
But the ideas are still the same.

2288
01:54:16,680 --> 01:54:18,540
如果在其他地方，Scratch看起来像这样。
If else in Scratch looked like this.

2289
01:54:18,539 --> 01:54:20,579
在JavaScript中，它将看起来像这样。
In JavaScript, it's going to look like that.

2290
01:54:20,579 --> 01:54:23,849
在Scratch中，如果不是这样的话。
In Scratch, if else if else looks like this.

2291
01:54:23,850 --> 01:54:26,850
在JavaScript中，它将看起来像这样，更像是C。
In JavaScript, it's going to look like this, so more like C.

2292
01:54:26,850 --> 01:54:29,340
缩写没有奇怪的地方。
There's no weird l if abbreviation.

2293
01:54:29,340 --> 01:54:32,907
如果真的又是其他的话，但是要加上括号
It's literally else if again, but with the parentheses

2294
01:54:32,907 --> 01:54:33,990
和花括号。
and with the curly braces.

2295
01:54:33,989 --> 01:54:37,031
老实说，如果您在接下来的几周内很早就挂断电话，例如，
And honestly, if you get hung up early on in these next few weeks-- like,

2296
01:54:37,032 --> 01:54:39,490
这些是学习某种新语言的愚蠢细节。
these are the stupid details of learning some new language.

2297
01:54:39,489 --> 01:54:41,156
您必须增强肌肉记忆力。
You've got to develop the muscle memory.

2298
01:54:41,157 --> 01:54:43,560
您必须开始记住什么语言是什么。
You've got to start remembering what language is what.

2299
01:54:43,560 --> 01:54:47,790
但是当您挂在花括号和括号上时不要紧张。
But don't stress when you get hung up on curly braces and parentheses.

2300
01:54:47,789 --> 01:54:50,031
就像，这些事情从根本上没有关系，
Like, those things have never fundamentally mattered,

2301
01:54:50,032 --> 01:54:51,990
但是它们当然对计算机很重要。
but they do, of course, matter to the computer.

2302
01:54:51,989 --> 01:54:54,929
但是对我们来说，当然不是在智力上
But not to us, certainly intellectually, as we

2303
01:54:54,930 --> 01:54:57,970
介绍该语言的新引人注目的功能。
introduce the new compelling features of this language.

2304
01:54:57,970 --> 01:55:01,230
那么对于for循环或while循环呢？
How about something like a for loop or while loop, for that matter?

2305
01:55:01,229 --> 01:55:03,449
在Scratch中，如果您想永远做某事，
In Scratch, if you wanted to do something forever,

2306
01:55:03,449 --> 01:55:07,199
您现在可以使用JavaScript进行转换，类似于C，虽然为true，
you can convert that now in JavaScript, similar to C, while true,

2307
01:55:07,199 --> 01:55:09,419
或任何表达式为真。
or while any expression is true.

2308
01:55:09,420 --> 01:55:12,600
如果您想重复三遍，几乎与C相同，
If you want to repeat something three times, almost the same as C,

2309
01:55:12,600 --> 01:55:15,150
但我在这里使用let而不是int。
but I'm using let here instead of int.

2310
01:55:15,149 --> 01:55:18,239
因此，JavaScript（如Python）是松散类型的。
So JavaScript, like Python, is loosely typed.

2311
01:55:18,239 --> 01:55:20,489
它具有类型，但是您（程序员）没有
It has types, but you, the programmer, don't

2312
01:55:20,489 --> 01:55:22,229
需要强调指定它们。
need to stress over specifying them.

2313
01:55:22,229 --> 01:55:23,829
电脑会找出来的。
The computer will figure it out.

2314
01:55:23,829 --> 01:55:26,039
因此，您将如何声明关键字。
So let is how you would declare a keyword.

2315
01:55:26,039 --> 01:55:30,029
话虽如此，还有其他方法可以在JavaScript中声明变量，
And with that said, there are other ways to declare variables in JavaScript,

2316
01:55:30,029 --> 01:55:32,969
包括常量，但就目前而言，我们将使其保持简单
including constants, but for now, we'll keep things simple

2317
01:55:32,970 --> 01:55:35,650
在这里只关注此关键字。
and focus only on this keyword here.

2318
01:55:35,649 --> 01:55:39,239
所以这又是该页面及其树的表示。
So here's that page again and the tree representation thereof.

2319
01:55:39,239 --> 01:55:41,549
而且这棵树仅作为心理模型有用
And this tree is useful only as a mental model

2320
01:55:41,550 --> 01:55:47,460
加载页面后计算机在内存中执行的操作。
for what the computer is doing inside of its memory after having loaded a page.

2321
01:55:47,460 --> 01:55:50,250
现在，有了JavaScript，我们就有了能力
With JavaScript, now, we have the ability

2322
01:55:50,250 --> 01:55:52,950
实时更改此树。
to change this tree in real time.

2323
01:55:52,949 --> 01:55:55,829
当用户单击某物，拖动某物，键入某物时
When the user clicks something, drags something, types something

2324
01:55:55,829 --> 01:55:59,039
使用JavaScript，我们现在将拥有一种编程语言
in, with JavaScript, we will now have a programming language

2325
01:55:59,039 --> 01:56:02,379
这样我们就可以实时更改这棵树
that allows us to mutate this tree in real time,

2326
01:56:02,380 --> 01:56:07,420
从而使我们的页面不再处于静态或固定在一种状态，
thereby making our pages no longer static or fixed in one state,

2327
01:56:07,420 --> 01:56:10,140
但动态且不断变化。
but dynamic and changing instead.

2328
01:56:10,140 --> 01:56:11,500
那么我们该怎么做呢？
So how might we do this?

2329
01:56:11,500 --> 01:56:13,560
好吧，让我们考虑一下我们可以在哪里
Well, let's consider exactly where we can

2330
01:56:13,560 --> 01:56:15,630
开始编写一些JavaScript代码。
go about writing some JavaScript code.

2331
01:56:15,630 --> 01:56:19,080
我们可以这样在头部添加一个脚本标签来做到这一点。
We can do that by adding a script tag in the head like this.

2332
01:56:19,079 --> 01:56:21,419
严格来说，它也可以像这样进入人体，
Strictly speaking, it can also go in the body like this,

2333
01:56:21,420 --> 01:56:24,030
这些选择具有一定的逻辑含义。
and there are some logical implications of those choices.

2334
01:56:24,029 --> 01:56:27,509
或者我们甚至可以将其分解为scripts.js之类的文件，
Or we can even factor it out to a file like scripts.js,

2335
01:56:27,510 --> 01:56:29,207
就像我们使用CSS一样。
just as we did with CSS.

2336
01:56:29,207 --> 01:56:31,290
因此，即使标签不同，它也是脚本，
So even though the tag is different, it's scripts,

2337
01:56:31,289 --> 01:56:32,581
并且属性不同。
and the attribute is different.

2338
01:56:32,582 --> 01:56:33,360
是来源
It's source.

2339
01:56:33,359 --> 01:56:35,879
就像这样愚蠢地写着。
And it's stupidly written like this.

2340
01:56:35,880 --> 01:56:38,730
如果您使用的是外部文件，则实际上是
If you are using an external file, you literally

2341
01:56:38,729 --> 01:56:42,149
即使其中没有任何内容，也请关闭该标签。
close the tag, even though there's nothing inside of it.

2342
01:56:42,149 --> 01:56:43,304
那就是其中之一
That's one of these--

2343
01:56:43,305 --> 01:56:47,100
使用此特定标签的现实。
a reality of using this particular tag.

2344
01:56:47,100 --> 01:56:49,590
好吧，让我继续提议
Well, let me go ahead and propose that we

2345
01:56:49,590 --> 01:56:51,510
用JavaScript编写一个实际的程序。
write an actual program in JavaScript.

2346
01:56:51,510 --> 01:56:53,460
让我回到我的IDE。
Let me go back over to my IDE.

2347
01:56:53,460 --> 01:56:55,920
让我们创建一个名为-的新文件
Let's create a new file called--

2348
01:56:55,920 --> 01:57:00,150
实际上，让我们继续打开旧的hello.html，
actually, let's go ahead and open up our old one, hello.html,

2349
01:57:00,149 --> 01:57:01,589
让我们互动。
and let's make it interactive.

2350
01:57:01,590 --> 01:57:03,730
而不是一直打招呼，身体，
Rather than say hello, body all the time,

2351
01:57:03,729 --> 01:57:07,379
让我们看看我们是否无法对我和你说些什么。
let's see if we can't make it say a little something to me and to you.

2352
01:57:07,380 --> 01:57:11,340
因此，在页面正文中，让我继续进行更改
So down here in the body of my page, let me go ahead and change this

2353
01:57:11,340 --> 01:57:17,070
然后做这样的事情，表格，关闭表格，输入-
and do something like this, form, close form, input--

2354
01:57:17,069 --> 01:57:27,239
让我们做一个quote-unquote“ name”的ID，类型将是文本。
how about let's do ID of quote-unquote "name", and type is going to be text.

2355
01:57:27,239 --> 01:57:30,539
然后让我继续，给自己一个提交按钮，输入=“ submit”。
And then let me go ahead and give myself a submit button, type="submit".

2356
01:57:30,539 --> 01:57:31,899
超级简单。
So super simple.

2357
01:57:31,899 --> 01:57:34,259
现在唯一的区别是我想要一个通用文本框。
The only difference now is I want a generic text box.

2358
01:57:34,260 --> 01:57:36,540
我不想要特定于搜索的内容。
I don't want one that's specific to searching.

2359
01:57:36,539 --> 01:57:38,759
我想要一个提交按钮，一个通用按钮。
And I want a submit button, a generic one.

2360
01:57:38,760 --> 01:57:40,030
我不在乎它在说什么。
I don't care what it says.

2361
01:57:40,029 --> 01:57:43,139
让我回到其他标签，点击hello.html，
Let me go back to my other tab, click hello.html,

2362
01:57:43,140 --> 01:57:46,080
我们的表单类似于Google搜索示例，
and we have a form similar to the Google search example,

2363
01:57:46,079 --> 01:57:51,796
但是现在，我将在自己的HTML文件中使用网络表单
but now, I am going to use a web form in my own HTML file

2364
01:57:51,796 --> 01:57:53,879
与用户互动，因为毕竟
to interact with the user, because after all, this

2365
01:57:53,880 --> 01:57:57,060
通常是通过这些形式，人们与网页进行交互的方式。
is how humans interact with web pages, typically, is via these forms.

2366
01:57:57,060 --> 01:58:00,390
我要允许用户键入他们的姓名，单击“提交”，
I want to enable the user to type in their name, click Submit,

2367
01:58:00,390 --> 01:58:04,020
然后我要我的网页而不是Google，说“你好”，“大卫”，“你好”
and then I want my web page now, not Google, to say Hello, David, Hello,

2368
01:58:04,020 --> 01:58:06,720
布莱恩打招呼的人。
Brian hello to whoever types this in.

2369
01:58:06,720 --> 01:58:10,140
因此，我不会以与以前完全相同的方式使用表单。
So I'm not going to use a form in quite the same way as before.

2370
01:58:10,140 --> 01:58:12,240
不会采取任何行动，因为我不是
There's not going to be an action, because I'm not

2371
01:58:12,239 --> 01:58:14,074
将其发送给Google。
going to send it to Google.

2372
01:58:14,074 --> 01:58:15,699
我不会将其发送到其他任何地方。
I'm not going to send it anywhere else.

2373
01:58:15,699 --> 01:58:20,229
我将在浏览器本身中编写完全是客户端的代码。
I'm going to write code that's entirely client side in the browser itself.

2374
01:58:20,229 --> 01:58:22,289
那我要表格做什么？
So what do I want the form to do?

2375
01:58:22,289 --> 01:58:27,859
提交此表单后，我希望它调用一个名为greet的函数。
When this form is submitted, I want it to call a function called greet.

2376
01:58:27,859 --> 01:58:29,609
目前，这有点混乱。
And at the moment, this is a little messy.

2377
01:58:29,609 --> 01:58:31,629
我们将在稍后对此进行清理。
We're going to clean this up in a moment.

2378
01:58:31,630 --> 01:58:36,060
但是HTTP中有一个称为alt onsubmit的属性，其值
But there is this attribute in HTTP called alt onsubmit, the value of which

2379
01:58:36,060 --> 01:58:37,440
本身不是HTML。
is not HTML per se.

2380
01:58:37,439 --> 01:58:38,399
不是CSS。
It's not CSS.

2381
01:58:38,399 --> 01:58:40,169
现在是JavaScript代码。
It's now JavaScript code.

2382
01:58:40,170 --> 01:58:42,360
我想调用称为greet的函数。
I want to call the function called greet.

2383
01:58:42,359 --> 01:58:46,049
此功能尚不存在，但很快就会出现。
This function doesn't exist yet, but it will soon.

2384
01:58:46,050 --> 01:58:48,580
我该怎么做呢？
How do I go about doing that?

2385
01:58:48,579 --> 01:58:52,199
好吧，让我继续前进，在这里添加我的脚本标签。
Well, let me go ahead and go up here and add my script tag.

2386
01:58:52,199 --> 01:58:55,529
在这里，让我继续用JavaScript定义一个函数。
And up here, let me go ahead and define a function in JavaScript.

2387
01:58:55,529 --> 01:58:58,469
它与C有点相似。与Python有点相似。
It's a little similar to C. It's a little similar to Python.

2388
01:58:58,470 --> 01:59:00,960
但是，从字面上看，您在JavaScript中说了函数。
You literally, though, in JavaScript say function.

2389
01:59:00,960 --> 01:59:04,410
您将函数的名称和参数写在括号中。
You write the name of your function and the arguments in parentheses.

2390
01:59:04,409 --> 01:59:06,929
然后在花括号中定义函数。
And then in curly braces, you define the function.

2391
01:59:06,930 --> 01:59:13,170
我要继续，现在只说警报引号-取消引号“你好，身体”。
I'm going to go ahead and just say alert quote-unquote 'hello, body' for now.

2392
01:59:13,170 --> 01:59:17,140
我将使其保持简单，只是愚蠢地输出你好，身体。
I'm going to keep it simple and just goofily output hello, body.

2393
01:59:17,140 --> 01:59:21,360
而且由于默认情况下，这种形式与所有形式一样，
And because this form, by default, as with all forms,

2394
01:59:21,359 --> 01:59:23,999
通常确实会提交到服务器，
typically does gets submitted to a server,

2395
01:59:24,000 --> 01:59:25,919
我要补充一点好奇心。
I'm going to add one other curiosity.

2396
01:59:25,920 --> 01:59:30,075
我要说的是，在此onsubmit属性内还返回false。
I'm going to say return false also inside of this onsubmit attribute.

2397
01:59:30,074 --> 01:59:32,699
所以我意识到这里的事情正在迅速升级，因为
So I realize things are escalating quickly here because there's

2398
01:59:32,699 --> 01:59:35,759
动作很多，但又将重点放在基础知识上。
a lot of pieces in motion, but focus again on the basics.

2399
01:59:35,760 --> 01:59:37,335
该属性为onsubmit。
The attribute is onsubmit.

2400
01:59:37,335 --> 01:59:39,210
用户提交时您想做什么？
What do you want to do when the user submits?

2401
01:59:39,210 --> 01:59:42,330
我想执行这两行JavaScript代码，称为
I want to execute these two lines of JavaScript code called

2402
01:59:42,329 --> 01:59:44,669
问候函数，然后返回false。
the greet function and then return false.

2403
01:59:44,670 --> 01:59:48,000
在这种情况下，返回false表示不提交表单。
Return false in this context means don't submit the form.

2404
01:59:48,000 --> 01:59:50,549
调用该函数，但不要在任何地方提交表单。
Call the function, but don't submit the form anywhere.

2405
01:59:50,550 --> 01:59:55,260
我只想将其用作与用户进行交互的客户端工具。
I just want to use it as a client-side tool for interacting with the user.

2406
01:59:55,260 --> 01:59:58,500
我不需要将其发送到服务器或其他任何人到Google。
I don't need to send it to the server or to Google to anyone else.

2407
01:59:58,500 --> 02:00:02,730
现在让我继续进行说明。
Let me go ahead now and specify this.

2408
02:00:02,729 --> 02:00:06,569
我特意为该文本字段指定了名称ID，
I deliberately gave this text field an ID of name,

2409
02:00:06,569 --> 02:00:08,579
但是我们稍后会使用它。
but we'll use that in just a moment.

2410
02:00:08,579 --> 02:00:12,929
现在，让我转到其他选项卡，重新加载，因为已经进行了更改。
Let me go over to my other tab now, reload, because I've made changes.

2411
02:00:12,930 --> 02:00:15,730
我可以输入David，但目前我将被忽略。
I can type in David, but I'm going to be ignored for the moment.

2412
02:00:15,729 --> 02:00:19,589
但是请注意，当我单击“立即提交”时，它不是最佳的用户界面，
But when I click Submit now, notice, it's not the best user interface,

2413
02:00:19,590 --> 02:00:26,010
但是我的特定网址在屏幕上显示了一条警告，提示您是“正文”。
but there is an alert on my screen from my specific URL that says hello, body.

2414
02:00:26,010 --> 02:00:27,810
但是我想打个招呼，大卫。
But I'd like it to say hello comma David.

2415
02:00:27,810 --> 02:00:29,110
那我该怎么办呢？
So how can I do that?

2416
02:00:29,109 --> 02:00:31,799
好吧，让我在这里回到我的代码中，让我继续
Well, let me go back into my code here and let me go ahead

2417
02:00:31,800 --> 02:00:36,120
并定义一个名为name的变量，但是我可以随意命名。
and define a variable called name, but I could call it anything I want.

2418
02:00:36,119 --> 02:00:41,909
让我使用这个特殊功能document.querySelector（）。
And let me use this special function, document.querySelector().

2419
02:00:41,909 --> 02:00:44,839
这是JavaScript随附的功能，
And this is a function that comes with JavaScript that

2420
02:00:44,840 --> 02:00:48,230
允许您选择任何HTML元素。
allows you to select any HTML element.

2421
02:00:48,229 --> 02:00:52,609
但是您需要能够使用某种选择器进行识别。
But you need to be able to identify it using some kind of selector.

2422
02:00:52,609 --> 02:00:56,449
在这里，无论好坏，CSS，HTML和JavaScript
And here's where, for better or for worse, CSS and HTML and JavaScript

2423
02:00:56,449 --> 02:00:58,589
开始互相借鉴思想。
start borrowing ideas from each other.

2424
02:00:58,590 --> 02:01:02,420
如果我想获取用户文本框的值，
If I want to get the value of the user's text box,

2425
02:01:02,420 --> 02:01:06,620
我敢打赌，我可以给它一个唯一的ID，例如quote-unquote“ name”，
I bet I could give it a unique ID, like quote-unquote "name",

2426
02:01:06,619 --> 02:01:11,359
我可以使用name的CSS语法来选择它。
and I can select it by using my CSS syntax of name.

2427
02:01:11,359 --> 02:01:15,859
而且，一旦我选择了那个HTML元素，可以说是那个标签，
And once I've selected that HTML element, so to speak, that tag,

2428
02:01:15,859 --> 02:01:18,419
我将深入其中并获得其价值。
I'm going to go inside of it and get its value.

2429
02:01:18,420 --> 02:01:21,720
因此，此语法有点熟悉，有点陌生。
So this syntax is a little familiar, a little unfamiliar.

2430
02:01:21,720 --> 02:01:25,010
当涉及到结构时，我们已经在C中看到了点符号。
We've seen the dot notation before in C when it came to structs.

2431
02:01:25,010 --> 02:01:29,150
当涉及到库（例如CSV）时，我们已经在Python中看到了点符号
We've seen the dot notation in Python when it came to libraries, like the CSV

2432
02:01:29,149 --> 02:01:30,049
图书馆。
library.

2433
02:01:30,050 --> 02:01:31,970
我们以类似的方式使用它。
We're using it in a similar way.

2434
02:01:31,970 --> 02:01:34,490
文件是这个特殊的全局变量
Document is this special global variable that

2435
02:01:34,489 --> 02:01:36,959
在浏览器中附带了JavaScript，
just comes with JavaScript in the browser,

2436
02:01:36,960 --> 02:01:38,900
它使您可以访问所有与之相关的事物
and it gives you access to all things related

2437
02:01:38,899 --> 02:01:40,879
到您的文档，您的网页。
to your document, your web page.

2438
02:01:40,880 --> 02:01:45,440
querySelector是该文档随附的函数
querySelector is a function that comes with that document

2439
02:01:45,439 --> 02:01:51,109
Google，Microsoft和Apple为您写的名为querySelector
that Google and Microsoft and Apple wrote for you called querySelector

2440
02:01:51,109 --> 02:01:55,009
其目的是将CSS选择器置于引号中
whose purpose in life is to take a CSS selector in quotes

2441
02:01:55,010 --> 02:02:02,330
标识一个或多个节点，它们是树中的节点。
that identifies one or more nodes that is nodes from the tree.

2442
02:02:02,329 --> 02:02:05,449
这棵树实际上有一个名称，尽管我以前没有使用过它。
And this tree actually has a name, though I've not used it before.

2443
02:02:05,449 --> 02:02:08,029
我们一直在指的这棵树在技术上
This tree that we keep referring to is technically

2444
02:02:08,029 --> 02:02:11,119
称为DOM，即文档对象模型
called a DOM, a Document Object Model, which

2445
02:02:11,119 --> 02:02:15,379
只是一种奇妙的说法，即文档，此全局变量，
is just a fancy way of saying that document, this global variable,

2446
02:02:15,380 --> 02:02:18,980
使您可以访问此DOM，此树。
gives you access to this DOM, this tree.

2447
02:02:18,979 --> 02:02:23,029
因此，当您调用document.querySelector时，就会为您带来浏览器
So when you call document.querySelector, that induces your browser for you

2448
02:02:23,029 --> 02:02:26,719
搜索整棵树，所有这些节点以及父母和孩子
to search the whole tree, all of those nodes and parents and children

2449
02:02:26,720 --> 02:02:29,390
和孙子等等-所有这些节点，
and grandchildren and so forth-- all of those nodes,

2450
02:02:29,390 --> 02:02:32,000
寻找名称唯一的标识符
looking for the one with the unique identifier of name

2451
02:02:32,000 --> 02:02:35,569
然后查看该节点的内部，该矩形的内部（如果可以），
and then looking inside of that node, inside that rectangle, if you will,

2452
02:02:35,569 --> 02:02:38,309
得到人类输入的实际值。
getting the actual value that the human typed in.

2453
02:02:38,310 --> 02:02:40,460
因此，如果我现在要输出此值，
So if I want to now output this value, I'm

2454
02:02:40,460 --> 02:02:42,650
只是要使用一些老式的串联。
just going to use some old-school concatenation.

2455
02:02:42,649 --> 02:02:46,719
让我添加到该字符串，您好名称。
Let me add to that string, hello name.

2456
02:02:46,720 --> 02:02:47,920
而且我可以使用双引号。
And I can use double quotes.

2457
02:02:47,920 --> 02:02:48,820
我可以使用单引号。
I can use single quotes.

2458
02:02:48,819 --> 02:02:51,694
只要您在JavaScript世界中保持一致就没有关系。
Does not matter so long as you're consistent in the JavaScript world.

2459
02:02:51,694 --> 02:02:55,779
无论出于何种原因，约定仅在单引号的情况下出现
For whatever reasons, the convention tends to be single quotes if only

2460
02:02:55,779 --> 02:02:58,449
因为您输入的速度几乎快两倍，因为您输入的不是
because you can type it almost twice as fast because you don't

2461
02:02:58,449 --> 02:03:01,089
必须按住愚蠢的Shift键才能输入双引号-
have to hold the stupid Shift key to type a double quote--

2462
02:03:01,090 --> 02:03:03,430
或键入双引号，就像输入双引号一样。
or to type a single quote as you would a double quote.

2463
02:03:03,430 --> 02:03:03,670
好的。
All right.

2464
02:03:03,670 --> 02:03:06,400
让我回到此页面，重新加载，因为我进行了更改。
Let me go back to this page, reload, because I've made changes.

2465
02:03:06,399 --> 02:03:07,959
让我再次输入我的名字。
Let me type in my name again.

2466
02:03:07,960 --> 02:03:10,270
自动完成功能会很好地弹出。
Autocomplete is popping up nicely.

2467
02:03:10,270 --> 02:03:11,560
单击提交。
Click Submit.

2468
02:03:11,560 --> 02:03:13,660
瞧，你好，大卫。
And voila, Hello, David.

2469
02:03:13,659 --> 02:03:19,029
用户界面仍然有些la脚，但至少现在是动态的。
The user interface is still kind of lame, but it's at least now dynamic.

2470
02:03:19,029 --> 02:03:23,079
我可以输入任何人的名字，Brian，Submit。
And I can type in anyone's name, as you could, Brian, Submit.

2471
02:03:23,079 --> 02:03:24,669
你好，布莱恩。
Hello, Brian.

2472
02:03:24,670 --> 02:03:26,920
您还可以更改有关网页的其他内容。
And you can change other things about the web page.

2473
02:03:26,920 --> 02:03:29,050
其中一些只是实现细节，
And some of this is just implementation details,

2474
02:03:29,050 --> 02:03:31,090
但请记住，您可以为按钮赋予一个值，
but recall that you can give a button a value,

2475
02:03:31,090 --> 02:03:33,070
你可以说一些问候我
and you can say something like greet me.

2476
02:03:33,069 --> 02:03:36,069
现在，如果我回到这里重新加载，我的按钮现在会打招呼。
Now, if I go back here and reload, my button now says greet me.

2477
02:03:36,069 --> 02:03:40,539
事实证明，您输入的文字可以有一个占位符，
Turns out that your input for text can have a placeholder,

2478
02:03:40,539 --> 02:03:45,339
例如您的名字，然后保存该文件并重新加载，
like what's your name, and then saving that file and reloading,

2479
02:03:45,340 --> 02:03:49,030
您会在灰色的文本中看到实际上并不存在的框上的提示，
you see in grayed-out text a prompt on the box that's not actually there,

2480
02:03:49,029 --> 02:03:51,639
因为一旦您开始点击，它就会消失。
because once you start clicking, it goes away.

2481
02:03:51,640 --> 02:03:55,240
我还可以通过说禁用一些烦人的自动完成功能
I can also disable that somewhat annoying autocomplete by saying

2482
02:03:55,239 --> 02:03:57,849
autocomplete =“ off”。
autocomplete="off".

2483
02:03:57,850 --> 02:04:00,850
然后我可以回到页面并重新加载，现在注意，
And then I can go back to my page and reload, and now notice,

2484
02:04:00,850 --> 02:04:03,070
即使我单击那里，它也不会自动完成，
even when I click in there, it doesn't autocomplete,

2485
02:04:03,069 --> 02:04:05,079
为了隐私起见，这可能是件好事。
which is maybe good for privacy's sake.

2486
02:04:05,079 --> 02:04:07,849
另外请注意，我可以做另一件事。
And notice, too, I can do one other thing.

2487
02:04:07,850 --> 02:04:10,090
让我继续并添加自动对焦。
Let me go ahead and add autofocus.

2488
02:04:10,090 --> 02:04:14,170
请注意，每次我重新加载页面时，都必须单击该框。
Notice that every time I reload the page, I had to click in the box.

2489
02:04:14,170 --> 02:04:16,330
但是现在当我重新加载页面时，光标
But now when I reload the page, the cursor

2490
02:04:16,329 --> 02:04:21,139
已经在那里，闪烁并准备就绪，从而为您的用户节省了一步。
is already there, blinking and ready to go, thereby saving your users one step.

2491
02:04:21,140 --> 02:04:25,210
再次，再次投票赞成可访问性和可用性
So again, another vote in favor of accessibility and usability

2492
02:04:25,210 --> 02:04:29,880
只需将用户放置在他们可能想要放置的位置即可。
by just putting the user where they probably want to be anyway.

2493
02:04:29,880 --> 02:04:30,660
好的。
All right.

2494
02:04:30,659 --> 02:04:35,189
到目前为止，有关此JavaScript引入的任何疑问
Any questions thus far on this introduction of JavaScript

2495
02:04:35,189 --> 02:04:39,059
通过此功能，在我们的新脚本标签中打招呼
by way of this function greet inside of our new script tag

2496
02:04:39,060 --> 02:04:43,230
并使用调用该函数的新onsubmit属性
and using this new onsubmit attribute that calls that function

2497
02:04:43,229 --> 02:04:46,799
然后通过说return false来缩短表单提交，
and then short-circuits the form submission by just saying return false,

2498
02:04:46,800 --> 02:04:49,800
调用函数，但不将表单提交给服务器，
call the function but don't submit the form to the server,

2499
02:04:49,800 --> 02:04:51,920
就像我们在Google上所做的一样？
like we did with Google?

2500
02:04:51,920 --> 02:04:55,380
好吧，好吧，让我-冒着使它看起来更加复杂的风险，
All right, well, let me-- at the risk of making it look more complicated,

2501
02:04:55,380 --> 02:04:57,535
让我使其更复杂，但在某种程度上
let me make it more complicated, but in a way

2502
02:04:57,534 --> 02:04:59,659
在接下来的几周内会很熟悉
that will be familiar over the next couple of weeks

2503
02:04:59,659 --> 02:05:02,569
当您看到越来越多的示例并且使用了第三方库时，
when you've seen more and more examples and you've used third-party libraries--

2504
02:05:02,569 --> 02:05:03,949
您已经看到了一些构建基块。
you've seen some building blocks.

2505
02:05:03,949 --> 02:05:08,449
基于这些例子，我们不希望您今晚写这本书，
We would not expect you to write this week, tonight, based on these examples,

2506
02:05:08,449 --> 02:05:11,839
但仅是为您提供有关JavaScript通常如何的思维模型
but just to give you the mental model for how JavaScript is typically

2507
02:05:11,840 --> 02:05:12,570
书面。
written.

2508
02:05:12,569 --> 02:05:16,399
因此，与CSS一样，它的设计也往往有些拙劣。
So this with, like with CSS, tends to be a little poorly designed.

2509
02:05:16,399 --> 02:05:18,199
当您开始混合语言时，
When you start commingling your languages,

2510
02:05:18,199 --> 02:05:20,824
就像，呃，这使得很难与他人合作。
like, ugh, that makes it hard to collaborate with someone else.

2511
02:05:20,824 --> 02:05:23,909
这使得很难维持一种语言与另一种语言的独立性。
It makes it hard to maintain one language independent of another.

2512
02:05:23,909 --> 02:05:26,847
因此，将这些内容分开存放往往是一件好事。
So it tends to be a good thing to keep these things separate.

2513
02:05:26,847 --> 02:05:28,139
而且并非总是如此。
And that's not always the case.

2514
02:05:28,140 --> 02:05:30,260
实际上，现在存在一种趋势，尤其是在移动应用程序开发中，
There's actually now a trend, especially in mobile app development,

2515
02:05:30,260 --> 02:05:31,950
把这些东西放在一起。
of putting these things back together.

2516
02:05:31,949 --> 02:05:35,849
但这至少可以保持清洁，至少在我们刚开始的时候。
But this tends to keep things clean, at least when we're first starting out.

2517
02:05:35,850 --> 02:05:41,910
因此，让我继续前进，实际上继续前进，现在就删除我的代码。
So let me go ahead and actually go ahead and get rid of my code up here for now.

2518
02:05:41,909 --> 02:05:44,839
让我继续，摆脱这个onsubmit处理程序。
And let me go ahead and get rid of this onsubmit handler.

2519
02:05:44,840 --> 02:05:48,350
现在让我继续前进-在这里-
And let me go ahead now and down here--

2520
02:05:48,350 --> 02:05:51,230
实际上，在这里，给我自己一个脚本标签。
actually, up here, give myself a script tag.

2521
02:05:51,229 --> 02:05:53,959
让我继续，以不同的方式做相同的事情。
And let me go ahead and do the same thing a little differently.

2522
02:05:53,960 --> 02:05:57,410
document.querySelector--
document.querySelector--

2523
02:05:57,409 --> 02:05:59,239
这次，让我选择表格。
this time, let me select the form.

2524
02:05:59,239 --> 02:06:01,114
而且我不会打扰给它起个名字。
And I'm not going to bother giving it a name.

2525
02:06:01,114 --> 02:06:04,159
只有一种形式，因此，如果我只选择形式，那将给我我的形式。
There's only one form, so if I just select form, that'll give me my form.

2526
02:06:04,159 --> 02:06:08,059
让我使用这个高级功能addEventListener。
And let me use this fancy function, addEventListener.

2527
02:06:08,060 --> 02:06:10,370
事实证明，Web编程的世界
It turns out that the world of web programming

2528
02:06:10,369 --> 02:06:12,589
充满了我们称之为事件的东西。
is filled with what we would call events.

2529
02:06:12,590 --> 02:06:14,480
当您单击页面时，这是一个事件。
When you click on a page, that's an event.

2530
02:06:14,479 --> 02:06:16,339
当您在页面上拖动时，这是一个事件。
When you drag on a page, that's an event.

2531
02:06:16,340 --> 02:06:18,950
在手机上，当您触摸页面时，这就是事件。
On a phone, when you touch a page, that's an event.

2532
02:06:18,949 --> 02:06:21,889
原来，使用JavaScript，您现在是程序员，
Turns out, using JavaScript, you now, the programmer,

2533
02:06:21,890 --> 02:06:24,530
可以编写侦听这些事件的代码
can write code that listens for these events

2534
02:06:24,529 --> 02:06:27,126
并通过做一些事情来回应他们。
and responds to them by doing something.

2535
02:06:27,127 --> 02:06:29,960
所以我要继续在表单上添加一个事件监听器
So I'm going to go ahead and add an event listener on my form that's

2536
02:06:29,960 --> 02:06:32,540
监听Submit事件。
listening for the Submit event.

2537
02:06:32,539 --> 02:06:37,759
提交表单后，我希望我的代码做什么？
What do I want my code to do when the form is submitted?

2538
02:06:37,760 --> 02:06:39,397
我想调用greet函数。
I want to call the greet function.

2539
02:06:39,396 --> 02:06:42,229
好的，为了使问候功能起作用，我需要重新引入它。
All right, for the greet function to work, I need to reintroduce it.

2540
02:06:42,229 --> 02:06:44,629
因此，让我快速启动问候功能。
So let me quickly whip up the greet function.

2541
02:06:44,630 --> 02:06:49,040
让我继续打个招呼，然后再加上姓名。
Let me go ahead and do an alert of hello and then plus name.

2542
02:06:49,039 --> 02:06:53,891
我需要获取name节点，所以让我说let name = document.querySelector。
I need to get the name node, so let me say let name = document.querySelector.

2543
02:06:57,619 --> 02:07:00,359
现在让我继续-我那里仍然有ID，
And now let me go ahead-- and I still have the ID there,

2544
02:07:00,359 --> 02:07:04,049
因此，让我们说quote-unquote哈希名称点值。
so let's say quote-unquote hash name dot value.

2545
02:07:04,050 --> 02:07:05,900
因此，我认为问候已经存在。
So I think greet now exists.

2546
02:07:05,899 --> 02:07:08,029
但是现在注意，这行代码可以做到这一点。
But now this line of code, notice, does this.

2547
02:07:08,029 --> 02:07:10,999
它说，嘿，浏览器，找到我的表格，然后
It says, hey, browser, find me the form, then

2548
02:07:11,000 --> 02:07:14,580
添加一个事件侦听器，侦听Submit事件，
add an event listener listening for the Submit event,

2549
02:07:14,579 --> 02:07:16,489
而当该事件被呼叫时-
and when that event is call--

2550
02:07:16,489 --> 02:07:19,249
当该事件发生时，调用此函数。
when that event happens, call this function.

2551
02:07:19,250 --> 02:07:20,570
这非常相似-
This is very similar--

2552
02:07:20,569 --> 02:07:23,629
好吧，有点像上周我们的lambda示例
well, somewhat similar to our lambda example last week

2553
02:07:23,630 --> 02:07:26,870
当我们将一个函数传递给已排序的
when we passed a function into the sorted

2554
02:07:26,869 --> 02:07:30,739
功能，以便告诉您按值而不是按键排序的内容。
function so as to tell what to sort by value instead of by key.

2555
02:07:30,739 --> 02:07:36,169
当我们定义一个函数只是为了帮助我们对事物进行排序时，请记住该语法。
Remember that syntax when we define a function just to help us sort things.

2556
02:07:36,170 --> 02:07:38,390
请注意，我不想打招呼。
Notice that I do not want to call greet.

2557
02:07:38,390 --> 02:07:41,180
我不想在第13行打招呼。
I do not want to call greet on line 13.

2558
02:07:41,180 --> 02:07:45,500
我想告诉浏览器在准备就绪时调用greet。
I want to tell the browser to call greet when it is ready.

2559
02:07:45,500 --> 02:07:48,410
因此，我按名称传递了该函数。
Therefore, I pass the function in by name.

2560
02:07:48,409 --> 02:07:51,229
现在让我继续并保存并重新加载。
Let me go ahead now and save and reload.

2561
02:07:51,229 --> 02:07:54,829
好的，视觉上没有任何变化，但是当我输入David并向我打招呼时，
OK, nothing visually has changed, but when I type in David and greet me--

2562
02:07:54,829 --> 02:07:57,049
[GASPS]呵呵。
[GASPS] huh.

2563
02:07:57,050 --> 02:07:57,980
没啥事儿。
Nothing happened.

2564
02:07:57,979 --> 02:07:58,739
我说戴维。
Let me say David.

2565
02:07:58,739 --> 02:07:59,239
迎接。
Greet.

2566
02:07:59,239 --> 02:08:00,349
没啥事儿。
Nothing happened.

2567
02:08:00,350 --> 02:08:02,420
如有疑问，如果有什么事情发生，让我们
When in doubt, if something's acting up, let's

2568
02:08:02,420 --> 02:08:06,320
回到那些开发人员工具，开发人员，开发人员工具。
go back to those developer tools, Developer, Developer Tools.

2569
02:08:06,319 --> 02:08:09,109
我们不要看网络，而要看控制台。
And let's not look at network, but look at console.

2570
02:08:09,109 --> 02:08:13,009
这是您的新朋友向您展示所有错误的地方
And here is where your new friend is going to show you all of the mistakes

2571
02:08:13,010 --> 02:08:14,750
您使用JavaScript代码制作的内容。
that you've made in JavaScript code.

2572
02:08:14,750 --> 02:08:18,410
就像在Python和C中一样，您会在终端窗口中看到错误。
Just like in Python and C, you see the errors in your terminal window.

2573
02:08:18,409 --> 02:08:23,626
由于JavaScript是在客户端运行的，因此在用户的浏览器中，
Because JavaScript is being run on the client's side, in the user's browser,

2574
02:08:23,627 --> 02:08:25,460
您不能只看终端窗口。
you can't just look at your terminal window.

2575
02:08:25,460 --> 02:08:26,450
那里不会有任何错误。
There won't be any errors there.

2576
02:08:26,449 --> 02:08:29,569
如果您要进行测试，则需要在自己的浏览器中查看。
You need to look in your own browser if you're the one testing things.

2577
02:08:29,569 --> 02:08:36,149
足够肯定的是，请注意此处，无法读取null的addEventListener属性。
And sure enough, notice here, cannot read property addEventListener of null.

2578
02:08:36,149 --> 02:08:40,069
所以这是一个微妙的问题，但我故意这样做，因为它是如此普遍-
So this is a subtle one, but I did it deliberately, because it's so common--

2579
02:08:40,069 --> 02:08:41,659
我保证我是故意做到的。
and I promise I did it deliberately.

2580
02:08:41,659 --> 02:08:44,509
让我回到这里指出这一点。
Let me go back here and point out this.

2581
02:08:44,510 --> 02:08:45,980
浏览器非常幼稚。
Browsers are pretty naive.

2582
02:08:45,979 --> 02:08:48,319
正如他们似乎正在变得幻想和强大一样，
As fancy and as powerful as they seem to be getting,

2583
02:08:48,319 --> 02:08:52,229
就像Python和C一样，它们仍然从字面上带我们，从上到下，
they still take us literally, just like Python and C did, top to bottom,

2584
02:08:52,229 --> 02:08:53,339
左到右。
left to right.

2585
02:08:53,340 --> 02:08:59,450
如果在第13行中，我说的是查询表单标签，
And if on line 13 I am saying query for the form tag,

2586
02:08:59,449 --> 02:09:03,949
但form标记要到第21行才存在，否则将无法正常工作，
but the form tag doesn't exist until line 21, it's not going to work,

2587
02:09:03,949 --> 02:09:06,499
因此，我看到的错误消息是有道理的。
and therefore the error message I'm seeing makes sense.

2588
02:09:06,500 --> 02:09:09,830
您无法读取null的属性addEventListener。
You cannot read property addEventListener of null.

2589
02:09:09,829 --> 02:09:11,659
空值从何而来？
Where is null coming from?

2590
02:09:11,659 --> 02:09:15,019
截至第13行，Form当前为空。
Form is currently null as of line 13.

2591
02:09:15,020 --> 02:09:18,800
直到第21行，它才存在。
It does not exist until line 21.

2592
02:09:18,800 --> 02:09:20,010
那么我们该如何解决呢？
So how do we fix this?

2593
02:09:20,010 --> 02:09:22,880
好吧，一种快捷而肮脏的方式是，
Well, one way, the quick and dirty way, would be, well,

2594
02:09:22,880 --> 02:09:28,280
让我们将其向下移动，现在在主体内部，但在form标签之下。
let's just move this down below, inside of the body now but below the form tag.

2595
02:09:28,279 --> 02:09:29,609
而且我认为这会起作用。
And I think this will work.

2596
02:09:29,609 --> 02:09:31,189
让我继续并立即重新加载。
Let me go ahead and reload now.

2597
02:09:31,189 --> 02:09:33,439
错误消失了，但是我还没有做任何事情。
The error goes away, but I haven't done anything yet.

2598
02:09:33,439 --> 02:09:36,649
让我在框中单击并说大卫，向我打招呼。
Let me click in the box and say David, greet me.

2599
02:09:36,649 --> 02:09:38,479
好的，可以恢复工作了。
OK, it's back to working.

2600
02:09:38,479 --> 02:09:41,244
但是就像在Python和C中一样，这有点滑。
But much like in Python and C, this is kind of a slippery slope.

2601
02:09:41,244 --> 02:09:44,119
就像，解决我们的问题的方法不能只是将其调低。
Like, the solution to our problems can't just be, well, move it down.

2602
02:09:44,119 --> 02:09:44,867
向下移动。
Move it down.

2603
02:09:44,868 --> 02:09:46,160
必须有一个更好的方法。
There's got to be a better way.

2604
02:09:46,159 --> 02:09:49,939
与原型在精神上相似，但方式不同。
Similar in spirit to prototypes, but not quite in the same way.

2605
02:09:49,939 --> 02:09:52,679
JavaScript处理此问题的方式如下。
The way JavaScript handles this problem is as follows.

2606
02:09:52,680 --> 02:09:56,780
如果我撤消该操作并返回到我现在拥有脚本的顶部，
If I undo that and go back to the top where I have my script now,

2607
02:09:56,779 --> 02:09:58,849
我实际上可以这样做。
I can actually do this instead.

2608
02:09:58,850 --> 02:10:02,660
我可以做这样的事情。
I can do something like this.

2609
02:10:02,659 --> 02:10:07,309
我可以做这个文件。addEventListener-
I can do this document.addEventListener--

2610
02:10:07,310 --> 02:10:13,090
这是一个怪异的东西-但DOMContentLoaded，
and this is a weird one-- but DOMContentLoaded,

2611
02:10:13,090 --> 02:10:15,910
调用此函数监听。
call this function listen.

2612
02:10:15,909 --> 02:10:21,969
让我去这里给自己第二个功能，即功能监听。
And let me go here and give myself a second function, function listen.

2613
02:10:21,970 --> 02:10:25,070
在此函数的内部将包含那一行代码。
And inside of this function will be that one line of code.

2614
02:10:25,069 --> 02:10:27,159
所以我现在有两个功能，其中之一
So I've got two functions now, one of which

2615
02:10:27,159 --> 02:10:30,009
处理问候，那里没有变化，一个新的叫
handles the greeting, no changes there, a new one called

2616
02:10:30,010 --> 02:10:34,240
侦听器，其目的只是添加该事件侦听器。
listen whose purpose in life is just to add that event listener.

2617
02:10:34,239 --> 02:10:35,199
就这样。
That's all.

2618
02:10:35,199 --> 02:10:38,289
但是请注意第18行，现在，我要添加一个事件
But notice here on line 18, now, I'm adding an event

2619
02:10:38,289 --> 02:10:43,029
文件本身的侦听器说何时加载DOM内容-
listener to the document itself saying when the DOM content is loaded-- that

2620
02:10:43,029 --> 02:10:46,059
也就是说，当整棵树被加载时
is to say, when this whole tree has been loaded

2621
02:10:46,060 --> 02:10:49,220
因此，表单标签已加载，其他所有内容，
and therefore the form tag has been loaded and everything else,

2622
02:10:49,220 --> 02:10:52,240
继续并调用listen函数。
go ahead and call the listen function.

2623
02:10:52,239 --> 02:10:56,739
listen函数只是将另一个侦听器添加到窗体
The listen function is just going to add another listener to the form

2624
02:10:56,739 --> 02:10:59,109
标记监听提交内容。
tag listening for submissions.

2625
02:10:59,109 --> 02:11:02,769
所以现在，如果我继续保存此文件，请重新加载，
And so now, if I go ahead and save this, reload,

2626
02:11:02,770 --> 02:11:05,980
我将打开我的开发人员工具，然后输入David并打招呼，
I'll keep my developer tools open, and type in David and greet me,

2627
02:11:05,979 --> 02:11:09,489
仍然有效，但我不必做这个愚蠢的度假胜地
still works, but I haven't had to do this stupid resort

2628
02:11:09,489 --> 02:11:13,059
将我的代码放到最底层并以这种方式解决问题。
of moving my code down to the bottom and solving the problem that way.

2629
02:11:13,060 --> 02:11:16,090
我只是在告诉浏览器，不要执行以下操作
I'm just telling the browser, don't do the following

2630
02:11:16,090 --> 02:11:19,660
直到DOM内容已加载。
until the DOMs content has loaded.

2631
02:11:19,659 --> 02:11:21,729
好吧，对此有任何疑问吗？
All right, questions on any of this?

2632
02:11:21,729 --> 02:11:23,529
而且绝对是……
And this is absolutely the more--

2633
02:11:23,529 --> 02:11:26,979
我认为，这是我们今天完成的语法和逻辑中最复杂的部分。
the most sophisticated, I think, of the syntax and the logic we've done today.

2634
02:11:26,979 --> 02:11:30,549
但是再说一次，我们只是在几周内种下了解这一点的种子
But again, we're just planting the seeds for understanding this in the weeks

2635
02:11:30,550 --> 02:11:33,130
来。
to come.

2636
02:11:33,130 --> 02:11:33,940
不？
No?

2637
02:11:33,939 --> 02:11:35,799
好吧，让我继续说吧
Well, let me go ahead and blow your minds

2638
02:11:35,800 --> 02:11:37,630
与JavaScript的另一功能
with one other feature of JavaScript that

2639
02:11:37,630 --> 02:11:41,260
实际上与Python有相似之处。
actually has similarities with Python.

2640
02:11:41,260 --> 02:11:45,520
回想一下，任何时候我们在一个地方定义一个函数，然后
Recall that any time we define a function in one place and then

2641
02:11:45,520 --> 02:11:48,190
在一个地方使用它，通常有点la脚。
use it in one place, that's generally been kind of lame.

2642
02:11:48,189 --> 02:11:51,519
就像，为什么要麻烦创建函数，添加代码行
Like, why are you bothering to create a function, adding lines of code

2643
02:11:51,520 --> 02:11:54,070
写一个只调用一次的函数？
to write a function that you're only going to call once?

2644
02:11:54,069 --> 02:11:57,249
上周使用Python的回忆-
Last week with Python recall that--

2645
02:11:57,250 --> 02:12:00,865
两周前，使用Python回想我们定义了一个函数f，
two weeks ago, with Python, recall we defined a function f,

2646
02:12:00,864 --> 02:12:02,739
然后我们说，不，不，不，这很愚蠢，
and then we said, no, no, no, this is stupid,

2647
02:12:02,739 --> 02:12:05,531
我们基本上使用lambda函数，匿名函数
let's just use a lambda function, an anonymous function, basically,

2648
02:12:05,532 --> 02:12:07,730
因为它只在一个地方使用。
because it's only being used in one place.

2649
02:12:07,729 --> 02:12:11,719
因此，这将是我们看到的最丑陋的地方，但现在开始吧。
So this is going to be the ugliest we see, but here we go.

2650
02:12:11,720 --> 02:12:14,320
如果我知道我想调用一个函数
If I know that I want to call a function called

2651
02:12:14,319 --> 02:12:17,259
监听DOM的内容加载时，我
listen when the DOM's content is loaded, I

2652
02:12:17,260 --> 02:12:19,330
无需为该函数命名。
don't need to give that function a name.

2653
02:12:19,329 --> 02:12:22,419
我实际上可以只将函数放在那里。
I can actually just put the function right there.

2654
02:12:22,420 --> 02:12:25,240
我要从字面上复制并粘贴到这里。
I'm going to literally copy and paste this over here.

2655
02:12:25,239 --> 02:12:27,739
让我删除这里多余的空白。
Let me remove the excess white space here.

2656
02:12:27,739 --> 02:12:31,839
让我继续，现在指出-
Let me go ahead and now point out--

2657
02:12:31,840 --> 02:12:34,340
我将在造型上做一些不同的选择，
and I'm going to do this a little stylistically differently,

2658
02:12:34,340 --> 02:12:36,710
只是为了与其他人的行为保持一致。
just to be consistent with what other people do.

2659
02:12:36,710 --> 02:12:38,780
注意，现在我已经完成了。
Notice now I've done this.

2660
02:12:38,779 --> 02:12:43,069
我实际上已经将该函数作为第二个参数移动了
I've literally moved that function as the second argument

2661
02:12:43,069 --> 02:12:46,559
添加到addEventListener，此时我不需要它的名称。
to addEventListener, and I don't need its name at this point.

2662
02:12:46,560 --> 02:12:48,290
我要继续做下去。
I'm going to go ahead and just do this.

2663
02:12:48,289 --> 02:12:51,829
在JavaScript中相当于lambda函数
The equivalent in JavaScript of a lambda function

2664
02:12:51,829 --> 02:12:54,979
就是说没有名字的函数
is to literally just say function with no name

2665
02:12:54,979 --> 02:12:58,409
并且仍然有开放的括号，括号之间有或没有空格。
and still have open parentheses, with or without a space in between them.

2666
02:12:58,409 --> 02:13:00,799
因此，这现在更优雅地表达了这一点，
And so what this is now saying a little more elegantly,

2667
02:13:00,800 --> 02:13:04,400
即使更隐蔽，在文档对象上，您的全局变量，
even though more cryptically, on the document object, your global variable,

2668
02:13:04,399 --> 02:13:07,129
添加事件侦听器以侦听已加载的DOM内容。
add the event listener listening for the DOM content loaded.

2669
02:13:07,130 --> 02:13:09,860
好吧，加载DOM的内容后您想做什么？
Well, what do you want to do when the DOM's content has loaded?

2670
02:13:09,859 --> 02:13:14,389
调用此匿名函数，也称为lambda函数。
Call this anonymous function, otherwise known as a lambda function.

2671
02:13:14,390 --> 02:13:15,958
但是请注意我们要做什么。
But notice what we're going to do.

2672
02:13:15,957 --> 02:13:17,749
我们要查询表格，然后
We're going to query for the form and we're

2673
02:13:17,750 --> 02:13:21,229
将通过调用greet函数在Submit上添加事件侦听器。
going to add an event listener on Submit by calling the greet function.

2674
02:13:21,229 --> 02:13:23,099
好吧，我们不需要这样做。
Well, we don't need to do that.

2675
02:13:23,100 --> 02:13:25,400
让我们继续删除它。
Let's go ahead and remove that.

2676
02:13:25,399 --> 02:13:28,904
让我们继续删除招呼函数名称并删除它。
Let's go ahead and delete the greet function name and get rid of it.

2677
02:13:28,904 --> 02:13:30,529
让我们再做一个匿名函数。
Let's make one more anonymous function.

2678
02:13:30,529 --> 02:13:31,841
让我将其粘贴在这里。
Let me paste this in here.

2679
02:13:31,841 --> 02:13:34,549
我必须快速清理格式，所以让我继续
I've got to clean up my formatting real quick, so let me go ahead

2680
02:13:34,550 --> 02:13:39,200
并在此处删除一些空格，删除函数名称，
and remove some whitespace here, remove the function name,

2681
02:13:39,199 --> 02:13:42,049
把我的大括号放在那边，摆脱掉这个
put my curly brace over there, get rid of this one

2682
02:13:42,050 --> 02:13:45,980
在这里，缩进，缩进，关闭。
here, indent that, indent this, close this.

2683
02:13:45,979 --> 02:13:50,452
可以肯定地说，看起来像是恐怖，恐怖的样子，或者至少是神秘的样子，
Whew, scary looking, to be sure, or at least cryptic looking,

2684
02:13:50,453 --> 02:13:53,370
还是令人愉悦，这取决于您是否喜欢这种东西。
or maybe delightful, depending on whether you like this kind of thing.

2685
02:13:53,369 --> 02:13:55,669
但是，这只是基本的构建块，对吗？
But again, it's just basic building blocks, right?

2686
02:13:55,670 --> 02:13:58,130
在Python中，您可以定义没有名称的函数。
In Python, you can define functions that don't have names.

2687
02:13:58,130 --> 02:14:01,700
太好了，因为如果您要将一个功能传递给另一个功能，
That's great because if you want to pass one function to another function,

2688
02:14:01,699 --> 02:14:05,569
您可以直接使用受支持的语法编写代码，即
you can literally just write the code using the supported syntax, which

2689
02:14:05,569 --> 02:14:08,479
JavaScript中不使用lambda这个词，而是使用
in JavaScript does not use the word lambda, but to use the word

2690
02:14:08,479 --> 02:14:11,959
函数没有名称，但仍带有括号，然后
function no name but still parentheses, and then

2691
02:14:11,960 --> 02:14:15,350
确保它仍然是格式正确的功能，并在此处带有大括号
making sure it's still well-formed function with an open curly brace here

2692
02:14:15,350 --> 02:14:18,530
和一个封闭的花括号，然后您可以写出您的代码。
and a closed curly brace here, you can then write out your code.

2693
02:14:18,529 --> 02:14:22,009
我在这上面有另一个括号的唯一原因
And the only reason I have this other parenthesis over here

2694
02:14:22,010 --> 02:14:27,620
是因为我已经在一个名为addEventListener的函数内。
is because I'm already inside of a function called addEventListener.

2695
02:14:27,619 --> 02:14:29,269
再说一次，如果对此感到不舒服，
So again, if uncomfortable with that--

2696
02:14:29,270 --> 02:14:31,490
没问题，当然在现阶段。
not a problem, certainly at this stage.

2697
02:14:31,489 --> 02:14:37,099
但同样，我们现在只是在上面，上面，
But again, we're just now stacking these different ideas on top, on top,

2698
02:14:37,100 --> 02:14:39,320
在彼此之上。
on top of one another.

2699
02:14:39,319 --> 02:14:43,939
好吧，现在让我向您展示一个预制的示例，该示例可以准确地向您显示
All right, well, let me show you now a premade example that shows you exactly

2700
02:14:43,939 --> 02:14:45,949
您现在可以使用这些事件做什么。
what you can do now with these events.

2701
02:14:45,949 --> 02:14:48,109
这是您未详尽列出的事件
Here's a nonexhaustive list of events that you

2702
02:14:48,109 --> 02:14:50,479
可以在浏览器中侦听，而不仅仅是
can listen for in a browser, not just things

2703
02:14:50,479 --> 02:14:56,659
例如提交，也可以单击并拖动，
like submitting, but also clicking and dragging,

2704
02:14:56,659 --> 02:14:59,929
按键，将鼠标移至上方，将鼠标移至下方，
key pressing, moving your mouse over, moving your mouse down,

2705
02:14:59,930 --> 02:15:03,183
上下按钮，触摸和移动以及其他此类事件。
the button up and down, touching and moving, and other such events.

2706
02:15:03,182 --> 02:15:06,349
您可以执行全部事件列表，以便实际上
There's this whole list of events that you can do such that you can actually

2707
02:15:06,350 --> 02:15:07,220
做这样的事情。
do things like this.

2708
02:15:07,220 --> 02:15:10,730
让我回到我的IDE，让我打开一个预制的示例，
Let me go back to my IDE, and let me open up a premade example,

2709
02:15:10,729 --> 02:15:13,669
这个叫做hello5.html。
this one called hello5.html.

2710
02:15:13,670 --> 02:15:16,700
在hello5.html中，我已经有了这个例子
And in hello5.html, I've got this example already

2711
02:15:16,699 --> 02:15:18,199
那只是做一些事情。
that-- it's just doing a few things.

2712
02:15:18,199 --> 02:15:22,909
它正在侦听DOMContentLoaded，但随后正在侦听密钥。
It's listening for DOMContentLoaded, but it's then listening for key up.

2713
02:15:22,909 --> 02:15:24,702
那和加锁有什么关系呢？
And what's it going to do with key up?

2714
02:15:24,703 --> 02:15:25,370
走着瞧。
Well, let's see.

2715
02:15:25,369 --> 02:15:27,349
让我在这里进入我的索引。
Let me go over here into my index.

2716
02:15:27,350 --> 02:15:29,540
我将关闭调试工具。
I'm going to close the debugging tools.

2717
02:15:29,539 --> 02:15:33,149
让我在这里重新加载目录索引。
Let me reload my directory index here.

2718
02:15:33,149 --> 02:15:39,589
这给了我第八个源代码中的另一个文件hello5.html。
And that gives me this other file in source eight called hello5.html.

2719
02:15:39,590 --> 02:15:42,770
现在，请注意这里，我要继续输入大卫-
Now, notice here, I'm going to go ahead and type in David--

2720
02:15:42,770 --> 02:15:43,580
哦。
oh.

2721
02:15:43,579 --> 02:15:46,959
请注意，网页本身立即与我互动，
Notice, the web page itself is immediately interacting with me,

2722
02:15:46,960 --> 02:15:49,460
当我删除它时，它会说，你好，无论你是谁。
and as soon as I delete it, it says, hello, whoever you are.

2723
02:15:49,460 --> 02:15:51,335
因此，使用JavaScript，您甚至可以
So with JavaScript, you have the ability even

2724
02:15:51,335 --> 02:15:55,580
更改网页的内容，而不仅仅是发出难看的警报。
to change the contents of the web page, not just by throwing an ugly alert.

2725
02:15:55,579 --> 02:15:59,299
您可以像在这里看到的那样使用代码，我们将不对其进行详细介绍，
You can use code like you see here, which we won't get into the details of,

2726
02:15:59,300 --> 02:16:01,460
但允许您更改页面本身。
but allows you to change the page itself.

2727
02:16:01,460 --> 02:16:04,130
请注意，这是一种难看的语法。
And notice here-- this is kind of ugly-looking syntax.

2728
02:16:04,130 --> 02:16:05,750
您甚至不必串联。
You don't even have to concatenate.

2729
02:16:05,750 --> 02:16:08,959
就像Python在JavaScript中有f个字符串一样，
Just like Python has f strings, in JavaScript,

2730
02:16:08,960 --> 02:16:12,530
你可以用反引号加一个美元符号和愚蠢的花括号
you can use backticks plus a dollar sign and stupid curly braces

2731
02:16:12,529 --> 02:16:13,519
并做同样的事情。
and do the same thing.

2732
02:16:13,520 --> 02:16:16,970
我在这里表现出一些偏见。
And I'm showing some bias here.

2733
02:16:16,970 --> 02:16:20,297
我认为这是愚蠢的语法，但与Python中的语法完全一样。
Stupid syntax, I think, but same exact idea as it was in Python.

2734
02:16:20,296 --> 02:16:22,879
再说一遍，这些都是会让您绊倒的事情
And again, these are the kinds of things that will trip you up

2735
02:16:22,880 --> 02:16:26,570
不可避免，但是随着您对语言的使用越来越熟悉，
early on, inevitably, but again, as you get more comfortable with the language,

2736
02:16:26,569 --> 02:16:31,089
所有的想法将胜过特定的语法。
all of the ideas will outshine the particular syntax.

2737
02:16:31,090 --> 02:16:31,590
好的。
All right.

2738
02:16:31,590 --> 02:16:33,709
让我们看看其他一些预制的例子
Let's look at a few other premade examples

2739
02:16:33,709 --> 02:16:36,469
只是为了让您了解JavaScript的功能。
just to give you a sense of the capabilities of JavaScript.

2740
02:16:36,468 --> 02:16:39,259
这是一个名为background.html的程序。
Here's a program called background.html.

2741
02:16:39,260 --> 02:16:42,392
您将看到的该网页将具有三个按钮。
And this web page you'll see is going to have three buttons.

2742
02:16:42,391 --> 02:16:45,349
事实证明，您可以通过不同的方式在网页上实现按钮。
It turns out you can implement buttons on a web page in different ways.

2743
02:16:45,350 --> 02:16:48,110
您可以从字面上使用button标记。
You can literally use the button tag.

2744
02:16:48,110 --> 02:16:51,350
在这里，我有很多使用querySelector的代码
Down here, I have a whole bunch of code using querySelector

2745
02:16:51,350 --> 02:16:54,770
再一次，但要更有力，请注意您也可以执行的操作。
again, but more powerfully, notice what you can also do.

2746
02:16:54,770 --> 02:16:57,830
如果您继续使用JavaScript并选择自己的身体
If you go ahead in JavaScript and select your body

2747
02:16:57,829 --> 02:17:00,769
通过说document.querySelector主体，您
by saying document.querySelector body, you

2748
02:17:00,770 --> 02:17:06,440
然后实际上可以访问页面主体内部的特殊变量-
can actually then access a special variable inside of the page's body--

2749
02:17:06,440 --> 02:17:08,570
或任何与此相关的标签-称为样式。
or any tag for that matter-- called style.

2750
02:17:08,569 --> 02:17:14,329
然后，您可以使用JavaScript更改CSS属性的样式
And then you can change, with JavaScript, the style of a CSS property

2751
02:17:14,329 --> 02:17:15,378
使用代码。
using code.

2752
02:17:15,379 --> 02:17:18,139
不幸的是，左手没有和右手说话。
And unfortunately, left hand was not talking to right hand.

2753
02:17:18,138 --> 02:17:21,229
如我们所见，在CSS中，它将是背景破折号颜色。
In CSS, it would be background dash color, as we saw.

2754
02:17:21,229 --> 02:17:24,149
不幸的是，在JavaScript中，一种适当的编程语言，
Unfortunately, in JavaScript, a proper programming language,

2755
02:17:24,149 --> 02:17:28,009
这将是背景减去颜色，就像字面上的算术一样。
this would be background minus color, like literally arithmetic.

2756
02:17:28,010 --> 02:17:31,700
因此世界决定所有带连字符的CSS属性
So the world decided that any CSS properties with hyphens

2757
02:17:31,700 --> 02:17:35,282
而是变成背景大写的颜色
would instead become something like background capital color

2758
02:17:35,281 --> 02:17:36,239
区分两者。
to distinguish the two.

2759
02:17:36,239 --> 02:17:37,849
但这是完全相同的想法。
But it's the same exact idea.

2760
02:17:37,850 --> 02:17:41,629
如果我现在在这里进入此文件，background.html--
If I go now into this file here, background.html--

2761
02:17:41,629 --> 02:17:45,110
好吧，现在我有了一个非常简单的页面，其中包含三个按钮R，G和B。
well, now I have a very simple page with three buttons, R, G, and B.

2762
02:17:45,110 --> 02:17:48,320
但是请注意，当我单击它们时，我已经预先定义了，
But notice when I click on them, I have defined in advance,

2763
02:17:48,319 --> 02:17:50,718
我声称，有些事件监听器可供点击。
I claim, some event listeners for click.

2764
02:17:50,718 --> 02:17:54,989
每次听到点击声时，我都会更改页面的CSS。
And every time I hear the click, I change the CSS of the page.

2765
02:17:54,989 --> 02:17:59,718
如果还不很酷，那么让我打开View，Developer Tools，
And if this weren't cool already, let me open up View, Developer Tools,

2766
02:17:59,718 --> 02:18:01,339
开发人员工具在这里。
developer tools here.

2767
02:18:01,340 --> 02:18:04,219
请注意，今天的第三个也是最后一个选项卡是元素。
Notice the third and final tab today is elements.

2768
02:18:04,218 --> 02:18:08,208
无论您的HTML多么丑陋，开发人员标签都-
No matter how ugly your HTML is, the developer tag--

2769
02:18:08,209 --> 02:18:10,309
开发者工具元素标签将始终
the developer tools elements tab will always

2770
02:18:10,308 --> 02:18:13,849
以非常漂亮的，印花的，彩色的方式向您展示。
show it to you in a very pretty, printed, colorful fashion.

2771
02:18:13,850 --> 02:18:17,930
但是，随着实时变化，它还将向您显示实际的CSS。
But it will also show you the actual CSS as it's changing in real time.

2772
02:18:17,930 --> 02:18:19,549
因此，让我重新加载页面。
So let me reload the page.

2773
02:18:19,549 --> 02:18:22,400
默认情况下，请注意整个页面都有白色背景。
By default, notice the whole page has a white background.

2774
02:18:22,399 --> 02:18:26,569
并请注意，实际上，主体上没有样式属性。
And notice down here, indeed, the body has no style attributes on it.

2775
02:18:26,569 --> 02:18:28,999
但是，如果我暂时缩小一下，然后单击R，
But if I zoom out for a moment and now click R,

2776
02:18:29,000 --> 02:18:32,629
观看页面底部的HTML。
watch the HTML on the bottom of the page.

2777
02:18:32,629 --> 02:18:35,930
Chrome只是动态添加了背景色红色。
Chrome just dynamically added background-color red.

2778
02:18:35,930 --> 02:18:40,100
如果我单击绿色，则背景色为绿色，而蓝色为-
If I click green, background-color green is now there, and blue--

2779
02:18:40,100 --> 02:18:44,120
因此，使用这些开发人员工具，您可以与自己的网站进行互动
so using these developer tools, you can interact with your own website

2780
02:18:44,120 --> 02:18:47,389
并查看DOM中发生的变化。
and see what's changing in the DOM.

2781
02:18:47,388 --> 02:18:51,199
我们正在实时更改此树的属性，
We are changing in real time the attributes of this tree,

2782
02:18:51,200 --> 02:18:54,480
从而使页面更加动态。
thereby making the page all the more dynamic.

2783
02:18:54,479 --> 02:18:55,399
这也很强大。
This is powerful, too.

2784
02:18:55,399 --> 02:18:59,298
让我转到Harvard.edu，例如，打开开发人员工具，
Let me go to Harvard.edu, for instance, open up developer tools,

2785
02:18:59,299 --> 02:19:05,420
并注意这里，我们可以在“元素”选项卡中看到Harvard.edu的所有HTML。
and notice here, we can see all of Harvard.edu's HTML in the Elements tab.

2786
02:19:05,420 --> 02:19:07,670
请注意，这里有很多HTML，但是有
Notice it's a lot of HTML here, but there's

2787
02:19:07,670 --> 02:19:09,940
所有这些扩展它的三角形-
all of these triangles that expand it--

2788
02:19:09,940 --> 02:19:12,320
而是使它崩溃，只是为了使其更加简洁。
rather, that collapse it, just to make it more succinct.

2789
02:19:12,319 --> 02:19:15,439
如果您想看一些具体的事情，那就继续吧
If you want to look at specific things, let's go ahead

2790
02:19:15,440 --> 02:19:18,900
并说这样的话。
and say something like this.

2791
02:19:18,899 --> 02:19:19,489
让我们来看看。
Let's see.

2792
02:19:19,489 --> 02:19:22,949
在这里进行更改可能会很有趣？
What could be fun to change here?

2793
02:19:22,950 --> 02:19:23,780
这个怎么样？
How about this?

2794
02:19:23,780 --> 02:19:26,809
我要继续，然后右键单击或按住Control键单击“关于哈佛”，
I'm going to go ahead and right-click or Control-click on About Harvard,

2795
02:19:26,808 --> 02:19:29,808
因为这不是我想要的。
because this I'm finding not what I want.

2796
02:19:29,808 --> 02:19:33,138
它会在“元素”标签中自动打开
It's going to automatically open in the Elements tab

2797
02:19:33,138 --> 02:19:37,308
哈佛用来创建About Harvard的实际HTML。
the actual HTML that Harvard used to create About Harvard.

2798
02:19:37,308 --> 02:19:38,569
这里还有一些其他标签。
It's got some other tags here.

2799
02:19:38,569 --> 02:19:39,689
跨度是另一回事。
Span is another thing.

2800
02:19:39,690 --> 02:19:41,750
就像一个迷你段落一样，全部一行。
It's like a mini paragraph, all on one line.

2801
02:19:41,750 --> 02:19:42,860
我们以前见过的课。
Class we've seen before.

2802
02:19:42,860 --> 02:19:44,299
我不知道lg-nav-txt是什么
I don't know what lg-nav-txt--

2803
02:19:44,299 --> 02:19:48,110
哈佛发明的类名称可能是很大的导航文字。
it's probably large navigational text that Harvard invented as a class name.

2804
02:19:48,110 --> 02:19:49,920
但是请注意我在这里可以做什么。
But notice what I can do here.

2805
02:19:49,920 --> 02:19:53,750
我们如何将其更改为Yale，然后按Enter键呢？
How about we change this to Yale and then hit Enter?

2806
02:19:53,750 --> 02:19:56,270
瞧，入侵Harvard.edu。
And voila, hacking Harvard.edu.

2807
02:19:56,270 --> 02:20:00,170
因此，当然，了解这里发生的事情很重要。
So of course understanding what's going on here is important.

2808
02:20:00,170 --> 02:20:03,170
我只更改了Harvard.edu的本地副本
I'm only changing my local copy of Harvard.edu

2809
02:20:03,170 --> 02:20:05,150
那已经下载到我的页面上了。
that's been downloaded onto my page.

2810
02:20:05,149 --> 02:20:08,219
如果您现在访问Harvard.edu，这些更改将不会永久存在，
If you go to Harvard.edu now, those changes are not persistent,

2811
02:20:08,219 --> 02:20:09,739
所以它本身不是黑客。
so it's not hacking per se.

2812
02:20:09,739 --> 02:20:13,189
但这实际上也是您可以学习如何设计网页的方法。
But this is really, too, how you can learn how to design web pages.

2813
02:20:13,190 --> 02:20:17,540
如果我访问Yale.edu，则可以类似地查看Yale的所有HTML并进行更改
If I go to Yale.edu, I can similarly look at all of Yale's HTML and change

2814
02:20:17,540 --> 02:20:18,050
这里的事情。
things here.

2815
02:20:18,049 --> 02:20:19,819
让我右键单击“关于耶鲁”。
Let me right-click on About Yale.

2816
02:20:19,819 --> 02:20:21,259
单击检查。
Click on Inspect.

2817
02:20:21,260 --> 02:20:24,200
让我继续并将其更改为“哈佛，Enter”。
Let me go ahead and change this to Harvard, Enter.

2818
02:20:24,200 --> 02:20:27,830
而且，我也可能真的很恶意，但只能在自己的计算机上。
And I can be really malicious, too, but only on my own machine.

2819
02:20:27,829 --> 02:20:30,799
请注意，在此处，在开发人员工具中，
Notice over here at right, in the developer tools,

2820
02:20:30,799 --> 02:20:33,319
您可以看到当前所有的CSS样式
you can see all of the CSS styles that are currently

2821
02:20:33,319 --> 02:20:35,959
应用于该特定标签。
being applied to that particular tag.

2822
02:20:35,959 --> 02:20:36,799
并注意这一点。
And notice this.

2823
02:20:36,799 --> 02:20:39,529
如果我在这里把颜色换下来-
If I change color down here at top--

2824
02:20:39,530 --> 02:20:43,820
右下角，让我将其更改为ff0000，然后按Enter。
bottom right, let me change it to ff0000 and hit Enter.

2825
02:20:43,819 --> 02:20:44,449
瞧。
Voila.

2826
02:20:44,450 --> 02:20:48,710
我已将该行中所有耶鲁大学的标签更改为红色。
I've changed all of Yale's tags along that row to be red.

2827
02:20:48,709 --> 02:20:51,109
因此，这又不是关于黑客入侵某些网站的信息，
So this isn't, again, about hacking some website,

2828
02:20:51,110 --> 02:20:53,030
因为它对实际的服务器没有影响，
because it has no effect on the actual server,

2829
02:20:53,030 --> 02:20:57,950
但是微调您自己页面的美观程度变得如此容易和快捷
but it is so much easier and faster to fine-tune your own page's aesthetics

2830
02:20:57,950 --> 02:20:59,990
只需使用浏览器，修改一下内容，
by just using your browser, tinker with things,

2831
02:20:59,989 --> 02:21:03,169
尝试新的属性，依此类推，然后当您准备保存它时，
try new properties, and so forth, and then when you're ready to save it,

2832
02:21:03,170 --> 02:21:06,200
然后进入您的文本编辑器并输入
then go into your text editor and type out

2833
02:21:06,200 --> 02:21:09,740
或复制粘贴这些特定属性。
or copy paste those particular attributes.

2834
02:21:09,739 --> 02:21:10,649
我们还能做什么？
What else can we do?

2835
02:21:10,649 --> 02:21:12,857
好吧，让我在这里也向您展示一些最终示例。
Well, let me show you a few final examples here, too.

2836
02:21:12,858 --> 02:21:16,640
让我继续进入size.html。
Let me go ahead and go into size.html.

2837
02:21:16,639 --> 02:21:20,239
请注意，这里是一些初始字体大小的示例拉丁文本，
Notice here-- here's some sample Latin text in an initial font size,

2838
02:21:20,239 --> 02:21:23,779
但我使用的是您在网络表单上常见的下拉菜单。
but I'm using a little drop-down menu that you see commonly on web forms.

2839
02:21:23,780 --> 02:21:25,610
让我放大文本。
Let me make the text larger.

2840
02:21:25,610 --> 02:21:27,590
让我把它做得特别大。
Let me make it extra, extra large.

2841
02:21:27,590 --> 02:21:32,090
这只是使用JavaScript，侦听此drop的更改事件
This is just using JavaScript, listening for change events to this drop

2842
02:21:32,090 --> 02:21:37,010
下拉菜单，并相应地更改样式的大小
down menu, and correspondingly changing the style's size

2843
02:21:37,010 --> 02:21:39,380
该文本的特定段落。
of that particular paragraph of text.

2844
02:21:39,379 --> 02:21:40,699
让我做另一件事。
Let me do this other thing.

2845
02:21:40,700 --> 02:21:44,210
回到我学习HTML的那一天，HTML 1.0-
Back in my day when I learned HTML, HTML 1.0--

2846
02:21:44,209 --> 02:21:45,499
我们现在最多五个
we're up to five now--

2847
02:21:45,500 --> 02:21:49,279
从字面上看有一个HTML标记叫做眨眼，它实际上就是这样做的。
there was literally an HTML tag called blink and that would literally do this.

2848
02:21:49,280 --> 02:21:51,350
我的第一个主页可能迎接了访客
My first home page probably greeted visitors

2849
02:21:51,350 --> 02:21:55,100
像“欢迎使用我的网页”在这令人毛骨悚然的闪烁中
with, like, "Welcome to my web page" in this hideous, hideous blinking

2850
02:21:55,100 --> 02:21:55,820
审美的。
aesthetic.

2851
02:21:55,819 --> 02:21:57,919
但是使用JavaScript，我们可以做同样的事情。
But with JavaScript, we can do the same thing.

2852
02:21:57,920 --> 02:22:01,940
让我打开，然后-哦，让我继续打开此处的Inspect。
And let me go open and-- oh, let me go ahead and open Inspect here.

2853
02:22:01,940 --> 02:22:04,310
让我将其移至此处并放大。
And let me move this up here and zoom in.

2854
02:22:04,309 --> 02:22:05,689
注意发生了什么。
Notice what's happening.

2855
02:22:05,690 --> 02:22:08,330
我在这个文件中写了一些JavaScript代码
I wrote some JavaScript code in this file

2856
02:22:08,329 --> 02:22:12,919
叫做blink.html，每半秒或第二秒
called blink.html that every half a second or second

2857
02:22:12,920 --> 02:22:18,980
正在改变我的身体样式，使其可见或隐藏，可见或隐藏。
is changing the style of my body to be visible or hidden, visible or hidden.

2858
02:22:18,979 --> 02:22:22,639
如果您想对此稍作介绍，如果我真的看过那个HTML
And if you want a little teaser of that, if I actually look at that HTML

2859
02:22:22,639 --> 02:22:26,269
在blink.html中，这是因为在JavaScript中
in blink.html, that's because in JavaScript there's

2860
02:22:26,270 --> 02:22:29,450
这个很酷的函数叫做window.setInterval
this cool function called window.setInterval

2861
02:22:29,450 --> 02:22:32,960
使您可以每隔毫秒调用一个函数。
that lets you call a function every number of milliseconds.

2862
02:22:32,959 --> 02:22:35,109
因此，如果我将其更改为更快，
So if I were to change this to be even faster--

2863
02:22:35,110 --> 02:22:38,650
让我们每100毫秒执行一次，然后保存并重新加载，
let's do it every 100 milliseconds and save and reload,

2864
02:22:38,649 --> 02:22:41,269
您现在会看到它的闪烁速度更快。
you'll see now it's flashing even faster.

2865
02:22:41,270 --> 02:22:44,980
因此，您可以通过注册来一次又一次地做事
So you can do things again and again by registering

2866
02:22:44,979 --> 02:22:47,529
这些间隔在代码中。
these kinds of intervals in code.

2867
02:22:47,530 --> 02:22:52,260
更酷的是，让我继续在这里获取另一个URL。
Even cooler, let me go ahead and grab another URL here.

2868
02:22:52,260 --> 02:22:54,010
只是由于我的浏览器设置，
And just because of my browser's settings,

2869
02:22:54,010 --> 02:22:58,180
我将继续并立即在Safari中（而不是Chrome）打开此文件。
I'm going to go ahead and open this one in Safari instead of Chrome right now.

2870
02:22:58,180 --> 02:23:00,820
这称为geolocation.html。
This is called geolocation.html.

2871
02:23:00,819 --> 02:23:03,009
在此文件中，我们已经预先编写了一些代码
In this file, we've written some code in advance

2872
02:23:03,010 --> 02:23:05,560
实际上，这将试图弄清楚您在世界上的位置。
that's actually going to try to figure out where in the world you are.

2873
02:23:05,559 --> 02:23:07,599
请注意，为了隐私起见，我们不能只是
And notice, for privacy's sake, we can't just

2874
02:23:07,600 --> 02:23:09,580
假定弄清楚你们都在哪里。
presume to figure out where you all are.

2875
02:23:09,579 --> 02:23:13,097
相反，我们会像这样提示您-浏览器是
We're instead going to prompt you, like this-- the browser is

2876
02:23:13,097 --> 02:23:14,139
将为您做到这一点。
going to do that for you.

2877
02:23:14,139 --> 02:23:15,969
我将继续进行并允许该查询。
I'm going to go ahead and allow this query.

2878
02:23:15,969 --> 02:23:21,969
瞧，这个文件geolocation.html只会打印出您的GPS坐标。
And voila, this file, geolocation.html, just prints out your GPS coordinates.

2879
02:23:21,969 --> 02:23:26,769
并不是特别有趣，但是如果我去Google Maps这样的话，
Not particularly interesting, but if I go to, like, Google Maps,

2880
02:23:26,770 --> 02:23:29,140
我可以从字面上搜索那些GPS坐标。
I can literally search for those GPS coordinates.

2881
02:23:29,139 --> 02:23:31,869
如果您对此时此刻我的位置感到好奇-
And if you're curious as to where I am right now at this moment--

2882
02:23:31,870 --> 02:23:35,890
那不是我，但是如果我进入卫星模式并放大，
that's not me, but if I go into satellite mode and zoom in,

2883
02:23:35,889 --> 02:23:39,909
我们确实是粗略的，是《美国话语汇编》的一部分
we are indeed roughly and that part of the American Repertory

2884
02:23:39,909 --> 02:23:43,299
在布雷特街的剧院在剑桥，马萨诸塞，美国。
Theater on Brattle Street in Cambridge, Massachusetts, USA.

2885
02:23:43,299 --> 02:23:46,149
令人毛骨悚然，使用JavaScript，您甚至可以
So pretty creepy that using JavaScript, you can even

2886
02:23:46,149 --> 02:23:47,589
找出您的用户所在的位置。
figure out where your users are.

2887
02:23:47,590 --> 02:23:51,100
现在，乍一看令人毛骨悚然，但是如果您使用过Uber Eats或Grubhub
Now, creepy at first glance, but if you've used Uber Eats or Grubhub

2888
02:23:51,100 --> 02:23:53,950
或实际上任何有关天气的网站
or really any website, like, for the weather that

2889
02:23:53,950 --> 02:23:56,690
询问您的位置，该怎么做？
asks you for your location, how is it doing that?

2890
02:23:56,690 --> 02:23:59,650
好吧，那些网站的程序员已经写了一些代码，
Well, the programmer of those websites has written some code,

2891
02:23:59,649 --> 02:24:04,239
就像我们在geolocation.html中所做的那样，其中包含以下代码行，
as we did in geolocation.html, that has a line of code like this,

2892
02:24:04,239 --> 02:24:07,629
navigator.geolocatio n.getCurrentPosition，
navigator.geolocatio n.getCurrentPosition,

2893
02:24:07,629 --> 02:24:10,449
然后它是您浏览器中内置的功能，
and then it's a function built into your browser that,

2894
02:24:10,450 --> 02:24:13,840
在用户许可下，将告诉您用户的纬度
with the user's permission, will tell you the user's latitude

2895
02:24:13,840 --> 02:24:20,260
和经度，再次使用浏览器的一些内置功能。
and longitude, using, again, just some built-in functionality to the browser.

2896
02:24:20,260 --> 02:24:22,750
然后是JavaScript的最后一个示例。
And then one final example here in JavaScript.

2897
02:24:22,750 --> 02:24:25,990
事实证明，您可以以更理想的方式实现自动完成。
It turns out that you can implement autocomplete in an even fancier way.

2898
02:24:25,989 --> 02:24:30,159
在今天之前，我们将问题集5，拼写检查器，
In advance of today, we converted problem set 5, spellchecker,

2899
02:24:30,159 --> 02:24:33,399
140,000多个字，称为大文件，
the 140,000-plus words, the text file called large,

2900
02:24:33,399 --> 02:24:36,819
到相应的名为large.js的JavaScript文件中，
into a corresponding JavaScript file called large.js,

2901
02:24:36,819 --> 02:24:38,899
我们在这里写了自动完成功能。
and we wrote autocomplete here.

2902
02:24:38,899 --> 02:24:43,269
因此，让我继续输入A，我会立即看到一个无序的
So let me go ahead and type in A, and I will instantaneously see an unordered

2903
02:24:43,270 --> 02:24:46,720
以A开头的所有单词的列表。让我输入AP，
list of all of the words that start with A. Let me type in A-P,

2904
02:24:46,719 --> 02:24:51,519
现在，它更改为以AP开头的所有单词。苹果 -
Now it's changing to all the words that start with A-P. A-P-P-L-E--

2905
02:24:51,520 --> 02:24:53,530
这就是自动完成的工作方式。
this is how autocomplete works.

2906
02:24:53,530 --> 02:24:55,840
使用JavaScript，我在听什么？
Using JavaScript, what am I listening for?

2907
02:24:55,840 --> 02:24:59,320
好吧，如果我回到刚才的活动清单，
Well, if I go back to this laundry list of events from a moment ago,

2908
02:24:59,319 --> 02:25:03,249
我敢打赌我正在听这些按键或按键事件之一，
I bet I'm listening for one of these key presses or key up events,

2909
02:25:03,250 --> 02:25:05,799
所以听用户敲击他们的钥匙，
so listening for the user hitting their key,

2910
02:25:05,799 --> 02:25:10,084
当他们键入密钥时，我可能正在使用该.value语法
and as soon as they type their key, I'm using probably that .value syntax

2911
02:25:10,084 --> 02:25:13,209
得到任何人类输入的值，然后我将其显示出来
to get the value of whatever the human typed in, and then I'm displaying it

2912
02:25:13,209 --> 02:25:18,159
在页面中，然后在页面中动态添加或删除li元素
in the page, and then dynamically adding or removing li elements from the page

2913
02:25:18,159 --> 02:25:18,789
动态地。
dynamically.

2914
02:25:18,790 --> 02:25:21,273
再说一次，我们还没有亲身实践如何做到这一点，
So again, we've not seen hands-on how to do this,

2915
02:25:21,272 --> 02:25:22,689
但是这里有构建块。
but the building blocks are there.

2916
02:25:22,690 --> 02:25:24,520
您可以更改网页的样式。
You can change the web page's style.

2917
02:25:24,520 --> 02:25:26,320
您可以将HTML添加到页面。
You can add HTML to the page.

2918
02:25:26,319 --> 02:25:30,079
您可以收听此类事件。
And you can listen for these kinds of events.

2919
02:25:30,079 --> 02:25:35,319
现在，事实证明不仅是JavaScript可以利用URL
Now, it turns out that it is not only JavaScript that can make use of URLs

2920
02:25:35,319 --> 02:25:36,039
这样。
in this way.

2921
02:25:36,040 --> 02:25:38,320
我们认为我们将在这里做最后一个演示，
And we thought we'd do one final demo here,

2922
02:25:38,319 --> 02:25:43,959
这个叫回去玩的Python，我将做一点
this one calling back into play Python, whereby I'm going to do a little

2923
02:25:43,959 --> 02:25:45,729
这里有我们的南瓜灯。
something with our jack-o'-lantern here.

2924
02:25:45,729 --> 02:25:48,819
让我把他拉近我。
Let me bring him over closer to me.

2925
02:25:48,819 --> 02:25:53,289
您会发现他的里面有一个灯泡。
And you'll see that he's got a light bulb tucked inside of him.

2926
02:25:53,290 --> 02:25:58,180
让我们继续面对他。
And let's go ahead and face him forward.

2927
02:25:58,180 --> 02:26:03,430
原来，这里的南瓜灯里面的灯泡是
It turns out that the light bulb inside of this jack-o'-lantern here is

2928
02:26:03,430 --> 02:26:06,860
实际上，这些具有互联网功能的更现代的LED灯泡之一
actually one of these fancier modern LED light bulbs that has an internet

2929
02:26:06,860 --> 02:26:07,360
联系。
connection.

2930
02:26:07,360 --> 02:26:09,910
这是一个物联网设备，一个物联网设备。
It's an internet of things device, an IoT device.

2931
02:26:09,909 --> 02:26:12,939
碰巧正在和这个小小的无线通话
And it happens to be talking to this little wireless

2932
02:26:12,940 --> 02:26:16,240
我在讲台上安装的设备，这样灯泡就从字面上
device here that I have on the lectern so that the light bulb is literally

2933
02:26:16,239 --> 02:26:19,479
在讲台上与该设备进行无线通信。
communicating wirelessly to that device on the lectern.

2934
02:26:19,479 --> 02:26:22,291
然后将该设备插入哈佛的网络。
And that device, in turn, is plugged into Harvard's network.

2935
02:26:22,291 --> 02:26:24,999
当然，我的笔记本电脑也已插入哈佛的网络，
And my laptop, of course, is plugged into Harvard's network, too,

2936
02:26:25,000 --> 02:26:27,520
所以我们现在有能力，看来，
and so we have the ability now, it would seem,

2937
02:26:27,520 --> 02:26:32,080
在Mac或您的PC上编写与此灯泡有联系的代码
to write code on my Mac or your PC that somehow talks to this light bulb

2938
02:26:32,079 --> 02:26:35,809
通过使用我们的本地互联网，我们的本地网络，如果您愿意，
by using our local internet, our local network, if you will,

2939
02:26:35,809 --> 02:26:37,899
连接这两个设备。
to connect those two devices.

2940
02:26:37,899 --> 02:26:40,809
事实证明，像这样的设备经常
And it turns out that devices like this very often

2941
02:26:40,809 --> 02:26:44,889
具有API，即应用程序编程接口，为简单起见，
have APIs, Application Programming Interfaces, that for simplicity, are

2942
02:26:44,889 --> 02:26:46,779
实际上基于URL。
actually based on URLs.

2943
02:26:46,780 --> 02:26:50,050
它们是简单的网址，因此，如果我发送特定的HTTP
They're simple URLs so that if I send a certain HTTP

2944
02:26:50,049 --> 02:26:54,499
要求此灯泡，它会自动关闭或打开或执行其他操作。
request to this light bulb, it will turn itself off or on or do something else.

2945
02:26:54,500 --> 02:26:57,830
如果我再发送一个请求，它也会执行该操作。
And if I send another request, it will do that thing as well.

2946
02:26:57,829 --> 02:27:00,556
现在，这不是所有API的工作方式，但实际上，
Now, that's not how all APIs work, but indeed,

2947
02:27:00,557 --> 02:27:02,890
只是因为我们现在正在过渡到网络编程，
just because we're transitioning now to web programming,

2948
02:27:02,889 --> 02:27:04,597
并不意味着我们将Python抛在脑后。
doesn't mean we're leaving Python behind.

2949
02:27:04,597 --> 02:27:07,719
实际上，下周我们将进一步带回Python，以及SQL，
In fact, next week we'll bring Python back all the more, and SQL,

2950
02:27:07,719 --> 02:27:13,089
结合了这五种技术，即HTML，CSS，JavaScript，Python和SQL，
combine all five of these technologies, HTML, CSS, JavaScript, Python, and SQL,

2951
02:27:13,090 --> 02:27:16,360
并将它们捆绑在一起成为一个完善的Web应用程序。
and tie them all together into a full-fledged web application.

2952
02:27:16,360 --> 02:27:19,990
但是要做到这一点，让我继续在这里创建一个程序
But to do this, let me go ahead and create a program here

2953
02:27:19,989 --> 02:27:22,169
在Python中称为light.py。
called light.py in Python.

2954
02:27:22,170 --> 02:27:24,670
而且我正在自己的Mac上执行此操作，因此我不在云中。
And I'm doing it on my own Mac so that I'm not in the cloud.

2955
02:27:24,670 --> 02:27:26,980
我实际上在这里是哈佛的本地网络。
I'm actually on Harvard's local network here.

2956
02:27:26,979 --> 02:27:31,287
让我导入几个库，导入os和导入请求。
Let me import a couple of libraries, import os and import requests.

2957
02:27:31,288 --> 02:27:33,330
我们以前没有看过，但是有一个图书馆
We've not seen this before, but there's a library

2958
02:27:33,329 --> 02:27:35,579
可以在Python中使用，称为请求，
that's available with Python called requests,

2959
02:27:35,579 --> 02:27:41,309
允许您使用Python发出HTTP请求，就像浏览器一样。
which allows you to make, with Python, HTTP requests, just like a browser.

2960
02:27:41,309 --> 02:27:44,496
让我继续声明一个名为username的变量
Let me go ahead and declare a variable called username

2961
02:27:44,496 --> 02:27:47,579
这将仅仅是获得所谓的环境的结果
that's going to be the result of just getting what's called an environment

2962
02:27:47,579 --> 02:27:48,809
名为用户名的变量。
variable called username.

2963
02:27:48,809 --> 02:27:51,269
因此，出于隐私考虑，我不想键入自己的用户名
So for privacy's sake I didn't want to type my own username

2964
02:27:51,270 --> 02:27:53,850
哈佛网络加入该程序的密码和密码，
and password for Harvard's network into this program,

2965
02:27:53,850 --> 02:27:56,340
因此存在所谓的环境变量
so there exist what are called environment variables

2966
02:27:56,340 --> 02:28:01,380
在Mac，PC和Linux计算机上，您可以秘密存储值
on Macs and PCs and Linux computers that you can store values secretly

2967
02:28:01,379 --> 02:28:02,009
别处。
elsewhere.

2968
02:28:02,010 --> 02:28:05,550
并使用Python的os.genenv函数，
And using Python's os.genenv function, you

2969
02:28:05,549 --> 02:28:08,759
可以将它们秘密地加载到计算机的内存中。
can load those into the computer's memory somewhat privately.

2970
02:28:08,760 --> 02:28:11,160
让我继续获取灯泡的IP地址
Let me go ahead and get the IP address of the light bulb

2971
02:28:11,159 --> 02:28:14,159
通过执行os.getenv quote-unquote“ IP”。
by doing os.getenv quote-unquote "IP".

2972
02:28:14,159 --> 02:28:16,949
最后，让我继续构建URL。
And then lastly, let me go ahead and construct a URL.

2973
02:28:16,950 --> 02:28:22,200
通过阅读文档，幸运的是，一位同事构建了URL
By having read the documentation, thankfully a colleague constructed URLs

2974
02:28:22,200 --> 02:28:29,175
看起来像是http：//灯泡的IP地址，
that looks like this, http://, the IP address of the light bulb,

2975
02:28:29,174 --> 02:28:33,389
斜杠API斜杠我的用户名，以防其他人想要
slash API slash My username, personally, in case different people want

2976
02:28:33,389 --> 02:28:37,229
为了控制灯泡，将灯的斜线砍成一个斜线的状态。
to control the light bulb, slash light slash one slash state.

2977
02:28:37,229 --> 02:28:41,639
因此，这是一个看起来很奇怪的网址，但实际上它将是http：//
So this is a weird-looking URL, but it's essentially going to be http://

2978
02:28:41,639 --> 02:28:45,809
不管此灯泡的数字IP地址是斜杠IP斜杠
whatever the numeric IP address is of this light bulb slash IP slash

2979
02:28:45,809 --> 02:28:49,139
我的用户名斜线轻斜线表示一个斜线状态。
my username slash light slash one slash state.

2980
02:28:49,139 --> 02:28:52,139
所以我可以从字面上复制并将其粘贴到浏览器中
So I could literally copy and paste that into a browser

2981
02:28:52,139 --> 02:28:54,209
如果我知道这些价值观是不合时宜的，
if I knew what those values were offhand,

2982
02:28:54,209 --> 02:28:56,579
但我将以编程方式执行此操作。
but I'm going to do this programmatically instead.

2983
02:28:56,579 --> 02:28:59,909
我要继续写请求-
I'm going to go ahead and write requests--

2984
02:28:59,909 --> 02:29:03,546
我可以说如果我要发送一个get请求（不是我想要的），则获取get，
and I could say get if I want to send a get request, which is not what I want,

2985
02:29:03,547 --> 02:29:05,880
因为我不想得到灯泡的价值。
because I don't want to get the value of the light bulb.

2986
02:29:05,879 --> 02:29:07,921
我不想发布灯泡的价值。
I don't want to post the value of the light bulb.

2987
02:29:07,922 --> 02:29:10,840
事实证明，这是我们之前从未见过的第三个HTTP动词，
It turns out there's a third HTTP verb that we've not seen before,

2988
02:29:10,840 --> 02:29:13,410
但通常用于API（称为put）。
but it's often used for APIs, called put.

2989
02:29:13,409 --> 02:29:18,519
从技术上讲，全部都是大写，但是在代码中，则以小写.put编写。
Technically it's all caps, P-U-T, but in code, it's written in lowercase, .put.

2990
02:29:18,520 --> 02:29:19,680
所以这将发送-
So this is going to send--

2991
02:29:19,680 --> 02:29:22,950
它会将Mac上的消息发送到此灯泡。
it's going to send a message from my Mac to this light bulb.

2992
02:29:22,950 --> 02:29:28,720
因此，让我继续下面的Python字典，并将其放入该URL。
So let me go ahead and put to this URL the following Python dictionary.

2993
02:29:28,719 --> 02:29:31,049
我将继续进行操作，并将值设置为quote-unquote
I'm going to go ahead and put a value of quote-unquote

2994
02:29:31,049 --> 02:29:35,039
将Python布尔值“ false”设置为“ on”。
"on" to the Python Boolean value of false.

2995
02:29:35,040 --> 02:29:36,370
现在，什么是json？
Now, what is json?

2996
02:29:36,370 --> 02:29:39,540
Json代表JavaScript Object Notation，
Json stands for JavaScript Object Notation,

2997
02:29:39,540 --> 02:29:41,520
这只是传统的发送方式
which is just a conventional way of sending

2998
02:29:41,520 --> 02:29:44,020
互联网上的短信。
textual messages across the internet.

2999
02:29:44,020 --> 02:29:45,270
因此，我们很快就会看到。
So we'll see that before long.

3000
02:29:45,270 --> 02:29:48,120
但是现在，这只是发送给灯泡
But for now, this is just sending to the light bulb

3001
02:29:48,120 --> 02:29:53,290
具有on键和false值的字典。
a dictionary which has a key of on and a value of false.

3002
02:29:53,290 --> 02:29:57,600
如果我没有做错任何事，请让我继续并关闭此文件，
And if I didn't do anything wrong, let me go ahead and close this file,

3003
02:29:57,600 --> 02:30:03,390
一如既往地运行light.py的Python，不由自主地-
run Python of light.py, cross my fingers, as always--

3004
02:30:03,389 --> 02:30:04,619
瞧。
voila.

3005
02:30:04,620 --> 02:30:07,020
现在，这个灯泡不必离我一英尺远。
Now, this light bulb doesn't have to be one foot from me.

3006
02:30:07,020 --> 02:30:08,940
它实际上可以在互联网上的其他任何地方
It can be literally elsewhere on the internet

3007
02:30:08,940 --> 02:30:12,905
只要我有互联网连接并且可以访问该IP地址
so long as I have an internet connection and I have access to that IP address

3008
02:30:12,905 --> 02:30:15,030
通过互联网，我今天不想这么做，
over the internet, which I didn't want to do today,

3009
02:30:15,030 --> 02:30:18,300
以免我们有数百人为我打开和关闭灯泡。
lest we have hundreds of people turning the light bulb on and off for me.

3010
02:30:18,299 --> 02:30:20,909
但是，让我继续更改代码吧。
But let me go ahead and change the code a little bit now.

3011
02:30:20,909 --> 02:30:24,389
让我继续将其重新打开，然后进行更改，当然，
Let me go ahead and turn it back on, and change on, of course,

3012
02:30:24,389 --> 02:30:26,249
你可能猜到了。
to true, as you might guess.

3013
02:30:26,250 --> 02:30:27,870
所以几乎相同的代码。
So almost the same code.

3014
02:30:27,870 --> 02:30:32,230
现在让我继续并再次运行light.py的Python。
Let me go ahead now and run Python of light.py again.

3015
02:30:32,229 --> 02:30:33,219
在。
On.

3016
02:30:33,219 --> 02:30:34,929
让我们做一点儿幻想。
And let's make it a little fancier.

3017
02:30:34,930 --> 02:30:37,840
让我们继续，在这里多一点逻辑，
Let's go ahead and get a little more logical here,

3018
02:30:37,840 --> 02:30:41,780
所做的事情比到目前为止要有趣的多。
doing things a little more interestingly than we have thus far.

3019
02:30:41,780 --> 02:30:44,600
让我们看看我们是否也无法使眨眼栩栩如生。
And let's see if we can't bring that blink to life as well.

3020
02:30:44,600 --> 02:30:47,860
让我下去这里，这次我们可以做无限的事情。
Let me go down here, and let's do something infinitely this time.

3021
02:30:47,860 --> 02:30:50,120
真是的-
How about while true--

3022
02:30:50,120 --> 02:30:52,780
因此，这个演示将永远进行下去-哎呀-
so forever, this demo will go on-- whoops--

3023
02:30:52,780 --> 02:30:59,410
确实如此，请继续打开该URL，不仅要打开和关闭它。
while true, go ahead and put to that URL not just on and off.

3024
02:30:59,409 --> 02:31:03,809
让我们继续，将亮度更改为254，这样真的很明亮，
Let's go ahead and change the brightness to a value of 254, so really bright,

3025
02:31:03,809 --> 02:31:07,829
让我们继续前进，并像以前一样将其更改为true。
and let's go ahead and change on to true, as before.

3026
02:31:07,829 --> 02:31:13,119
但是，让我们继续睡眠片刻，然后时间睡眠一秒钟。
But then let's go ahead and sleep for a moment, so time.sleep for one second.

3027
02:31:13,120 --> 02:31:15,120
然后让我们继续发送另一个请求
And then let's go ahead and send another request

3028
02:31:15,120 --> 02:31:19,140
一秒钟后到达相同的URL，然后在Python字典中发送
after a second to that same URL, sending in a Python dictionary

3029
02:31:19,139 --> 02:31:22,469
现在在哪里是假的。
where on is now false.

3030
02:31:22,469 --> 02:31:25,472
然后让我们继续睡觉一秒钟。
And then let's go ahead and sleep for one second.

3031
02:31:25,472 --> 02:31:27,389
您可能已经注意到我需要另一个图书馆。
You might have noticed I need another library.

3032
02:31:27,389 --> 02:31:29,729
我需要导入时间，听起来很棒，
I need to import time, which sounds amazing,

3033
02:31:29,729 --> 02:31:31,559
但这只是时间库。
but it's just the library called time.

3034
02:31:31,559 --> 02:31:33,809
我已经保存了文件，并且永远都在前进
I've saved the file, and I'm forever going

3035
02:31:33,809 --> 02:31:38,079
发送一个请求将其打开，另一个请求将其关闭。
to send one request turning it on, another request sending it off.

3036
02:31:38,079 --> 02:31:41,489
现在，light.py的Python达到了高潮。
And now, the climactic finish, Python of light.py.

3037
02:31:46,930 --> 02:31:48,323
好吧，宇！
All right, woo!

3038
02:31:48,323 --> 02:31:49,430
[笑声]
[CHUCKLES]

3039
02:31:49,430 --> 02:31:50,230
好的。
OK.

3040
02:31:50,229 --> 02:31:51,879
CS50就是这样。
That's it for CS50.

3041
02:31:51,879 --> 02:31:53,890
下次见。
We will see you next time.

3042
02:31:53,890 --> 02:31:57,566
[音乐播放]
[MUSIC PLAYING]

3043
02:31:57,566 --> 02:31:58,399
菲利斯，第二。
Phyllis, number two.

3044
02:31:58,399 --> 02:31:59,482
从左数第二。
Number two from your left.

3045
02:31:59,483 --> 02:32:01,722
[笑声]
[LAUGHS]

3046
02:32:01,721 --> 02:32:04,025
[笑声]
[LAUGHTER]

3047
02:32:04,025 --> 02:32:05,089
好的，我们可以解决这个问题。
OK, this one we can fix.

3048
02:32:10,000 --> 02:32:11,473
太好了，乔希。
That was amazing, Josh.

3049
02:32:15,882 --> 02:32:16,382
苏菲？
Sophie?

3050
02:32:16,382 --> 02:32:20,310
[笑声]
[LAUGHS]

3051
02:32:20,310 --> 02:32:21,783
发言者：我真的试图隐藏它。
SPEAKER: I really tried to hide it.

3052
02:32:28,166 --> 02:32:29,719
DAVID J. MALAN：[听不清]-
DAVID J. MALAN: [INAUDIBLE]--

3053
02:32:29,719 --> 02:32:30,319
哦！
oh!

3054
02:32:30,319 --> 02:32:32,419
[笑声]
[LAUGHTER]

3055
02:32:34,219 --> 02:32:35,227
发言者：太近了。
SPEAKER: So close.

3056
02:32:35,227 --> 02:32:36,019
DAVID J. MALAN：好的。
DAVID J. MALAN: OK.

3057
02:32:36,020 --> 02:32:36,687
我们会再试一次。
We'll try again.

3058
02:32:36,686 --> 02:32:38,769
开始了。
Here we go.

